[{"/Users/jesusjimenez/Creative/MusicProject/musicapp/src/redux/reducers.js":"1","/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Students/Courses/StudentCourseQuiz.js":"2","/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Teachers/Milestones/MilestonesMain.js":"3","/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Teachers/FileManager/FileManagerMain.js":"4","/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Teachers/Invoices/InvoicesMain.js":"5","/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Teachers/Support/SupportMain.js":"6","/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Footer.js":"7","/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Plans/PlanPanel.js":"8","/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/InputDateFormatter.js":"9","/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Courses/CoursesCard.js":"10","/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Teachers/Profile/ProfileReviewsView.js":"11","/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Teachers/Profile/ProfileFeedCreate.js":"12","/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Teachers/Statistics/GroupStats.js":"13","/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Students/Profile/ProfileAwardsView.js":"14","/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Students/Profile/ProfileFeedView.js":"15","/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Teachers/Forums/ForumSinglePostBlock.js":"16","/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Teachers/Students/StudentOverview.js":"17","/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Courses.js":"18","/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Students/Messages/StudentMessagesMain.js":"19","/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Teachers/Students/StudentsMain.js":"20","/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Teachers/Milestones/MilestoneEdit.js":"21","/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Teachers/Events/EventEdit.js":"22","/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Teachers/Events/EventView.js":"23","/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Teachers/Invoices/InvoiceView.js":"24","/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Teachers/Forums/ForumsMain.js":"25","/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/RandomString.js":"26","/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Teachers/Dash/Achievement.js":"27","/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Teachers/Dash/DashFooter.js":"28","/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Teachers/Profile/ProfileGallery.js":"29","/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Teachers/Groups/GroupAboutEdit.js":"30","/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Teachers/Statistics/EventStats.js":"31","/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Students/Profile/ProfileAwardsEdit.js":"32","/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Home/HomeCoursesCard.js":"33","/Users/jesusjimenez/Creative/MusicProject/musicapp/src/redux/actions.js":"34","/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Login.js":"35","/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Teachers/Groups/GroupsPage.js":"36","/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Teachers/Milestones/MilestoneAssign.js":"37","/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Teachers/Articles/ArticlesMain.js":"38","/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Teachers/Settings/SettingsMain.js":"39","/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Students/Footer.js":"40","/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Teachers/Dash/AnnouncementBox.js":"41","/Users/jesusjimenez/Creative/MusicProject/musicapp/src/utils/tools.js":"42","/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Teachers/Profile/ProfileFeedEdit.js":"43","/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Teachers/Invoices/InvoiceBlock.js":"44","/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Teachers/Groups/GroupFeedEdit.js":"45","/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Students/Profile/ProfileAboutView.js":"46","/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/TeacherDash.js":"47","/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Students/Assignments/StudentAssignmentView.js":"48","/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Teachers/Assignments/AssignmentView.js":"49","/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Teachers/Messages/MessageThreadView.js":"50","/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/GetToday.js":"51","/Users/jesusjimenez/Creative/MusicProject/musicapp/src/utils/firebase.js":"52","/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Teachers/Profile/ProfileAwardsView.js":"53","/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Teachers/Profile/ProfileAwardsEdit.js":"54","/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Teachers/Dash/TopBar.js":"55","/Users/jesusjimenez/Creative/MusicProject/musicapp/src/App.js":"56","/Users/jesusjimenez/Creative/MusicProject/musicapp/src/index.js":"57","/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Students/Profile/StudentProfileMain.js":"58","/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Students/Messages/StudentMessageThreadView.js":"59","/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Teachers/Events/EventNew.js":"60","/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Teachers/Groups/GroupAboutView.js":"61","/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Teachers/Statistics/StudentStats.js":"62","/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Teachers/Statistics/StorageStats.js":"63","/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Students/Profile/ProfileFeedEdit.js":"64","/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Students/Courses/StudentCoursePreview.js":"65","/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Teachers/Milestones/MilestoneView.js":"66","/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Teachers/Profile/ProfileAboutView.js":"67","/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Teachers/Dash/RecentActivity.js":"68","/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Teachers/Dash/UpcomingEvents.js":"69","/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Teachers/Articles/ArticleBlock.js":"70","/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Teachers/Groups/GroupFeedView.js":"71","/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Students/Courses/StudentCourseLesson.js":"72","/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Teachers/Assignments/AssignmentEdit.js":"73","/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Teachers/Statistics/StatisticsMain.js":"74","/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Courses/CoursesDeck.js":"75","/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/FirebaseDate.js":"76","/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Teachers/Profile/ProfileAboutEdit.js":"77","/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Students/Courses/StudentCourseExercise.js":"78","/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Teachers/Assignments/AssignmentNew.js":"79","/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Students/Profile/ProfileAboutEdit.js":"80","/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Students/Assignments/StudentAssignmentsMain.js":"81","/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Teachers/Events/EventsMain.js":"82","/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Home/HomeCoursesDeck.js":"83","/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Teachers/Tutorials/TutorialsMain.js":"84","/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Students/TopBar.js":"85","/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Home.js":"86","/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Teachers/Dash/RecentInvoices.js":"87","/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Students/Courses/StudentCoursesMain.js":"88","/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Teachers/Assignments/AssignmentsMain.js":"89","/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Teachers/Dash/SimpleStats.js":"90","/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/MiscComponents/Notice.js":"91","/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Students/StudentDash.js":"92","/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Teachers/Connections/ConnectionsMain.js":"93","/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Teachers/Statistics/ForumStats.js":"94","/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Teachers/Profile/ProfileFeedView.js":"95","/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Teachers/Messages/MessagesMain.js":"96","/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Teachers/Groups/GroupMembersView.js":"97","/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Teachers/Dash/Earnings.js":"98","/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Plans.js":"99","/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Teachers/Courses/CoursesMain.js":"100","/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Teachers/Courses/WizardNewCourse.js":"101","/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/FileUpload.js":"102","/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Teachers/Courses/WizardNewLesson.js":"103","/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Teachers/Courses/WizardNewQuiz.js":"104","/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Contact.js":"105","/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Teachers/Forums/ForumBlocks.js":"106","/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Teachers/Courses/CourseOverview.js":"107","/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Teachers/Statistics/CourseStats.js":"108","/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Teachers/Groups/GroupsMain.js":"109"},{"size":38233,"mtime":1619501272404,"results":"110","hashOfConfig":"111"},{"size":9820,"mtime":1616518788000,"results":"112","hashOfConfig":"111"},{"size":4898,"mtime":1618332446000,"results":"113","hashOfConfig":"111"},{"size":381,"mtime":1611098584000,"results":"114","hashOfConfig":"111"},{"size":1939,"mtime":1612304304000,"results":"115","hashOfConfig":"111"},{"size":372,"mtime":1611098940000,"results":"116","hashOfConfig":"111"},{"size":546,"mtime":1610060462000,"results":"117","hashOfConfig":"111"},{"size":516,"mtime":1610149688000,"results":"118","hashOfConfig":"111"},{"size":330,"mtime":1613170976000,"results":"119","hashOfConfig":"111"},{"size":532,"mtime":1610137072000,"results":"120","hashOfConfig":"111"},{"size":2790,"mtime":1617830050000,"results":"121","hashOfConfig":"111"},{"size":3190,"mtime":1617837084000,"results":"122","hashOfConfig":"111"},{"size":994,"mtime":1611252184000,"results":"123","hashOfConfig":"111"},{"size":2798,"mtime":1615659298000,"results":"124","hashOfConfig":"111"},{"size":4313,"mtime":1615413972000,"results":"125","hashOfConfig":"111"},{"size":887,"mtime":1612127232000,"results":"126","hashOfConfig":"111"},{"size":14962,"mtime":1619064845259,"results":"127","hashOfConfig":"111"},{"size":1420,"mtime":1612132370000,"results":"128","hashOfConfig":"111"},{"size":6706,"mtime":1617233350000,"results":"129","hashOfConfig":"111"},{"size":8671,"mtime":1619109768105,"results":"130","hashOfConfig":"111"},{"size":2680,"mtime":1617747182000,"results":"131","hashOfConfig":"111"},{"size":4936,"mtime":1617571780000,"results":"132","hashOfConfig":"111"},{"size":1452,"mtime":1617568326000,"results":"133","hashOfConfig":"111"},{"size":3473,"mtime":1612306040000,"results":"134","hashOfConfig":"111"},{"size":3424,"mtime":1612222558000,"results":"135","hashOfConfig":"111"},{"size":106,"mtime":1613175542000,"results":"136","hashOfConfig":"111"},{"size":220,"mtime":1610317768000,"results":"137","hashOfConfig":"111"},{"size":330,"mtime":1617706170000,"results":"138","hashOfConfig":"111"},{"size":158,"mtime":1611255536000,"results":"139","hashOfConfig":"111"},{"size":1500,"mtime":1614100694000,"results":"140","hashOfConfig":"111"},{"size":994,"mtime":1611252302000,"results":"141","hashOfConfig":"111"},{"size":11428,"mtime":1615673918000,"results":"142","hashOfConfig":"111"},{"size":443,"mtime":1610059478000,"results":"143","hashOfConfig":"111"},{"size":19352,"mtime":1619501279907,"results":"144","hashOfConfig":"111"},{"size":6637,"mtime":1617777686000,"results":"145","hashOfConfig":"111"},{"size":5106,"mtime":1614103304000,"results":"146","hashOfConfig":"111"},{"size":3532,"mtime":1618334484000,"results":"147","hashOfConfig":"111"},{"size":1204,"mtime":1611792358000,"results":"148","hashOfConfig":"111"},{"size":374,"mtime":1611098776000,"results":"149","hashOfConfig":"111"},{"size":261,"mtime":1619107169603,"results":"150","hashOfConfig":"111"},{"size":229,"mtime":1610317410000,"results":"151","hashOfConfig":"111"},{"size":197,"mtime":1612831364000,"results":"152","hashOfConfig":"111"},{"size":3481,"mtime":1617837008000,"results":"153","hashOfConfig":"111"},{"size":468,"mtime":1612301776000,"results":"154","hashOfConfig":"111"},{"size":1842,"mtime":1614099488000,"results":"155","hashOfConfig":"111"},{"size":2900,"mtime":1615420258000,"results":"156","hashOfConfig":"111"},{"size":3770,"mtime":1619019724630,"results":"157","hashOfConfig":"111"},{"size":6755,"mtime":1617128710000,"results":"158","hashOfConfig":"111"},{"size":6071,"mtime":1617125994000,"results":"159","hashOfConfig":"111"},{"size":4722,"mtime":1617908760000,"results":"160","hashOfConfig":"111"},{"size":142,"mtime":1617401924000,"results":"161","hashOfConfig":"111"},{"size":1452,"mtime":1618346764000,"results":"162","hashOfConfig":"111"},{"size":3192,"mtime":1617829824000,"results":"163","hashOfConfig":"111"},{"size":12301,"mtime":1617829798000,"results":"164","hashOfConfig":"111"},{"size":4669,"mtime":1619110516879,"results":"165","hashOfConfig":"111"},{"size":35157,"mtime":1619500838777,"results":"166","hashOfConfig":"111"},{"size":356,"mtime":1610057812000,"results":"167","hashOfConfig":"111"},{"size":2693,"mtime":1615575644000,"results":"168","hashOfConfig":"111"},{"size":3902,"mtime":1617232042000,"results":"169","hashOfConfig":"111"},{"size":3139,"mtime":1617573184000,"results":"170","hashOfConfig":"111"},{"size":788,"mtime":1614100210000,"results":"171","hashOfConfig":"111"},{"size":1009,"mtime":1611184392000,"results":"172","hashOfConfig":"111"},{"size":1033,"mtime":1611165286000,"results":"173","hashOfConfig":"111"},{"size":1671,"mtime":1615415482000,"results":"174","hashOfConfig":"111"},{"size":10358,"mtime":1616518360000,"results":"175","hashOfConfig":"111"},{"size":4088,"mtime":1617747588000,"results":"176","hashOfConfig":"111"},{"size":4178,"mtime":1617868618000,"results":"177","hashOfConfig":"111"},{"size":227,"mtime":1610317616000,"results":"178","hashOfConfig":"111"},{"size":227,"mtime":1610317810000,"results":"179","hashOfConfig":"111"},{"size":318,"mtime":1611792400000,"results":"180","hashOfConfig":"111"},{"size":3994,"mtime":1613943452000,"results":"181","hashOfConfig":"111"},{"size":4503,"mtime":1615963134000,"results":"182","hashOfConfig":"111"},{"size":6695,"mtime":1617087312000,"results":"183","hashOfConfig":"111"},{"size":1810,"mtime":1611162374000,"results":"184","hashOfConfig":"111"},{"size":402,"mtime":1610137228000,"results":"185","hashOfConfig":"111"},{"size":279,"mtime":1615666200000,"results":"186","hashOfConfig":"111"},{"size":12649,"mtime":1617869084000,"results":"187","hashOfConfig":"111"},{"size":3693,"mtime":1616091624000,"results":"188","hashOfConfig":"111"},{"size":7569,"mtime":1617088784000,"results":"189","hashOfConfig":"111"},{"size":9398,"mtime":1615505326000,"results":"190","hashOfConfig":"111"},{"size":3388,"mtime":1617558562000,"results":"191","hashOfConfig":"111"},{"size":10129,"mtime":1617573612000,"results":"192","hashOfConfig":"111"},{"size":841,"mtime":1610059896000,"results":"193","hashOfConfig":"111"},{"size":376,"mtime":1611098846000,"results":"194","hashOfConfig":"111"},{"size":8899,"mtime":1619110478325,"results":"195","hashOfConfig":"111"},{"size":3710,"mtime":1615312832000,"results":"196","hashOfConfig":"111"},{"size":227,"mtime":1610317656000,"results":"197","hashOfConfig":"111"},{"size":3947,"mtime":1615677268000,"results":"198","hashOfConfig":"111"},{"size":3657,"mtime":1619469066751,"results":"199","hashOfConfig":"111"},{"size":221,"mtime":1610317554000,"results":"200","hashOfConfig":"111"},{"size":426,"mtime":1617121720000,"results":"201","hashOfConfig":"111"},{"size":1426,"mtime":1619106925900,"results":"202","hashOfConfig":"111"},{"size":521,"mtime":1619018886827,"results":"203","hashOfConfig":"111"},{"size":1005,"mtime":1611252314000,"results":"204","hashOfConfig":"111"},{"size":4307,"mtime":1617836218000,"results":"205","hashOfConfig":"111"},{"size":7454,"mtime":1617177826000,"results":"206","hashOfConfig":"111"},{"size":1519,"mtime":1614101380000,"results":"207","hashOfConfig":"111"},{"size":214,"mtime":1610317724000,"results":"208","hashOfConfig":"111"},{"size":3165,"mtime":1610172378000,"results":"209","hashOfConfig":"111"},{"size":3163,"mtime":1619313230423,"results":"210","hashOfConfig":"111"},{"size":3333,"mtime":1619243796871,"results":"211","hashOfConfig":"111"},{"size":1960,"mtime":1619284140545,"results":"212","hashOfConfig":"111"},{"size":3977,"mtime":1619244369227,"results":"213","hashOfConfig":"111"},{"size":25683,"mtime":1619284475306,"results":"214","hashOfConfig":"111"},{"size":1878,"mtime":1610173754000,"results":"215","hashOfConfig":"111"},{"size":249,"mtime":1612221170000,"results":"216","hashOfConfig":"111"},{"size":6200,"mtime":1619500805541,"results":"217","hashOfConfig":"111"},{"size":999,"mtime":1611252310000,"results":"218","hashOfConfig":"111"},{"size":7076,"mtime":1614556054000,"results":"219","hashOfConfig":"111"},{"filePath":"220","messages":"221","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1fkqrla",{"filePath":"222","messages":"223","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"224","usedDeprecatedRules":"225"},{"filePath":"226","messages":"227","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"228","usedDeprecatedRules":"229"},{"filePath":"230","messages":"231","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"232"},{"filePath":"233","messages":"234","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"235","usedDeprecatedRules":"232"},{"filePath":"236","messages":"237","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"238"},{"filePath":"239","messages":"240","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"241","messages":"242","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"243"},{"filePath":"244","messages":"245","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"246"},{"filePath":"247","messages":"248","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"246"},{"filePath":"249","messages":"250","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"251","usedDeprecatedRules":"243"},{"filePath":"252","messages":"253","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"254","usedDeprecatedRules":"255"},{"filePath":"256","messages":"257","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"258","usedDeprecatedRules":"259"},{"filePath":"260","messages":"261","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"262","usedDeprecatedRules":"263"},{"filePath":"264","messages":"265","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"266","usedDeprecatedRules":"267"},{"filePath":"268","messages":"269","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"270","messages":"271","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"272","messages":"273","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"246"},{"filePath":"274","messages":"275","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"276","messages":"277","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"278","usedDeprecatedRules":"232"},{"filePath":"279","messages":"280","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"281","usedDeprecatedRules":"246"},{"filePath":"282","messages":"283","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"284","usedDeprecatedRules":"238"},{"filePath":"285","messages":"286","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"287","usedDeprecatedRules":"288"},{"filePath":"289","messages":"290","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"291","usedDeprecatedRules":"292"},{"filePath":"293","messages":"294","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"295","usedDeprecatedRules":"229"},{"filePath":"296","messages":"297","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"232"},{"filePath":"298","messages":"299","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"229"},{"filePath":"300","messages":"301","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"302"},{"filePath":"303","messages":"304","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"229"},{"filePath":"305","messages":"306","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"307","usedDeprecatedRules":"229"},{"filePath":"308","messages":"309","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"310","usedDeprecatedRules":"263"},{"filePath":"311","messages":"312","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"313","usedDeprecatedRules":"267"},{"filePath":"314","messages":"315","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"316"},{"filePath":"317","messages":"318","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"319","messages":"320","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"321","usedDeprecatedRules":"238"},{"filePath":"322","messages":"323","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"324","usedDeprecatedRules":"225"},{"filePath":"325","messages":"326","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"327","usedDeprecatedRules":"316"},{"filePath":"328","messages":"329","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"330","usedDeprecatedRules":"267"},{"filePath":"331","messages":"332","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"267"},{"filePath":"333","messages":"334","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"335","messages":"336","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"337"},{"filePath":"338","messages":"339","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"232"},{"filePath":"340","messages":"341","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"342","usedDeprecatedRules":"267"},{"filePath":"343","messages":"344","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"243"},{"filePath":"345","messages":"346","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"347","messages":"348","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"349","usedDeprecatedRules":"302"},{"filePath":"350","messages":"351","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"352","usedDeprecatedRules":"232"},{"filePath":"353","messages":"354","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"355","usedDeprecatedRules":"232"},{"filePath":"356","messages":"357","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"358","usedDeprecatedRules":"359"},{"filePath":"360","messages":"361","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"362","usedDeprecatedRules":"316"},{"filePath":"363","messages":"364","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"267"},{"filePath":"365","messages":"366","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"302"},{"filePath":"367","messages":"368","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"369","usedDeprecatedRules":"302"},{"filePath":"370","messages":"371","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"372","usedDeprecatedRules":"373"},{"filePath":"374","messages":"375","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"376","usedDeprecatedRules":"377"},{"filePath":"378","messages":"379","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"380","messages":"381","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"316"},{"filePath":"382","messages":"383","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"384","usedDeprecatedRules":"243"},{"filePath":"385","messages":"386","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"387","usedDeprecatedRules":"263"},{"filePath":"388","messages":"389","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"390","usedDeprecatedRules":"229"},{"filePath":"391","messages":"392","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"393","messages":"394","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"395","usedDeprecatedRules":"246"},{"filePath":"396","messages":"397","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"398","usedDeprecatedRules":"377"},{"filePath":"399","messages":"400","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"401","usedDeprecatedRules":"243"},{"filePath":"402","messages":"403","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"404","usedDeprecatedRules":"267"},{"filePath":"405","messages":"406","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"407","usedDeprecatedRules":"225"},{"filePath":"408","messages":"409","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"410","usedDeprecatedRules":"359"},{"filePath":"411","messages":"412","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"302"},{"filePath":"413","messages":"414","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"337"},{"filePath":"415","messages":"416","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"232"},{"filePath":"417","messages":"418","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"419","usedDeprecatedRules":"243"},{"filePath":"420","messages":"421","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"422","usedDeprecatedRules":"246"},{"filePath":"423","messages":"424","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"425","usedDeprecatedRules":"246"},{"filePath":"426","messages":"427","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"225"},{"filePath":"428","messages":"429","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"246"},{"filePath":"430","messages":"431","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"263"},{"filePath":"432","messages":"433","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"434","usedDeprecatedRules":"243"},{"filePath":"435","messages":"436","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"437","usedDeprecatedRules":"232"},{"filePath":"438","messages":"439","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"440","messages":"441","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"442","usedDeprecatedRules":"225"},{"filePath":"443","messages":"444","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"445","usedDeprecatedRules":"267"},{"filePath":"446","messages":"447","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"448","usedDeprecatedRules":"246"},{"filePath":"449","messages":"450","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"229"},{"filePath":"451","messages":"452","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"246"},{"filePath":"453","messages":"454","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"455","usedDeprecatedRules":"238"},{"filePath":"456","messages":"457","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"373"},{"filePath":"458","messages":"459","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"460","messages":"461","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"462","usedDeprecatedRules":"377"},{"filePath":"463","messages":"464","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"465","messages":"466","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"238"},{"filePath":"467","messages":"468","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"316"},{"filePath":"469","messages":"470","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"471","usedDeprecatedRules":"243"},{"filePath":"472","messages":"473","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"474","messages":"475","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"476","usedDeprecatedRules":"246"},{"filePath":"477","messages":"478","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"479","usedDeprecatedRules":"243"},{"filePath":"480","messages":"481","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"482","usedDeprecatedRules":"232"},{"filePath":"483","messages":"484","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"485","usedDeprecatedRules":"246"},{"filePath":"486","messages":"487","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"246"},{"filePath":"488","messages":"489","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"490","messages":"491","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"492","messages":"493","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"494","usedDeprecatedRules":"267"},{"filePath":"495","messages":"496","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"497","messages":"498","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"499","usedDeprecatedRules":"246"},{"filePath":"500","messages":"501","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"502","usedDeprecatedRules":"232"},{"filePath":"503","messages":"504","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"243"},{"filePath":"505","messages":"506","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"507","messages":"508","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"509","messages":"510","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"511","messages":"512","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"513","usedDeprecatedRules":"246"},"/Users/jesusjimenez/Creative/MusicProject/musicapp/src/redux/reducers.js",[],"/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Students/Courses/StudentCourseQuiz.js",["514","515","516","517"],"import React, { useEffect } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { useHistory } from \"react-router-dom\";\nimport {\n  storeStudentQuizResultsAction,\n  toggleStudentQuizResultsAction,\n  storeCurrentCourseComponentAction,\n  storeStudentNextLessonAction,\n} from \"../../../redux/actions\";\nimport {\n  courses_Collection,\n  students_Collection,\n} from \"../../../utils/firebase\";\nimport { firebaseLooper } from \"../../../utils/tools\";\n\nimport Footer from \"../Footer\";\nimport RandomString from \"../../RandomString\";\nimport GetToday from \"../../GetToday\";\n\nexport default function StudentCourseQuiz() {\n  const studentAuthID = useSelector((state) => state.storeStudentAuthIDReducer);\n  const user = useSelector((state) => state.storeStudentUserDataReducer);\n  const history = useHistory();\n  const dispatch = useDispatch();\n\n  //   State\n  const toggleQuizResults = useSelector(\n    (state) => state.toggleStudentQuizResultsReducer\n  );\n\n  const course = useSelector((state) => state.storeStudentSingleCourseReducer);\n\n  const quiz = useSelector((state) => state.storeStudentNextQuizReducer);\n  const results = useSelector((state) => state.storeStudentQuizResultsReducer);\n\n  //   HANDLE\n  const handleQuizComponents = () => {\n    if (quiz.Components) {\n      return (\n        <div>\n          {quiz.Components.map((q, i) => {\n            if (q.Type === \"multiple\") {\n              return (\n                <div key={i}>\n                  <h3>{q.Question}</h3>\n                  {q.Options.map((opt, a) => {\n                    return (\n                      <div>\n                        <input\n                          type=\"radio\"\n                          id={`comp${i}Opt${a}`}\n                          name={`comp${i}`}\n                          value={opt}\n                        />\n                        <label>{opt}</label>\n                        <br />\n                      </div>\n                    );\n                  })}\n                </div>\n              );\n            } else if (q.Type === \"short\") {\n              return (\n                <div key={i}>\n                  <h3>{q.Text}</h3>\n                  <p>Please type your response below:</p>\n                  <textarea id={`taShortRes${i}`}></textarea>\n                </div>\n              );\n            } else if (q.Type === \"long\") {\n              return (\n                <div key={i}>\n                  <h3>{q.Text}</h3>\n                  <p>Please type your response below:</p>\n                  <textarea id={`taLongRes${i}`}></textarea>\n                </div>\n              );\n            } else if (q.Type === \"boolean\") {\n              return (\n                <div key={i}>\n                  <h3>{q.Statement}</h3>\n                  <input\n                    type=\"radio\"\n                    id={`raTrue${i}`}\n                    name={`raBool${i}`}\n                    value=\"true\"\n                  />\n                  <label>True</label>\n                  <br />\n                  <input\n                    type=\"radio\"\n                    id={`raFalse${i}`}\n                    name={`raBool${i}`}\n                    value=\"false\"\n                  />\n                  <label>False</label>\n                  <br />\n                </div>\n              );\n            }\n          })}\n          <br />\n          <button onClick={calcResults}>Submit</button>\n        </div>\n      );\n    }\n  };\n  const handleResults = () => {\n    //   Display results\n    return (\n      <div>\n        {results.map((re, i) => {\n          if (re.Type === \"multiple\") {\n            return (\n              <div key={i}>\n                <h3>\n                  {i + 1}. {quiz.Components[i].Question}\n                </h3>\n                <p>Your Answer: {re.Given}</p>\n                <p>Correct Answer: {re.Answer}</p>\n              </div>\n            );\n          } else if (re.Type === \"short\") {\n            return (\n              <div key={i}>\n                <h3>\n                  {i + 1}. {quiz.Components[i].Text}\n                </h3>\n                <p>Your Answer: {re.Given}</p>\n                <p>Correct Answer: {re.Answer}</p>\n              </div>\n            );\n          } else if (re.Type === \"long\") {\n            return (\n              <div key={i}>\n                <h3>\n                  {i + 1}. {quiz.Components[i].Text}\n                </h3>\n                <p>Your Answer: {re.Given}</p>\n                <p>Correct Answer: {re.Answer}</p>\n              </div>\n            );\n          } else if (re.Type === \"boolean\") {\n            return (\n              <div key={i}>\n                <h3>\n                  {i + 1}. {quiz.Components[i].Statement}\n                </h3>\n                <p>Your Answer: {re.Given}</p>\n                <p>Correct Answer: {re.Answer}</p>\n              </div>\n            );\n          }\n        })}\n        <br />\n        <button onClick={navLesson}>Finish</button>\n      </div>\n    );\n  };\n\n  //   CALC\n  const calcResults = () => {\n    let results = [];\n    quiz.Components.forEach((comp, i) => {\n      if (comp.Type === \"multiple\") {\n        const compLength = comp.Options.length;\n        const answer = comp.Answer;\n\n        for (let a = 0; a < compLength; a = a + 1) {\n          const radioChecked = document.querySelector(`#comp${i}Opt${a}`)\n            .checked;\n          const radioValue = document.querySelector(`#comp${i}Opt${a}`).value;\n\n          if (radioChecked) {\n            //   Insert into results\n            let thing = \"\";\n            if (answer === radioValue) {\n              thing = \"Correct\";\n            } else {\n              thing = \"Incorrect\";\n            }\n            results.push({\n              Answer: answer,\n              Given: radioValue,\n              Result: thing,\n              Type: \"multiple\",\n            });\n          }\n        }\n      } else if (comp.Type === \"short\") {\n        const answer = comp.Answer;\n        const shortRes = document.querySelector(`#taShortRes${i}`).value;\n\n        results.push({\n          Answer: answer,\n          Given: shortRes,\n          Result: 'Pending',\n          Type: \"short\",\n        });\n      } else if (comp.Type === \"long\") {\n        const answer = comp.Answer;\n        const longRes = document.querySelector(`#taLongRes${i}`).value;\n\n        results.push({\n          Answer: answer,\n          Given: longRes,\n          Result: 'Pending',\n          Type: \"long\",\n        });\n      } else if (comp.Type === \"boolean\") {\n        const answer = comp.Answer;\n        const trueRes = document.querySelector(`#raTrue${i}`).checked;\n        const falseRes = document.querySelector(`#raFalse${i}`).checked;\n\n        if (trueRes) {\n          if (answer === \"true\") {\n            // Correct\n            results.push({\n              Answer: answer,\n              Given: \"true\",\n              Result: \"Correct\",\n              Type: \"boolean\",\n            });\n          } else {\n            // Incorrect\n            results.push({\n              Answer: answer,\n              Given: \"true\",\n              Result: \"Incorrect\",\n              Type: \"boolean\",\n            });\n          }\n        } else if (falseRes) {\n          if (answer === \"false\") {\n            // Correct\n            results.push({\n              Answer: answer,\n              Given: \"false\",\n              Result: \"Correct\",\n              Type: \"boolean\",\n            });\n          } else {\n            // Incorrect\n            results.push({\n              Answer: answer,\n              Given: \"false\",\n              Result: \"Incorrect\",\n              Type: \"boolean\",\n            });\n          }\n        }\n      }\n    });\n\n  \n\n    // Save results in DB\n    const rand1 = RandomString();\n    const rand2 = RandomString();\n    const quizID = `Quiz${rand1}${rand2}`;\n    results.forEach((result) => {\n      const rand3 = RandomString();\n      const rand4 = RandomString();\n      const resultID = `Result${rand3}${rand4}`;\n\n      students_Collection\n        .doc(studentAuthID)\n        .collection(\"Quizzes\")\n        .doc(quizID)\n        .collection(\"Results\")\n        .doc(resultID)\n        .set({\n          Answer: result.Answer,\n          Given: result.Given,\n          Result: result.Result,\n        })\n        .catch((err) => console.log(err));\n    });\n\n\n      // Calculate Results\n      dispatch(toggleStudentQuizResultsAction());\n      dispatch(storeStudentQuizResultsAction(results));\n  };\n\n  //   NAV\n  const navLesson = () => {\n    const nextOrder = quiz.Order + 1;\n\n    courses_Collection\n      .doc(course.id)\n      .collection(\"Lessons\")\n      .get()\n      .then((snapshot) => {\n        const lessonsList = firebaseLooper(snapshot);\n        lessonsList.forEach((less) => {\n          if (less.Order === nextOrder) {\n            dispatch(storeCurrentCourseComponentAction(less));\n            dispatch(storeStudentNextLessonAction(less));\n          }\n        });\n      })\n      .catch((err) => console.log(err));\n\n    //   Save progress to DB\n    const rand1 = RandomString();\n    const rand2 = RandomString();\n    const progID = `Prog${rand1}${rand2}`;\n\n    students_Collection\n      .doc(studentAuthID)\n      .collection(\"CourseProgress\")\n      .doc(progID)\n      .set({\n        CompName: quiz.Name,\n        CompType: \"Quiz\",\n        CourseName: course.Name,\n        Date: GetToday(),\n        Order: quiz.Order,\n      })\n      .catch((err) => console.log(err));\n\n    // Navigate to Lesson\n    history.push(\"/student-course-lesson\");\n  };\n\n  useEffect(() => {\n    if (!studentAuthID) {\n      history.push(\"/studentdash\");\n      return;\n    }\n  }, []);\n  return (\n    <div>\n      <div>\n        <h1>{quiz.Name}</h1>\n      </div>\n\n      <hr />\n      <div>{toggleQuizResults ? handleResults() : handleQuizComponents()}</div>\n\n      {/* Footer */}\n      <div>\n        <Footer />\n      </div>\n    </div>\n  );\n}\n",["518","519"],"/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Teachers/Milestones/MilestonesMain.js",["520"],"import React, { useEffect } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { useHistory } from \"react-router-dom\";\n\nimport TopBar from \"../Dash/TopBar\";\nimport DashFooter from \"../Dash/DashFooter\";\nimport { teachers_Collection } from \"../../../utils/firebase\";\nimport {\n  storeTeacherMilestonesGeneralInfoAction,\n  storeTeacherSingleMilestoneSegAction,\n  toggleNewSegmentFormAction,\n} from \"../../../redux/actions\";\nimport { firebaseLooper } from \"../../../utils/tools\";\nimport RandomString from \"../../RandomString\";\n\nexport default function MilestonesMain() {\n  const teacherAuthID = useSelector((state) => state.storeTeacherAuthIDReducer);\n  const history = useHistory();\n  const dispatch = useDispatch();\n\n  const toggleNewSegmentForm = useSelector(\n    (state) => state.toggleNewSegmentFormReducer\n  );\n\n  const milestones = useSelector(\n    (state) => state.storeTeacherMilestonesGeneralInfoReducer\n  );\n\n  // GET\n  const getAllMilestones = () => {\n    teachers_Collection\n      .doc(teacherAuthID)\n      .collection(\"Milestones\")\n      .get()\n      .then((snapshot) => {\n        const milestoneData = firebaseLooper(snapshot);\n        dispatch(storeTeacherMilestonesGeneralInfoAction(milestoneData));\n      })\n      .catch((err) => console.log(err));\n  };\n\n  // HANDLE\n  const handleMilestoneSegList = () => {\n    return milestones.map((mile, i) => {\n      return (\n        <div key={i}>\n          <h3>{mile.Name}</h3>\n          <button id={mile.id} onClick={navMilestoneView}>\n            View\n          </button>\n          <button onClick={navMilestoneAssign} id={mile.id}>\n            Assign\n          </button>\n        </div>\n      );\n    });\n  };\n  const handleNewSegmentForm = () => {\n    return (\n      <div>\n        <h3>Segment Name:</h3>\n        <p>\n          The Segment Name is the title that describes what kind of tasks the\n          student will need to complete.\n        </p>\n        <input id=\"tbSegName\" type=\"text\" placeholder=\"Segment Name\" />\n        <button onClick={createSeg}>Create</button>\n        <hr />\n      </div>\n    );\n  };\n\n  // POST\n  const createSeg = () => {\n    const rand1 = RandomString();\n    const rand2 = RandomString();\n    const segID = `Seg${rand1}${rand2}`;\n\n    const segName = document.querySelector(\"#tbSegName\").value;\n\n    // Save to DB\n    teachers_Collection\n      .doc(teacherAuthID)\n      .collection(\"Milestones\")\n      .doc(segID)\n      .set({\n        AssigedTo: [],\n        Name: segName,\n      })\n      .catch((err) => console.log(err));\n\n    // Dispatch\n    const tempObj = {\n      id: segID,\n      AssigedTo: [],\n      Name: segName,\n      Tasks: [],\n    };\n\n    dispatch(storeTeacherSingleMilestoneSegAction(tempObj));\n    history.push(\"/teacher-milestone-view\");\n  };\n\n  // NAV\n  const navMilestoneView = (event) => {\n    const mileID = event.target.getAttribute(\"id\");\n\n    milestones.forEach((mile) => {\n      if (mile.id === mileID) {\n        teachers_Collection\n          .doc(teacherAuthID)\n          .collection(\"Milestones\")\n          .doc(mileID)\n          .collection(\"MilestoneTasks\")\n          .get()\n          .then((snapshot) => {\n            const tasks = firebaseLooper(snapshot);\n            const tempObj = {\n              ...mile,\n              Tasks: tasks,\n            };\n            dispatch(storeTeacherSingleMilestoneSegAction(tempObj));\n          })\n          .catch((err) => console.log(err));\n\n        history.push(\"/teacher-milestone-view\");\n      }\n    });\n  };\n  const navMilestoneAssign = (event) => {\n    const mileID = event.target.getAttribute(\"id\");\n\n    milestones.forEach((mile) => {\n      if (mile.id === mileID) {\n        teachers_Collection\n          .doc(teacherAuthID)\n          .collection(\"Milestones\")\n          .doc(mileID)\n          .collection(\"MilestoneTasks\")\n          .get()\n          .then((snapshot) => {\n            const tasks = firebaseLooper(snapshot);\n            const tempObj = {\n              ...mile,\n              Tasks: tasks,\n            };\n            dispatch(storeTeacherSingleMilestoneSegAction(tempObj));\n          })\n          .catch((err) => console.log(err));\n      }\n    });\n\n    history.push(\"/teacher-milestone-assign\");\n  };\n\n  useEffect(() => {\n    if (!teacherAuthID) {\n      history.push(\"/teacherdash\");\n      return;\n    }\n\n    getAllMilestones();\n  }, []);\n  return (\n    <div>\n      {/* Top Bar */}\n      <div>\n        <TopBar />\n      </div>\n\n      <div className=\"content\">\n        <div>\n          <h1>Milestones</h1>\n          <button onClick={() => dispatch(toggleNewSegmentFormAction())}>\n            {toggleNewSegmentForm ? \"Close\" : \"Create Milestone Segment\"}\n          </button>\n          {toggleNewSegmentForm ? handleNewSegmentForm() : null}\n        </div>\n        <div>{handleMilestoneSegList()}</div>\n      </div>\n\n      {/* Footer */}\n      <div>\n        <DashFooter />\n      </div>\n    </div>\n  );\n}\n",["521","522"],"/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Teachers/FileManager/FileManagerMain.js",[],["523","524"],"/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Teachers/Invoices/InvoicesMain.js",["525"],"import React, { useEffect } from \"react\";\n\nimport TopBar from \"../Dash/TopBar\";\nimport InvoiceBlock from \"./InvoiceBlock\";\nimport DashFooter from \"../Dash/DashFooter\";\n\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { useHistory } from \"react-router-dom\";\nimport {storeSingleInvoiceAction} from '../../../redux/actions';\n\n\nexport default function InvoicesMain() {\n  const teacherAuthID = useSelector((state) => state.storeTeacherAuthIDReducer);\n  const history = useHistory();\n  const dispatch = useDispatch()\n\n  const invoiceState = useSelector(\n    (state) => state.storeTeacherInvoicesGeneralInfoReducer\n  );\n\n  const viewSingleInvoice = (event) => {\n    const invoiceNo = event.target.getAttribute('id');\n    invoiceState.forEach(inv => {\n      if (inv.No === invoiceNo) {\n        dispatch(storeSingleInvoiceAction(inv));\n        history.push('/teacher-invoice-view');\n        return;\n      }\n    })\n  }\n\n  useEffect(() => {\n    if (!teacherAuthID) {\n      history.push(\"/teacherdash\");\n      return;\n    }\n  }, []);\n  return (\n    <div>\n      {/* Top Bar */}\n      <div>\n        <TopBar />\n      </div>\n\n      {/* Content */}\n      <div>\n        <div>\n          <input id=\"tbInvoiceSearch\" type=\"text\" placeholder=\"Search\" />\n          <button>Create New Invoice</button>\n        </div>\n\n        <div>\n          {invoiceState.map((inv, i) => {\n            return (\n              <div>\n                <InvoiceBlock\n                  key={i}\n                  no={inv.No}\n                  status={inv.Status}\n                  balance={inv.Balance}\n                  name={inv.Name}\n                  created={inv.Created}\n                  due={inv.Due}\n                />\n                <button id={inv.No} onClick={viewSingleInvoice}>View</button>\n              </div>\n            );\n          })}\n        </div>\n      </div>\n\n      {/* Footer */}\n      <div>\n        <DashFooter />\n      </div>\n    </div>\n  );\n}\n","/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Teachers/Support/SupportMain.js",[],["526","527"],"/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Footer.js",[],"/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Plans/PlanPanel.js",[],["528","529"],"/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/InputDateFormatter.js",[],["530","531"],"/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Courses/CoursesCard.js",[],"/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Teachers/Profile/ProfileReviewsView.js",["532"],"import React, { useEffect } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { useHistory } from \"react-router-dom\";\nimport { teachers_Collection, users_Collection } from \"../../../utils/firebase\";\nimport { firebaseLooper } from \"../../../utils/tools\";\nimport { storeReviewListAction } from \"../../../redux/actions\";\n\nexport default function ProfileReviewsView() {\n  const teacherAuthID = useSelector((state) => state.storeTeacherAuthIDReducer);\n  const history = useHistory();\n  const dispatch = useDispatch();\n\n  const reviews = useSelector((state) => state.storeReviewListReducer);\n\n  const getAllReviews = () => {\n    let newReviewArray = [];\n    const reviews_Collection = teachers_Collection\n      .doc(teacherAuthID)\n      .collection(\"Profile\")\n      .doc(\"Reviews\")\n      .collection(\"ReviewBlocks\");\n    reviews_Collection\n      .get()\n      .then((snapshot) => {\n        const data = firebaseLooper(snapshot);\n\n        data.forEach((d) => {\n          let fullName = \"\";\n\n          users_Collection\n            .where(\"AuthID\", \"==\", d.Reviewer)\n            .get()\n            .then((snapshot) => {\n              const userData = firebaseLooper(snapshot);\n              fullName = `${userData[0].FirstName} ${userData[0].LastName}`;\n              d = {\n                ...d,\n                FullName: fullName,\n              };\n              newReviewArray.push(d);\n            })\n            .catch((err) => console.log(err));\n        });\n        dispatch(storeReviewListAction(newReviewArray));\n      })\n      .catch((err) => console.log(err));\n  };\n\n  // HANDLE\n  const handleReviewList = () => {\n    return reviews.map((rev, i) => {\n      return (\n        <div key={i}>\n          <h3>{rev.Rating}</h3>\n          <p>{rev.FullName}</p>\n          <p>{rev.Review}</p>\n          <p>{rev.Date.toDate().toString().substr(4, 11)}</p>\n          <hr />\n        </div>\n      );\n    });\n  };\n  const handleCurrPage = () => {\n    let feedBtn = document.querySelector(\"#link-feed\");\n    feedBtn.classList.remove(\"navy-back\");\n\n    let aboutBtn = document.querySelector(\"#link-about\");\n    aboutBtn.classList.remove(\"navy-back\");\n\n    let awardsBtn = document.querySelector(\"#link-awards\");\n    awardsBtn.classList.remove(\"navy-back\");\n\n    let galleryBtn = document.querySelector(\"#link-gallery\");\n    galleryBtn.classList.remove(\"navy-back\");\n\n    let reviewsBtn = document.querySelector(\"#link-reviews\");\n    reviewsBtn.classList.add(\"navy-back\");\n  };\n\n  useEffect(() => {\n    if (!teacherAuthID) {\n      history.push(\"/teacherdash\");\n      return;\n    }\n    getAllReviews();\n    handleCurrPage();\n  }, []);\n  return (\n    <div>\n      {/* Overall Rating */}\n      <div></div>\n\n      {/* Review List */}\n      <div>{handleReviewList()}</div>\n    </div>\n  );\n}\n","/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Teachers/Profile/ProfileFeedCreate.js",["533"],"import React, { useEffect } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { useHistory } from \"react-router-dom\";\nimport { storeProfileFeedPostDataAction } from \"../../../redux/actions\";\nimport { teachers_Collection } from \"../../../utils/firebase\";\nimport GetToday from \"../../GetToday\";\n\nimport \"./Profile.css\";\n\nexport default function ProfileFeedCreate() {\n  const teacherAuthID = useSelector((state) => state.storeTeacherAuthIDReducer);\n  const history = useHistory();\n  const dispatch = useDispatch();\n\n  const allPostsState = useSelector(\n    (state) => state.storeProfileFeedPostDataReducer\n  );\n\n  // POST\n  const savePost = () => {\n    const postText = document.querySelector(\"#tbPostText\").value;\n    let rand1 = Math.random().toString(36).substring(3);\n    let rand2 = Math.random().toString(36).substring(3);\n    const postID = `Post${rand1}${rand2}`;\n    const commentID = `Comment${rand1}${rand2}`;\n\n    teachers_Collection\n      .doc(teacherAuthID)\n      .collection(\"Profile\")\n      .doc(\"Feed\")\n      .collection(\"Posts\")\n      .doc(postID)\n      .set({\n        Date: GetToday(),\n        Text: postText,\n        Likes: 0,\n      })\n      .catch((err) => console.log(err));\n\n    teachers_Collection\n      .doc(teacherAuthID)\n      .collection(\"Profile\")\n      .doc(\"Feed\")\n      .collection(\"Posts\")\n      .doc(postID)\n      .collection(\"Comments\")\n      .doc(commentID)\n      .set({\n        Date: GetToday(),\n        Text: \"\",\n        Commenter: \"\",\n      })\n      .catch((err) => console.log(err));\n\n    //   Dispatch\n    const allPosts = [...allPostsState];\n\n    allPosts.push({\n      Text: postText,\n      Date: GetToday(),\n      Likes: 0,\n      commentData: [],\n    });\n\n    console.log(allPosts);\n\n    dispatch(storeProfileFeedPostDataAction(allPosts));\n\n    history.push(\"/teacher-profile/feed\");\n  };\n\n  // HANDLE\n  const handleCurrPage = () => {\n    let feedBtn = document.querySelector(\"#link-feed\");\n    feedBtn.classList.add(\"navy-back\");\n\n    let aboutBtn = document.querySelector(\"#link-about\");\n    aboutBtn.classList.remove(\"navy-back\");\n\n    let awardsBtn = document.querySelector(\"#link-awards\");\n    awardsBtn.classList.remove(\"navy-back\");\n\n    let galleryBtn = document.querySelector(\"#link-gallery\");\n    galleryBtn.classList.remove(\"navy-back\");\n\n    let reviewsBtn = document.querySelector(\"#link-reviews\");\n    reviewsBtn.classList.remove(\"navy-back\");\n  };\n\n  useEffect(() => {\n    if (!teacherAuthID) {\n      history.push(\"/teacherdash\");\n      return;\n    }\n\n    handleCurrPage();\n  }, []);\n  return (\n    <div className=\"post-form-wrapper\">\n      <button\n        className=\"btn-back maroon-back\"\n        onClick={() => history.push(\"/teacher-profile/feed\")}\n      >\n        Back\n      </button>\n      <div className=\"post-create\">\n        <h1 className=\"post-create-head\">Create a Post</h1>\n\n        <textarea\n          className=\"ta\"\n          id=\"tbPostText\"\n          placeholder=\"Enter post here...\"\n        ></textarea>\n        <div className=\"btn-wrapper\">\n          <button className=\"btn-dark btn-post\" onClick={savePost}>\n            Post\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n}\n",["534","535"],"/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Teachers/Statistics/GroupStats.js",["536"],"import React, { useEffect } from \"react\";\n\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useHistory } from \"react-router-dom\";\n\nimport { statisticsObjectAction } from \"../../../redux/actions\";\n\nexport default function GroupStats() {\n  const history = useHistory();\n  const dispatch = useDispatch();\n\n  const teacherAuthID = useSelector((state) => state.storeTeacherAuthIDReducer);\n  const storageState = useSelector(\n    (state) => state.storeTeacherStatisticsGeneralInfoReducer\n  );\n  const storageObj = useSelector((state) => state.statisticsObjectReducer);\n\n  const getStorageObj = () => {\n    storageState.forEach((obj) => {\n      if (obj.id === \"GroupStats\") {\n        dispatch(statisticsObjectAction(obj));\n      }\n    });\n  };\n\n  useEffect(() => {\n    if (!teacherAuthID) {\n      history.push(\"/teacherdash\");\n    }\n    getStorageObj();\n  }, []);\n  return (\n    <div>\n      <h1>Group Stats</h1>\n      <hr/>\n      <p># of Groups: {storageObj.Num}</p>\n    </div>\n  );\n}\n",["537","538"],"/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Students/Profile/ProfileAwardsView.js",["539","540"],"import React, { useEffect } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { useHistory } from \"react-router-dom\";\nimport { students_Collection } from \"../../../utils/firebase\";\nimport {\n  storeStudentAwardsAction,\n  storeStudentCertsAction,\n} from \"../../../redux/actions\";\nimport { firebaseLooper } from \"../../../utils/tools\";\n\nexport default function ProfileAwardView() {\n  const studentAuthID = useSelector((state) => state.storeStudentAuthIDReducer);\n  const user = useSelector((state) => state.storeStudentUserDataReducer);\n  const history = useHistory();\n  const dispatch = useDispatch();\n\n  // States\n  const awards = useSelector((state) => state.storeStudentAwardsReducer);\n  const certs = useSelector((state) => state.storeStudentCertsReducer);\n\n  // GET\n  const getAllAwards = () => {\n    students_Collection\n      .doc(studentAuthID)\n      .collection(\"Profile\")\n      .doc(\"Awards\")\n      .collection(\"AwardBlocks\")\n      .get()\n      .then((snapshot) => {\n        const awardData = firebaseLooper(snapshot);\n        dispatch(storeStudentAwardsAction(awardData));\n      })\n      .catch((err) => console.log(err));\n  };\n  const getAllCerts = () => {\n    students_Collection\n      .doc(studentAuthID)\n      .collection(\"Profile\")\n      .doc(\"Awards\")\n      .collection(\"CertBlocks\")\n      .get()\n      .then((snapshot) => {\n        const certData = firebaseLooper(snapshot);\n        dispatch(storeStudentCertsAction(certData));\n      })\n      .catch((err) => console.log(err));\n  };\n\n  // HANDLE\n  const handleAwards = () => {\n    return awards.map((awd, i) => {\n      return (\n        <div key={i}>\n          <h3>{awd.Name}</h3>\n          <h4>{awd.Institution}</h4>\n          <p>{awd.Desc}</p>\n          <p>\n            Awarded:{\" \"}\n            {awd.Date ? awd.Date.toDate().toString().substr(4, 11) : null}\n          </p>\n          <hr />\n        </div>\n      );\n    });\n  };\n  const handleCerts = () => {\n    return certs.map((cert, i) => {\n      return (\n        <div key={i}>\n          <h3>{cert.Name}</h3>\n          <h4>{cert.Institution}</h4>\n          <p>{cert.Desc}</p>\n          <p>\n            {cert.Date ? cert.Date.toDate().toString().substr(4, 11) : null}\n          </p>\n          <hr />\n        </div>\n      );\n    });\n  };\n\n  useEffect(() => {\n    if (!studentAuthID) {\n      history.push(\"/studentdash\");\n      return;\n    }\n\n    getAllAwards();\n    getAllCerts();\n  }, []);\n  return (\n    <div>\n      <button onClick={() => history.push(\"/student-profile/awards-edit\")}>\n        Edit\n      </button>\n      {/* Awards */}\n      <div>\n        <h2>Awards</h2>\n        <div>{handleAwards()}</div>\n      </div>\n\n      {/* Certs */}\n      <div>\n        <h2>Certifications</h2>\n        <div>{handleCerts()}</div>\n      </div>\n    </div>\n  );\n}\n",["541","542"],"/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Students/Profile/ProfileFeedView.js",["543"],"import React, { useEffect } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { useHistory } from \"react-router-dom\";\nimport { students_Collection } from \"../../../utils/firebase\";\nimport {\n  storeStudentProfileFeedPostsAction,\n  storeStudentProfileFeedPostAction,\n} from \"../../../redux/actions\";\nimport { firebaseLooper } from \"../../../utils/tools\";\n\nimport GetToday from \"../../GetToday\";\nimport RandomString from \"../../RandomString\";\n\nexport default function ProfileFeedView() {\n  const studentAuthID = useSelector((state) => state.storeStudentAuthIDReducer);\n  const user = useSelector((state) => state.storeStudentUserDataReducer);\n  const history = useHistory();\n  const dispatch = useDispatch();\n\n  // States\n  const posts = useSelector(\n    (state) => state.storeStudentProfileFeedPostsReducer\n  );\n\n  // GET\n  const getAllFeedPosts = () => {\n    students_Collection\n      .doc(studentAuthID)\n      .collection(\"Profile\")\n      .doc(\"Feed\")\n      .collection(\"Posts\")\n      .get()\n      .then((snapshot) => {\n        const postData = firebaseLooper(snapshot);\n        dispatch(storeStudentProfileFeedPostsAction(postData));\n      })\n      .catch((err) => console.log(err));\n  };\n\n  // HANDLE\n  const handleAllFeedPosts = () => {\n    return posts.map((post, i) => {\n      return (\n        <div key={i}>\n          <h3>\n            {user.FirstName} {user.LastName}\n          </h3>\n          <p>{post.Text}</p>\n          <p>{post.Date.toDate().toString().substr(4, 11)}</p>\n          <button>Like</button>\n          <button id={post.id} onClick={onPostEdit}>\n            Edit\n          </button>\n          <button id={post.id} onClick={removePost}>\n            Remove\n          </button>\n        </div>\n      );\n    });\n  };\n  const handleNewPost = () => {\n    return (\n      <div>\n        <h3>Create New Post</h3>\n        <textarea id=\"taNewPost\" placeholder=\"Type Post Here...\"></textarea>\n        <button onClick={newPost}>Post</button>\n      </div>\n    );\n  };\n\n  // POST\n  const newPost = () => {\n    const postText = document.querySelector(\"#taNewPost\").value;\n    const today = GetToday();\n    // Save to DB\n    const rand1 = RandomString();\n    const rand2 = RandomString();\n    const postID = `Post${rand1}${rand2}`;\n    const commentID = `Comment${rand1}${rand2}`;\n\n    students_Collection\n      .doc(studentAuthID)\n      .collection(\"Profile\")\n      .doc(\"Feed\")\n      .collection(\"Posts\")\n      .doc(postID)\n      .set({\n        Text: postText,\n        Date: today,\n        Likes: 0,\n      })\n      .catch((err) => console.log(err));\n\n    students_Collection\n      .doc(studentAuthID)\n      .collection(\"Profile\")\n      .doc(\"Feed\")\n      .collection(\"Posts\")\n      .doc(postID)\n      .collection(\"Comments\")\n      .doc(commentID)\n      .set({\n        Text: \"\",\n        Date: today,\n        Commentor: \"\",\n      })\n      .catch((err) => console.log(err));\n\n    // Dispatch\n    const allPosts = [...posts];\n    allPosts.push({\n      id: postID,\n      Text: postText,\n      Date: today,\n      Likes: 0,\n    });\n\n    dispatch(storeStudentProfileFeedPostsAction(allPosts));\n\n    // Empty ta\n    document.querySelector(\"#taNewPost\").value = \"\";\n  };\n\n  // REMOVE\n  const removePost = (event) => {\n    const postID = event.target.getAttribute(\"id\");\n\n    // Remove from DB\n    students_Collection\n      .doc(studentAuthID)\n      .collection(\"Profile\")\n      .doc(\"Feed\")\n      .collection(\"Posts\")\n      .doc(postID)\n      .delete()\n      .catch((err) => console.log(err));\n\n    // Dispatch\n    const allPosts = [...posts];\n    const filtered = allPosts.filter((post) => post.id !== postID);\n    dispatch(storeStudentProfileFeedPostsAction(filtered));\n  };\n\n  // ON CLICK\n  const onPostEdit = (event) => {\n    const postID = event.target.getAttribute(\"id\");\n\n    posts.forEach((post) => {\n      if (post.id === postID) {\n        dispatch(storeStudentProfileFeedPostAction(post));\n      }\n    });\n\n    history.push(\"/student-profile/feed-edit\");\n  };\n\n  useEffect(() => {\n    if (!studentAuthID) {\n      history.push(\"/studentdash\");\n      return;\n    }\n\n    getAllFeedPosts();\n  }, []);\n  return (\n    <div>\n      <hr />\n      {/* Create Post */}\n      <div>{handleNewPost()}</div>\n\n      <hr />\n      {/* Feed */}\n      <div>{handleAllFeedPosts()}</div>\n    </div>\n  );\n}\n",["544","545"],"/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Teachers/Forums/ForumSinglePostBlock.js",[],"/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Teachers/Students/StudentOverview.js",["546","547"],"/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Courses.js",[],"/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Students/Messages/StudentMessagesMain.js",["548","549"],"/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Teachers/Students/StudentsMain.js",["550","551"],"import React, { useEffect } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { useHistory } from \"react-router-dom\";\n\nimport \"./Students.css\";\n\nimport TopBar from \"../Dash/TopBar\";\nimport DashFooter from \"../Dash/DashFooter\";\nimport RandomString from \"../../RandomString\";\nimport GetToday from \"../../GetToday\";\nimport {\n  students_Collection,\n  teachers_Collection,\n  studentReqQueue_Collection,\n} from \"../../../utils/firebase\";\nimport { firebaseLooper } from \"../../../utils/tools\";\nimport {\n  storeTeacherStudentGeneralInfoAction,\n  storeTeacherSingleStudentAction,\n  storeTeacherQueueRequestsAction,\n  storeTeacherExistingStudentsAction,\n  toggleTeacherAddStudentFormAction,\n  storeTeacherAddStudentSearchResultAction,\n} from \"../../../redux/actions\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport {\n  faSearch,\n  faTimes,\n  faTimesCircle,\n} from \"@fortawesome/free-solid-svg-icons\";\n\nexport default function StudentsMain() {\n  const user = useSelector((state) => state.userDataReducer);\n  const teacherAuthID = useSelector((state) => state.storeTeacherAuthIDReducer);\n  const history = useHistory();\n  const dispatch = useDispatch();\n\n  // TOGGLE\n  const toggleAddStudentForm = useSelector(\n    (state) => state.toggleTeacherAddStudentFormReducer\n  );\n\n  const students = useSelector(\n    (state) => state.storeTeacherStudentGeneralInfoReducer\n  );\n\n  const existingStuds = useSelector(\n    (state) => state.storeTeacherExistingStudentsReducer\n  );\n  const queueRequests = useSelector(\n    (state) => state.storeTeacherQueueRequestsReducer\n  );\n  const searchRes = useSelector(\n    (state) => state.storeTeacherAddStudentSearchResultReducer\n  );\n\n  // GET\n  const getAllStudents = () => {\n    teachers_Collection\n      .doc(teacherAuthID)\n      .collection(\"Students\")\n      .get()\n      .then((snapshot) => {\n        const studentList = firebaseLooper(snapshot);\n        dispatch(storeTeacherStudentGeneralInfoAction(studentList));\n      })\n      .catch((err) => console.log(err));\n  };\n  const checkForExistingStudents = () => {\n    teachers_Collection\n      .doc(teacherAuthID)\n      .collection(\"Students\")\n      .get()\n      .then((snapshot) => {\n        const studentData = firebaseLooper(snapshot);\n        const studentArr = [];\n        studentData.forEach((stud) => {\n          studentArr.push(stud.id);\n        });\n        dispatch(storeTeacherExistingStudentsAction(studentArr));\n\n        studentReqQueue_Collection\n          .get()\n          .then((snapshot) => {\n            const queueData = firebaseLooper(snapshot);\n            const queueArr = [];\n            queueData.forEach((que) => {\n              queueArr.push(que.StudentID);\n            });\n\n            dispatch(storeTeacherQueueRequestsAction(queueArr));\n          })\n          .catch((err) => console.log(err));\n      })\n      .catch((err) => console.log(err));\n  };\n\n  // HANDLE\n  const handleStudentList = () => {\n    return students.map((stud, i) => {\n      return (\n        <div className=\"studListBlock\" key={i}>\n          <h3 className=\"studListComp studName\">\n            {stud.FirstName} {stud.LastName}\n          </h3>\n          <p className=\"studListComp studID\">{stud.id}</p>\n          <p className=\"studListComp studEmail\">{stud.Email}</p>\n          <div className=\"rightSide\" style={{ display: \"flex\" }}>\n            <button\n              className=\"btnStudList btnStudOver\"\n              onClick={navStudentOverview}\n              id={stud.id}\n            >\n              Overview\n            </button>\n            <button className=\"btnStudList btnStudRemove\">\n              <FontAwesomeIcon icon={faTimesCircle} />\n            </button>\n          </div>\n        </div>\n      );\n    });\n  };\n  const handleAddStudentForm = () => {\n    return (\n      <div className=\"addStudForm\">\n        <p className=\"addStudDesc\">Search using student username.</p>\n        <div className=\"flex\">\n          <input id=\"tbStudSearch\" type=\"text\" placeholder=\"Search\" />\n          <button className=\"btnAddStudForm\" onClick={onAddStudentClick}>\n            <FontAwesomeIcon icon={faSearch} />\n          </button>\n        </div>\n        <div>\n          {/* Student search thing */}\n          {searchRes ? handleSearchResult() : null}\n        </div>\n      </div>\n    );\n  };\n  const handleSearchResult = () => {\n    return (\n      <div className=\"searchResWrapper\">\n        <p className=\"reqBox\">\n          {searchRes.FirstName} {searchRes.LastName}\n        </p>\n        <p className=\"reqBox\">{searchRes.StudentID}</p>\n        {searchRes.StudentID !== \"\" ? (\n          <button className=\"btnSendReq\" onClick={sendRequest}>\n            Send Request\n          </button>\n        ) : null}\n      </div>\n    );\n  };\n\n  // CLICK\n  const onAddStudentClick = () => {\n    const studRes = document.querySelector(\"#tbStudSearch\").value;\n    const allExistingStuds = existingStuds.concat(queueRequests);\n\n    if (allExistingStuds.includes(studRes)) {\n      // Exists\n      const student = {\n        FirstName: \"Student is not available for request.\",\n        LastName: \"\",\n        StudentID: \"\",\n      };\n      dispatch(storeTeacherAddStudentSearchResultAction(student));\n    } else {\n      // Does not exist\n\n      // Search for student in DB\n      students_Collection\n        .get()\n        .then((snapshot) => {\n          const studentList = firebaseLooper(snapshot);\n          studentList.forEach((stud) => {\n            if (studRes === stud.id) {\n              dispatch(storeTeacherAddStudentSearchResultAction(stud));\n            }\n          });\n          if (!searchRes) {\n            const student = {\n              FirstName: \"Student ID does not exist\",\n              LastName: \"\",\n              StudentID: \"\",\n            };\n            dispatch(storeTeacherAddStudentSearchResultAction(student));\n          }\n        })\n        .catch((err) => console.log(err));\n    }\n  };\n  const sendRequest = () => {\n    // Send Request here\n    const rand1 = RandomString();\n    const rand2 = RandomString();\n\n    const reqID = `Req${rand1}${rand2}`;\n    const notifID = `Notif${rand1}${rand2}`;\n\n    studentReqQueue_Collection\n      .doc(reqID)\n      .set({\n        StudentID: searchRes.StudentID,\n        TeacherID: teacherAuthID,\n        TFirstName: user.FirstName,\n        TLastName: user.LastName,\n      })\n      .catch((err) => console.log(err));\n\n    students_Collection\n      .doc(searchRes.StudentID)\n      .collection(\"Notifications\")\n      .doc(notifID)\n      .set({\n        Action: \"request\",\n        Date: GetToday(),\n        Icon: \"faUser\",\n        Text: `You have received a request from ${user.FirstName} ${user.LastName}.`,\n      })\n      .catch((err) => console.log(err));\n\n    document.querySelector(\"#tbStudSearch\").value = \"\";\n\n    const student = {\n      FirstName: \"Request has been sent.\",\n      LastName: \"\",\n      StudentID: \"\",\n    };\n    dispatch(storeTeacherAddStudentSearchResultAction(student));\n\n    // Dispatch\n    const allReqs = [...queueRequests];\n    allReqs.push({\n      StudentID: searchRes.StudentID,\n      TeacherID: teacherAuthID,\n      TFirstName: user.FirstName,\n      TLastName: user.LastName,\n    });\n    dispatch(storeTeacherQueueRequestsAction(allReqs));\n  };\n\n  // NAV\n  const navStudentOverview = (event) => {\n    const studID = event.target.getAttribute(\"id\");\n\n    students.forEach((stud) => {\n      if (stud.id === studID) {\n        students_Collection\n          .where(\"StudentID\", \"==\", stud.id)\n          .get()\n          .then((snapshot) => {\n            const student = firebaseLooper(snapshot);\n            student.forEach((s) => {\n              dispatch(storeTeacherSingleStudentAction(s));\n            });\n          })\n          .catch((err) => console.log(err));\n      }\n    });\n\n    history.push(\"/teacher-student-overview\");\n  };\n\n  useEffect(() => {\n    if (!teacherAuthID) {\n      history.push(\"/teacherdash\");\n      return;\n    }\n\n    getAllStudents();\n    checkForExistingStudents();\n  }, []);\n  return (\n    <div>\n      {/* Top Bar */}\n      <div>\n        <TopBar />\n      </div>\n\n      {/* Content */}\n      <div className=\"content\">\n        <div>\n          <h1>Students</h1>\n          <button\n            className=\"btnAddStud\"\n            onClick={() => dispatch(toggleTeacherAddStudentFormAction())}\n          >\n            {toggleAddStudentForm ? \"Close\" : \"Add New Student\"}\n          </button>\n          {toggleAddStudentForm ? handleAddStudentForm() : null}\n        </div>\n\n        {/* Student List */}\n        <div className=\"studListWrapper\">{handleStudentList()}</div>\n      </div>\n\n      {/* Footer */}\n      <div>\n        <DashFooter />\n      </div>\n    </div>\n  );\n}\n","/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Teachers/Milestones/MilestoneEdit.js",["552"],"import React, { useEffect } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { useHistory } from \"react-router-dom\";\nimport TopBar from \"../Dash/TopBar\";\nimport DashFooter from \"../Dash/DashFooter\";\nimport { storeTeacherSingleMilestoneSegAction } from \"../../../redux/actions\";\nimport { teachers_Collection } from \"../../../utils/firebase\";\n\nexport default function MilestoneEdit() {\n  const teacherAuthID = useSelector((state) => state.storeTeacherAuthIDReducer);\n  const history = useHistory();\n  const dispatch = useDispatch();\n\n  const milestone = useSelector(\n    (state) => state.storeTeacherSingleMilestoneSegReducer\n  );\n\n  //   HANDLE\n  const handleTaskEdit = () => {\n    if (milestone.Tasks) {\n      return milestone.Tasks.map((task, i) => {\n        return (\n          <div key={i}>\n            <h3>Task:</h3>\n            <input id={`tbTask${i}`} type-=\"text\" defaultValue={task.Task} />\n\n            <h3>Description:</h3>\n            <textarea id={`taDesc${i}`} defaultValue={task.Desc}></textarea>\n            <hr />\n          </div>\n        );\n      });\n    }\n  };\n\n  //   POST\n  const saveAllChanges = () => {\n    const allTasks = [];\n\n    if (milestone.Tasks) {\n      for (let i = 0; i < milestone.Tasks.length; i = i + 1) {\n        const task = document.querySelector(`#tbTask${i}`).value;\n        const desc = document.querySelector(`#taDesc${i}`).value;\n\n        const tempObj = {\n          id: milestone.Tasks[i].id,\n          Task: task,\n          Desc: desc,\n          SegmentName: milestone.id,\n        };\n\n        allTasks.push(tempObj);\n\n        // Save to DB\n        teachers_Collection\n          .doc(teacherAuthID)\n          .collection(\"Milestones\")\n          .doc(milestone.id)\n          .collection(\"MilestoneTasks\")\n          .doc(milestone.Tasks[i].id)\n          .update({\n            Task: task,\n            Desc: desc,\n          })\n          .catch((err) => console.log(err));\n      }\n    }\n\n    const tempObj = {\n      ...milestone,\n      Tasks: allTasks,\n    };\n\n    dispatch(storeTeacherSingleMilestoneSegAction(tempObj));\n    history.push(\"/teacher-milestone-view\");\n  };\n\n  useEffect(() => {\n    if (!teacherAuthID) {\n      history.push(\"/teacherdash\");\n      return;\n    }\n  }, []);\n  return (\n    <div>\n      {/* Top Bar */}\n      <div>\n        <TopBar />\n      </div>\n\n      {/* Content */}\n      <div className=\"content\">\n        <h1> Edit Milestone Tasks</h1>\n\n        <div>{handleTaskEdit()}</div>\n        <button onClick={saveAllChanges} className=\"btn-navy\">\n          Save All Changes\n        </button>\n      </div>\n\n      {/* Footer */}\n      <div>\n        <DashFooter />\n      </div>\n    </div>\n  );\n}\n","/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Teachers/Events/EventEdit.js",["553","554"],"import React, { useEffect } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { useHistory } from \"react-router-dom\";\n\nimport TopBar from \"../Dash/TopBar\";\nimport DashFooter from \"../Dash/DashFooter\";\nimport InputDateFormatter from \"../../InputDateFormatter\";\nimport FirebaseDate from \"../../FirebaseDate\";\nimport { teachers_Collection } from \"../../../utils/firebase\";\nimport {\n  storeSingleMonthEventAction,\n  storeTeacherEventsGeneralInfoAction,\n  toggleAddEventInviteeAction,\n  toggleAssigneeFormAction,\n} from \"../../../redux/actions\";\n\nexport default function EventEdit() {\n  const teacherAuthID = useSelector((state) => state.storeTeacherAuthIDReducer);\n  const history = useHistory();\n  const dispatch = useDispatch();\n\n  const toggleAddInviteeForm = useSelector(\n    (state) => state.toggleAddEventInviteeReducer\n  );\n  const events = useSelector(\n    (state) => state.storeTeacherEventsGeneralInfoReducer\n  );\n  const eve = useSelector((state) => state.storeSingleMonthEventReducer);\n\n  // HANDLE\n  const handleEventEdit = () => {\n    return (\n      <div>\n        <h3>Name: </h3>\n        <input id=\"tbName\" type=\"text\" defaultValue={eve.Name} />\n\n        <h3>Desc: </h3>\n        <textarea id=\"taDesc\" defaultValue={eve.Desc}></textarea>\n\n        <h3>Color: </h3>\n        <input id=\"tbColor\" type=\"text\" defaultValue={eve.Color} />\n\n        <h3>Start: </h3>\n        <input\n          id=\"daStart\"\n          type=\"date\"\n          defaultValue={eve.Start ? InputDateFormatter(eve.Start) : null}\n        />\n\n        <h3>End: </h3>\n        <input\n          id=\"daEnd\"\n          type=\"date\"\n          defaultValue={eve.End ? InputDateFormatter(eve.End) : null}\n        />\n\n        <h3>Invitees:</h3>\n        {eve.Invitees\n          ? eve.Invitees.map((ei, i) => {\n              return (\n                <div>\n                  <input\n                    key={i}\n                    id={`tbinvitee${i}`}\n                    type=\"text\"\n                    defaultValue={ei}\n                  />{\" \"}\n                  <button id={ei} onClick={removeInvitee}>\n                    -\n                  </button>\n                </div>\n              );\n            })\n          : null}\n        {toggleAddInviteeForm ? (\n          <div>\n            <p>Enter Invitee Username:</p>\n            <input id=\"tbAddInvitee\" type=\"text\" placeholder=\"Username\" />\n            <button onClick={addInvitee}>Add</button>\n          </div>\n        ) : null}\n\n        <button onClick={() => dispatch(toggleAddEventInviteeAction())}>\n          +\n        </button>\n      </div>\n    );\n  };\n\n  // POST\n  const saveAllChanges = () => {\n    const name = document.querySelector(\"#tbName\").value;\n    const desc = document.querySelector(\"#taDesc\").value;\n    const color = document.querySelector(\"#tbColor\").value;\n    const start = FirebaseDate(document.querySelector(\"#daStart\").value);\n    const end = FirebaseDate(document.querySelector(\"#daEnd\").value);\n    const invitees = [...eve.Invitees];\n\n    // Save to DB\n    teachers_Collection\n      .doc(teacherAuthID)\n      .collection(\"Events\")\n      .doc(eve.id)\n      .update({\n        Name: name,\n        Desc: desc,\n        Color: color,\n        Start: start,\n        End: end,\n        Invitees: invitees,\n      });\n\n    // Dispatch\n    const tempObj = {\n      id: eve.id,\n      Name: name,\n      Desc: desc,\n      Color: color,\n      Start: start,\n      End: end,\n      Invitees: invitees,\n    };\n\n    dispatch(storeSingleMonthEventAction(tempObj));\n\n    const allEvents = [...events];\n\n    const filtered = allEvents.filter((ev) => ev.id !== eve.id);\n    filtered.push(tempObj);\n    filtered.sort((a, b) => (a.Start > b.Start ? 1 : -1));\n    dispatch(storeTeacherEventsGeneralInfoAction(filtered));\n\n    history.push(\"/teacher-event-view\");\n  };\n  const addInvitee = () => {\n    const invitee = document.querySelector(\"#tbAddInvitee\").value;\n\n    const allInvs = [...eve.Invitees];\n    allInvs.push(invitee);\n\n    const tempObj = {\n      ...eve,\n      Invitees: allInvs,\n    };\n\n    dispatch(storeSingleMonthEventAction(tempObj));\n    dispatch(toggleAddEventInviteeAction());\n  };\n\n  // REMOVE\n  const removeInvitee = (event) => {\n    const invitee = event.target.getAttribute(\"id\");\n\n    const allInvs = [...eve.Invitees];\n    const filtered = allInvs.filter((ee) => ee !== invitee);\n\n    const tempObj = {\n      ...eve,\n      Invitees: filtered,\n    };\n\n    dispatch(storeSingleMonthEventAction(tempObj));\n  };\n\n  useEffect(() => {\n    if (!teacherAuthID) {\n      history.push(\"/teacherdash\");\n      return;\n    }\n  }, []);\n  return (\n    <div>\n      {/* Top Bar */}\n      <div>\n        <TopBar />\n      </div>\n\n      <div>\n        <h1>{eve.Name}</h1>\n\n        <div>{handleEventEdit()}</div>\n        <br />\n        <button onClick={saveAllChanges}>Save All Changes</button>\n      </div>\n\n      {/* Footer */}\n      <div>\n        <DashFooter />\n      </div>\n    </div>\n  );\n}\n","/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Teachers/Events/EventView.js",["555","556"],"import React, { useEffect } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { useHistory } from \"react-router-dom\";\n\nimport TopBar from \"../Dash/TopBar\";\nimport DashFooter from \"../Dash/DashFooter\";\n\nexport default function EventView() {\n  const teacherAuthID = useSelector((state) => state.storeTeacherAuthIDReducer);\n  const history = useHistory();\n  const dispatch = useDispatch();\n\n  const eve = useSelector((state) => state.storeSingleMonthEventReducer);\n\n  useEffect(() => {\n    if (!teacherAuthID) {\n      history.push(\"/teacherdash\");\n      return;\n    }\n  }, []);\n\n  return (\n    <div>\n      {/* Top Bar */}\n      <div>\n        <TopBar />\n      </div>\n\n      {/* Content */}\n      <div>\n        <button onClick={() => history.push(\"/teacher-events\")}>Back</button>\n        <h1>{eve.Name}</h1>\n        <div>\n          <p>{eve.Desc}</p>\n          <p>\n            Start:{\" \"}\n            {eve.Start ? eve.Start.toDate().toString().substr(4, 11) : null}\n          </p>\n          <p>\n            End: {eve.End ? eve.End.toDate().toString().substr(4, 11) : null}\n          </p>\n\n          <p>Invitees: </p>\n          <ul>\n            {eve.Invitees\n              ? eve.Invitees.map((inv, i) => {\n                  return <p key={i}>{inv}</p>;\n                })\n              : null}\n          </ul>\n        </div>\n      </div>\n\n      {/* Dash Footer */}\n      <div>\n        <DashFooter />\n      </div>\n    </div>\n  );\n}\n",["557","558"],"/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Teachers/Invoices/InvoiceView.js",["559"],"import React, { useEffect } from \"react\";\n\nimport TopBar from \"../Dash/TopBar\";\nimport DashFooter from \"../Dash/DashFooter\";\n\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { useHistory } from \"react-router-dom\";\nimport { teachers_Collection } from \"../../../utils/firebase\";\nimport { firebaseLooper } from \"../../../utils/tools\";\nimport { storeInvoiceServicesAction } from \"../../../redux/actions\";\n\nexport default function InvoiceView() {\n  const teacherAuthID = useSelector((state) => state.storeTeacherAuthIDReducer);\n  const history = useHistory();\n  const dispatch = useDispatch();\n\n  const invoice = useSelector((state) => state.storeSingleInvoiceReducer);\n\n  const getAllServices = () => {\n    const invoiceID = invoice.id;\n    const services_Collection = teachers_Collection\n      .doc(teacherAuthID)\n      .collection(\"Invoices\")\n      .doc(invoiceID)\n      .collection(\"Services\");\n\n    services_Collection\n      .get()\n      .then((snapshot) => {\n        const data = firebaseLooper(snapshot);\n        dispatch(storeInvoiceServicesAction(data));\n      })\n      .catch((err) => console.log(err));\n  };\n\n  const services = useSelector((state) => state.storeInvoiceServicesReducer);\n\n  useEffect(() => {\n    if (!teacherAuthID) {\n      history.push(\"/teacherdash\");\n      return;\n    } else if (!invoice) {\n        history.push('/teacher-invoices');\n        return;\n    }\n    getAllServices();\n  }, []);\n\n  return (\n    <div>\n      {/* Top Bar */}\n      <div>\n        <TopBar />\n      </div>\n\n      <div>\n        <div>\n          <button\n            onClick={() => {\n              history.push(\"/teacher-invoices\");\n            }}\n          >\n            View All Invoices\n          </button>\n        </div>\n\n        {/* Invoice Template */}\n        <div>\n          {/* Top */}\n          <div>\n            <h3>Invoice #{invoice.No}</h3>\n            <p>\n              Date Issued: {invoice.Created.toDate().toString().substr(4, 11)}\n            </p>\n            <p>Date Due: {invoice.Due.toDate().toString().substr(4, 11)}</p>\n          </div>\n          <hr />\n          {/* Contact Details */}\n          <div>\n            <h4>Invoice To:</h4>\n            <p>{invoice.Name}</p>\n            <p>{invoice.Address}</p>\n            <p>\n              {invoice.City}, {invoice.State} {invoice.Zip}\n            </p>\n            <p>{invoice.Email}</p>\n          </div>\n          <hr/>\n          {/* Services Details */}\n          <div>\n            <table>\n              <tr>\n                <th>Services</th>\n                <th>Rate</th>\n                <th>Hours</th>\n                <th>Price</th>\n              </tr>\n              {services.map((serv, i) => {\n                return (\n                  <div key={i}>\n                    <tr>\n                      <td>{serv.Name}</td>\n                      <td>${serv.Rate}</td>\n                      <td>{serv.Hours} HRS</td>\n                      <td>${serv.FullPrice}</td>\n                    </tr>\n                  </div>\n                );\n              })}\n            </table>\n          </div>\n          <hr/>\n          {/* Message */}\n          <div>\n              <p>{invoice.Message}</p>\n          </div>\n        </div>\n\n        {/* Invoice Actions */}\n        <div>\n            <button>Send Invoice</button>\n            <button>Print</button>\n            <button>Edit</button>\n        </div>\n      </div>\n\n      {/* Footer */}\n      <div>\n        <DashFooter />\n      </div>\n    </div>\n  );\n}\n",["560","561"],"/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Teachers/Forums/ForumsMain.js",["562","563","564"],"import React, { useEffect } from \"react\";\n\nimport TopBar from \"../Dash/TopBar\";\nimport ForumBlocks from \"./ForumBlocks\";\nimport DashFooter from \"../Dash/DashFooter\";\n\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { useHistory } from \"react-router-dom\";\nimport { groups_Collection, forums_Collection } from \"../../../utils/firebase\";\nimport { firebaseLooper } from \"../../../utils/tools\";\nimport { storeSingleForumAction } from \"../../../redux/actions\";\nimport ForumSingleBlock from \"./ForumSingleBlock\";\n\nexport default function ForumsMain() {\n  const teacherAuthID = useSelector((state) => state.storeTeacherAuthIDReducer);\n  const history = useHistory();\n  const dispatch = useDispatch();\n  const forumState = useSelector(\n    (state) => state.storeTeacherForumsGeneralInfoReducer\n  );\n  const singleForumState = useSelector(\n    (state) => state.storeSingleForumReducer\n  );\n\n  const groupState = useSelector(\n    (state) => state.storeTeacherGroupGeneralInfoReducer\n  );\n\n  const getSingleForum = (event) => {\n    const id = event.target.getAttribute(\"id\");\n    let singleForum = {};\n    forumState.forEach((f) => {\n      if (f.id === id) {\n        const posts_Collection = forums_Collection.doc(id).collection(\"Posts\");\n        posts_Collection\n          .get()\n          .then((snapshot) => {\n            const postData = firebaseLooper(snapshot);\n            const newPosts = [];\n            postData.forEach((pd) => {\n              const comments_Collection = forums_Collection\n                .doc(id)\n                .collection(\"Posts\")\n                .doc(pd.id)\n                .collection(\"Comments\");\n              comments_Collection\n                .get()\n                .then((snapshot) => {\n                  const commentData = firebaseLooper(snapshot);\n                  newPosts.push({\n                    ...pd,\n                    commentData,\n                  });\n                  singleForum = {\n                    ...f,\n                    newPosts,\n                  };\n                  dispatch(storeSingleForumAction(singleForum));\n                })\n                .catch((err) => console.log(err));\n            });\n          })\n          .catch((err) => console.log(err));\n      }\n    });\n  };\n\n  useEffect(() => {\n    if (!teacherAuthID) {\n      history.push(\"/teacherdash\");\n      return;\n    }\n  }, []);\n\n  return (\n    <div>\n      {/* Top Bar */}\n      <div>\n        <TopBar />\n      </div>\n\n      <div>\n        <div>\n          <input id=\"tbForumSearch\" type=\"text\" placeholder=\"Search\" />\n          <button>Search</button>\n        </div>\n\n        {/* Forum Content */}\n        <div>\n          {singleForumState.Topic ? (\n            <ForumSingleBlock\n              topic={singleForumState.Topic}\n              desc={singleForumState.Desc}\n              date={singleForumState.DateCreated}\n              posts={singleForumState.newPosts}\n            />\n          ) : null}\n        </div>\n\n        <div>\n          {forumState.map((f, i) => {\n            return (\n              <div>\n                <ForumBlocks key={i} topic={f.Topic} />\n                <button id={f.id} onClick={getSingleForum}>\n                  View Discussion\n                </button>\n                <button>Remove</button>\n              </div>\n            );\n          })}\n        </div>\n      </div>\n\n      {/* Footer */}\n      <div>\n        <DashFooter />\n      </div>\n    </div>\n  );\n}\n","/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/RandomString.js",[],"/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Teachers/Dash/Achievement.js",[],"/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Teachers/Dash/DashFooter.js",[],["565","566"],"/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Teachers/Profile/ProfileGallery.js",[],"/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Teachers/Groups/GroupAboutEdit.js",["567"],"import React, { useEffect } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { useHistory } from \"react-router-dom\";\nimport { storeSingleGroupAction } from \"../../../redux/actions\";\nimport { groups_Collection } from \"../../../utils/firebase\";\n\nexport default function GroupAboutEdit() {\n  const teacherAuthID = useSelector((state) => state.storeTeacherAuthIDReducer);\n  const history = useHistory();\n  const dispatch = useDispatch();\n\n  const group = useSelector((state) => state.storeSingleGroupReducer);\n\n  const saveEdit = () => {\n    const editText = document.querySelector(\"#taAboutEditText\").value;\n\n    //   Save to DB\n    groups_Collection.doc(group.id).update({\n      Access: group.Access,\n      Date: group.Date,\n      Desc: editText,\n      Host: group.Host,\n      Name: group.Name,\n    });\n\n    // Dispatch\n    const groupObj = {\n      ...group,\n      id: group.id,\n      Desc: editText,\n    };\n\n    dispatch(storeSingleGroupAction(groupObj));\n\n    history.push(\"/teacher-group-page/about\");\n  };\n\n  useEffect(() => {\n    if (!teacherAuthID) {\n      history.push(\"/teacherdash\");\n      return;\n    }\n  }, []);\n  return (\n    <div>\n      <div>\n        <button onClick={() => history.push(\"/teacher-group-page/about\")}>\n          Back\n        </button>\n      </div>\n      <br />\n      <div>\n        <textarea id=\"taAboutEditText\" defaultValue={group.Desc}></textarea>\n        <br />\n        <button onClick={saveEdit}>Save</button>\n      </div>\n    </div>\n  );\n}\n","/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Teachers/Statistics/EventStats.js",["568"],"import React, { useEffect } from \"react\";\n\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useHistory } from \"react-router-dom\";\n\nimport { statisticsObjectAction } from \"../../../redux/actions\";\n\nexport default function EventStats() {\n  const history = useHistory();\n  const dispatch = useDispatch();\n\n  const teacherAuthID = useSelector((state) => state.storeTeacherAuthIDReducer);\n  const storageState = useSelector(\n    (state) => state.storeTeacherStatisticsGeneralInfoReducer\n  );\n  const storageObj = useSelector((state) => state.statisticsObjectReducer);\n\n  const getStorageObj = () => {\n    storageState.forEach((obj) => {\n      if (obj.id === \"EventStats\") {\n        dispatch(statisticsObjectAction(obj));\n      }\n    });\n  };\n\n  useEffect(() => {\n    if (!teacherAuthID) {\n      history.push(\"/teacherdash\");\n    }\n    getStorageObj();\n  }, []);\n  return (\n    <div>\n      <h1>Event Stats</h1>\n      <hr/>\n      <p># of Events: {storageObj.Num}</p>\n    </div>\n  );\n}\n","/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Students/Profile/ProfileAwardsEdit.js",["569","570"],"import React, { useEffect } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { useHistory } from \"react-router-dom\";\n\nimport InputDateFormatter from \"../../InputDateFormatter\";\nimport FirebaseDate from \"../../FirebaseDate\";\nimport GetToday from \"../../GetToday\";\nimport RandomString from \"../../RandomString\";\nimport {\n  storeStudentAwardsAction,\n  storeStudentCertsAction,\n  toggleStudentNewAwardFormAction,\n  toggleStudentNewCertFormAction,\n} from \"../../../redux/actions\";\nimport { students_Collection } from \"../../../utils/firebase\";\n\nexport default function ProfileAwardsEdit() {\n  const studentAuthID = useSelector((state) => state.storeStudentAuthIDReducer);\n  const user = useSelector((state) => state.storeStudentUserDataReducer);\n  const history = useHistory();\n  const dispatch = useDispatch();\n\n  // States\n  const awards = useSelector((state) => state.storeStudentAwardsReducer);\n  const certs = useSelector((state) => state.storeStudentCertsReducer);\n\n  //   Toggles\n  const toggleNewAwardForm = useSelector(\n    (state) => state.toggleStudentNewAwardFormReducer\n  );\n  const toggleNewCertForm = useSelector(\n    (state) => state.toggleStudentNewCertFormReducer\n  );\n\n  //   HANDLE\n  const handleAwardsEdit = () => {\n    return awards.map((awd, i) => {\n      return (\n        <div key={i}>\n          <div>\n            <h3>Award Name</h3>\n            <input id={`tbAwardName${i}`} type=\"text\" defaultValue={awd.Name} />\n          </div>\n          <div>\n            <h3>Institution</h3>\n            <input\n              id={`tbAwardInstitution${i}`}\n              type=\"text\"\n              defaultValue={awd.Institution}\n            />\n          </div>\n          <div>\n            <h3>Description</h3>\n            <textarea id={`taAwardDesc${i}`} defaultValue={awd.Desc}></textarea>\n          </div>\n          <div>\n            <h3>Issued</h3>\n            <input\n              id={`daAwardDate${i}`}\n              type=\"date\"\n              defaultValue={InputDateFormatter(awd.Date)}\n            />\n          </div>\n          <button id={awd.id} onClick={removeAward}>\n            Remove\n          </button>\n          <hr />\n        </div>\n      );\n    });\n  };\n  const handleCertsEdit = () => {\n    return certs.map((cert, i) => {\n      return (\n        <div key={i}>\n          <div>\n            <h3>Certification Name</h3>\n            <input id={`tbCertName${i}`} type=\"text\" defaultValue={cert.Name} />\n          </div>\n          <div>\n            <h3>Institution</h3>\n            <input\n              id={`tbCertInstitution${i}`}\n              type=\"text\"\n              defaultValue={cert.Institution}\n            />\n          </div>\n          <div>\n            <h3>Description</h3>\n            <textarea id={`taCertDesc${i}`} defaultValue={cert.Desc}></textarea>\n          </div>\n          <div>\n            <h3>Issued</h3>\n            <input\n              id={`daCertDate${i}`}\n              type=\"date\"\n              defaultValue={InputDateFormatter(cert.Date)}\n            />\n          </div>\n          <button id={cert.id} onClick={removeCert}>\n            Remove\n          </button>\n          <hr />\n        </div>\n      );\n    });\n  };\n  const handleNewAward = () => {\n    return (\n      <div>\n        <div>\n          <h3>Award Name</h3>\n          <input id=\"tbNewAwardName\" type=\"text\" placeholder=\"Award Name\" />\n        </div>\n        <div>\n          <h3>Institution</h3>\n          <input\n            id=\"tbNewAwardInstitution\"\n            type=\"text\"\n            placeholder=\"Institution\"\n          />\n        </div>\n        <div>\n          <h3>Description</h3>\n          <textarea id=\"taNewAwardDesc\" placeholder=\"Description\"></textarea>\n        </div>\n        <div>\n          <h3>Issued</h3>\n          <input\n            id=\"daNewAwardDate\"\n            type=\"date\"\n            defaultValue={InputDateFormatter(GetToday())}\n          />\n        </div>\n        <button onClick={saveNewAward}>Apply</button>\n        <hr />\n      </div>\n    );\n  };\n  const handleNewCert = () => {\n    return (\n      <div>\n        <div>\n          <h3>Certification Name</h3>\n          <input\n            id=\"tbNewCertName\"\n            type=\"text\"\n            placeholder=\"Certification Name\"\n          />\n        </div>\n        <div>\n          <h3>Institution</h3>\n          <input\n            id=\"tbNewCertInstitution\"\n            type=\"text\"\n            placeholder=\"Institution\"\n          />\n        </div>\n        <div>\n          <h3>Description</h3>\n          <textarea id=\"taNewCertDesc\" placeholder=\"Description\"></textarea>\n        </div>\n        <div>\n          <h3>Issued</h3>\n          <input\n            id=\"daNewCertDate\"\n            type=\"date\"\n            defaultValue={InputDateFormatter(GetToday())}\n          />\n        </div>\n        <button onClick={saveNewCert}>Apply</button>\n        <hr />\n      </div>\n    );\n  };\n\n  //   POST\n  const saveNewAward = () => {\n    const awardName = document.querySelector(\"#tbNewAwardName\").value;\n    const awardInstitution = document.querySelector(\"#tbNewAwardInstitution\")\n      .value;\n    const awardDesc = document.querySelector(\"#taNewAwardDesc\").value;\n    const awardDateValue = document\n      .querySelector(\"#daNewAwardDate\")\n      .value.toString();\n\n    const awardDate = FirebaseDate(awardDateValue);\n\n    const rand1 = RandomString();\n    const rand2 = RandomString();\n    const awardID = `Award${rand1}${rand2}`;\n\n    // Save to DB\n    students_Collection\n      .doc(studentAuthID)\n      .collection(\"Profile\")\n      .doc(\"Awards\")\n      .collection(\"AwardBlocks\")\n      .doc(awardID)\n      .set({\n        Name: awardName,\n        Institution: awardInstitution,\n        Desc: awardDesc,\n        Date: awardDate,\n      })\n      .catch((err) => console.log(err));\n\n    // Dispatch\n    const allAwards = [...awards];\n    allAwards.push({\n      id: awardID,\n      Name: awardName,\n      Institution: awardInstitution,\n      Desc: awardDesc,\n      Date: awardDate,\n    });\n\n    console.log(allAwards);\n\n    dispatch(storeStudentAwardsAction(allAwards));\n    dispatch(toggleStudentNewAwardFormAction());\n  };\n  const saveNewCert = () => {\n    const certName = document.querySelector(\"#tbNewCertName\").value;\n    const certInstitution = document.querySelector(\"#tbNewCertInstitution\")\n      .value;\n    const certDesc = document.querySelector(\"#taNewCertDesc\").value;\n    const certDate = FirebaseDate(\n      document.querySelector(\"#daNewCertDate\").value\n    );\n\n    const rand1 = RandomString();\n    const rand2 = RandomString();\n    const certID = `Cert${rand1}${rand2}`;\n\n    // Save to DB\n    students_Collection\n      .doc(studentAuthID)\n      .collection(\"Profile\")\n      .doc(\"Awards\")\n      .collection(\"CertBlocks\")\n      .doc(certID)\n      .set({\n        Name: certName,\n        Institution: certInstitution,\n        Desc: certDesc,\n        Date: certDate,\n      })\n      .catch((err) => console.log(err));\n\n    //   Dispatch\n    const allCerts = [...certs];\n    allCerts.push({\n      id: certID,\n      Name: certName,\n      Institution: certInstitution,\n      Desc: certDesc,\n      Date: certDate,\n    });\n\n    dispatch(storeStudentCertsAction(allCerts));\n    dispatch(toggleStudentNewCertFormAction());\n  };\n  const saveAllChanges = () => {\n    let awardArray = [];\n    let certArray = [];\n\n    // Awards\n    for (let i = 0; i < awards.length; i = i + 1) {\n      const awardName = document.querySelector(`#tbAwardName${i}`).value;\n      const awardInstutition = document.querySelector(`#tbAwardInstitution${i}`)\n        .value;\n      const awardDesc = document.querySelector(`#taAwardDesc${i}`).value;\n      const awardDate = FirebaseDate(\n        document.querySelector(`#daAwardDate${i}`).value\n      );\n\n      const awardObj = {\n        id: awards[i].id,\n        Name: awardName,\n        Institution: awardInstutition,\n        Desc: awardDesc,\n        Date: awardDate,\n      };\n\n      awardArray.push(awardObj);\n    }\n\n    // Certs\n    for (let i = 0; i < certs.length; i = i + 1) {\n      const certName = document.querySelector(`#tbCertName${i}`).value;\n      const certInstitution = document.querySelector(`#tbCertInstitution${i}`)\n        .value;\n      const certDesc = document.querySelector(`#taCertDesc${i}`).value;\n      const certDate = FirebaseDate(\n        document.querySelector(`#daCertDate${i}`).value\n      );\n\n      const certObj = {\n        id: certs[i].id,\n        Name: certName,\n        Institution: certInstitution,\n        Desc: certDesc,\n        Date: certDate,\n      };\n\n      certArray.push(certObj);\n    }\n\n    // Save to DB\n    awardArray.forEach((awd) => {\n      students_Collection\n        .doc(studentAuthID)\n        .collection(\"Profile\")\n        .doc(\"Awards\")\n        .collection(\"AwardBlocks\")\n        .doc(awd.id)\n        .update({\n          Name: awd.Name,\n          Institution: awd.Institution,\n          Desc: awd.Desc,\n          Date: awd.Date,\n        })\n        .catch((err) => console.log(err));\n    });\n    certArray.forEach((cert) => {\n      students_Collection\n        .doc(studentAuthID)\n        .collection(\"Profile\")\n        .doc(\"Awards\")\n        .collection(\"CertBlocks\")\n        .doc(cert.id)\n        .update({\n          Name: cert.Name,\n          Institution: cert.Institution,\n          Desc: cert.Desc,\n          Date: cert.Date,\n        })\n        .catch((err) => console.log(err));\n    });\n\n    // Dispatch\n    dispatch(storeStudentAwardsAction(awardArray));\n    dispatch(storeStudentCertsAction(certArray));\n\n    history.push(\"/student-profile/awards\");\n  };\n\n  // REMOVE\n  const removeAward = (event) => {\n    const awardID = event.target.getAttribute(\"id\");\n\n    // Remove from DB\n    students_Collection\n      .doc(studentAuthID)\n      .collection(\"Profile\")\n      .doc(\"Awards\")\n      .collection(\"AwardBlocks\")\n      .doc(awardID)\n      .delete()\n      .catch((err) => console.log(err));\n\n    // Dispatch\n    const allAwards = [...awards];\n    const filtered = allAwards.filter((awd) => awd.id !== awardID);\n\n    dispatch(storeStudentAwardsAction(filtered));\n  };\n  const removeCert = (event) => {\n    const certID = event.target.getAttribute(\"id\");\n\n    // Remove from DB\n    students_Collection\n      .doc(studentAuthID)\n      .collection(\"Profile\")\n      .doc(\"Awards\")\n      .collection(\"CertBlocks\")\n      .doc(certID)\n      .delete()\n      .catch((err) => console.log(err));\n\n    // Dispatch\n    const allCerts = [...certs];\n    const filtered = allCerts.filter((cert) => cert.id !== certID);\n\n    dispatch(storeStudentCertsAction(filtered));\n  };\n\n  useEffect(() => {\n    if (!studentAuthID) {\n      history.push(\"/studentdash\");\n      return;\n    }\n  }, []);\n\n  return (\n    <div>\n      {/* Awards */}\n      <div>\n        <h2>Awards</h2>\n        <div>{handleAwardsEdit()}</div>\n        <div>{toggleNewAwardForm ? handleNewAward() : null}</div>\n        <button onClick={() => dispatch(toggleStudentNewAwardFormAction())}>\n          {toggleNewAwardForm ? \"Close\" : \"Add Award\"}\n        </button>\n      </div>\n\n      {/* Certs */}\n      <div>\n        <h2>Certifications</h2>\n        <div>{handleCertsEdit()}</div>\n        <div>{toggleNewCertForm ? handleNewCert() : null}</div>\n        <button onClick={() => dispatch(toggleStudentNewCertFormAction())}>\n          {toggleNewCertForm ? \"Close\" : \"Add Certification\"}\n        </button>\n      </div>\n      <br />\n      <button onClick={saveAllChanges}>Save All Changes</button>\n    </div>\n  );\n}\n","/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Home/HomeCoursesCard.js",[],["571","572"],"/Users/jesusjimenez/Creative/MusicProject/musicapp/src/redux/actions.js",[],"/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Login.js",["573","574"],"import React from \"react\";\nimport \"./Login/Login.css\";\n\nimport { useHistory } from \"react-router-dom\";\nimport {\n  loginRegisterToggleAction,\n  isLoggedInAction,\n  storeTeacherAuthIDAction,\n  storeStudentAuthIDAction,\n  storeAccountTypeAction,\n} from \"../redux/actions\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { users_Collection } from \"../utils/firebase\";\nimport { firebaseLooper } from \"../utils/tools\";\n\nimport \"./Login.css\";\n\nexport default function Login() {\n  const loginSwitchState = useSelector(\n    (state) => state.loginRegisterSwitchReducer\n  );\n  const isLoggedInState = useSelector((state) => state.isLoggedInReducer);\n  const accountTypeState = useSelector(\n    (state) => state.storeAccountTypeReducer\n  );\n\n  const dispatch = useDispatch();\n  const history = useHistory();\n\n  const handleRouteClick = () => {\n    const username = document.querySelector(\"#tbUsername\").value;\n    const password = document.querySelector(\"#tbPassword\").value;\n\n    // Check if they exist in the DB\n    users_Collection\n      .get()\n      .then((snapshot) => {\n        const userData = firebaseLooper(snapshot);\n        userData.forEach((user) => {\n          if (user.Username === username && user.Password === password) {\n            // If they do exist and are correct, then do the stuffs\n\n            document.querySelector(\"#mainMenu\").classList.add(\"hide\");\n\n            // Choose between teacher or student depending on their credentials\n\n            dispatch(isLoggedInAction());\n\n            if (user.AccountType === \"Teacher\") {\n              // Save authID\n              dispatch(storeTeacherAuthIDAction(username));\n              dispatch(storeAccountTypeAction(\"Teacher\"));\n              document\n                .querySelector(\"#teacherMainMenu\")\n                .classList.remove(\"hide\");\n              history.push(\"/teacherdash\");\n            } else if (user.AccountType === \"Student\") {\n              // Save authID\n              dispatch(storeStudentAuthIDAction(username));\n              dispatch(storeAccountTypeAction(\"Student\"));\n              document\n                .querySelector(\"#studentMainMenu\")\n                .classList.remove(\"hide\");\n              history.push(\"/studentdash\");\n            }\n          }\n        });\n      })\n      .catch((err) => console.log(err));\n  };\n\n  const handleLoginSwitch = () => {\n    if (loginSwitchState === \"login\") {\n      return (\n        <div>\n          <div className=\"login-text\">\n            <h2>Welcome back!</h2>\n            <p>Please log in to begin your musical adventures!</p>\n          </div>\n          <div className=\"login-form\">\n            <div>\n              <label>Username or Email</label>\n              <input\n                className=\"login-tb\"\n                id=\"tbUsername\"\n                type=\"text\"\n                placeholder=\"jdoe123! or johndoe@gmail.com\"\n              />\n            </div>\n            <div>\n              <div style={{ display: \"flex\" }}>\n                <label>Password</label>\n                <button\n                  id=\"btn-forgot\"\n                  onClick={() => dispatch(loginRegisterToggleAction(\"forgot\"))}\n                >\n                  Forgot Password?\n                </button>\n              </div>\n              <input\n                className=\"login-tb\"\n                id=\"tbPassword\"\n                type=\"password\"\n                placeholder=\"Password\"\n              />\n            </div>\n            <div>\n              <button class=\"btn-login\" onClick={handleRouteClick}>\n                Login\n              </button>\n            </div>\n            <div className=\"login-reg\">\n              <p>Are you new to Musicademy? </p>\n              <button\n                onClick={() => dispatch(loginRegisterToggleAction(\"register\"))}\n              >\n                Create an account\n              </button>\n            </div>\n          </div>\n        </div>\n      );\n    } else if (loginSwitchState === \"register\") {\n      return (\n        <div>\n          <div>\n            <h2>A new musical adventure begins here!</h2>\n            <p>\n              Make sure to enter correct information for proper registration.\n            </p>\n          </div>\n          <div>\n            <div>\n              <div>\n                <label>First Name</label>\n                <input id=\"tbFname\" type=\"text\" placeholder=\"John\" />\n              </div>\n              <div>\n                <label>Last Name</label>\n                <input id=\"tbLname\" type=\"text\" placeholder=\"Doe\" />\n              </div>\n            </div>\n            <div>\n              <label>Email</label>\n              <input\n                id=\"tbRegisEmail\"\n                type=\"text\"\n                placeholder=\"johndoe@gmail.com\"\n              />\n            </div>\n            <div>\n              <label>Username</label>\n              <input id=\"tbRegisUser\" type=\"text\" placeholder=\"jdoe123!\" />\n            </div>\n            <div>\n              <label>Password</label>\n              <input id=\"tbRegisPass\" type=\"text\" placeholder=\"Password\" />\n            </div>\n            <div>\n              <label>Confirm Password</label>\n              <input\n                id=\"tbRegisPassConf\"\n                type=\"password\"\n                placeholder=\"Password Confirmation\"\n              />\n            </div>\n            <div>\n              <button>Register</button>\n            </div>\n            <div>\n              <p>Already a member?</p>\n              <button\n                onClick={() => dispatch(loginRegisterToggleAction(\"login\"))}\n              >\n                Login to account\n              </button>\n            </div>\n          </div>\n        </div>\n      );\n    } else if (loginSwitchState === \"forgot\") {\n      return (\n        <div>\n          <div>\n            <h2>Forgot Password?</h2>\n            <p>Enter your email and we will email you instructions shortly.</p>\n          </div>\n          <div>\n            <div>\n              <label>Email</label>\n              <input\n                id=\"tbForgotEmail\"\n                type=\"text\"\n                placeholder=\"johndoe@gmail.com\"\n              />\n            </div>\n            <div>\n              <button>Send reset link</button>\n            </div>\n          </div>\n          <div>\n            <button\n              onClick={() => dispatch(loginRegisterToggleAction(\"login\"))}\n            >\n              {\"<\"} Back to Login\n            </button>\n          </div>\n        </div>\n      );\n    }\n  };\n\n  return (\n    <div className=\"login-wrapper\">\n      {/* Form */}\n      <div className=\"login-box\">{handleLoginSwitch()}</div>\n    </div>\n  );\n}\n","/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Teachers/Groups/GroupsPage.js",["575"],"import React, { useEffect } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { useHistory } from \"react-router-dom\";\n\nimport TopBar from \"../Dash/TopBar\";\nimport DashFooter from \"../Dash/DashFooter\";\n\nimport GroupFeedView from \"../Groups/GroupFeedView\";\nimport GroupFeedEdit from \"../Groups/GroupFeedEdit\";\nimport GroupAboutView from \"../Groups/GroupAboutView\";\nimport GroupAboutEdit from \"../Groups/GroupAboutEdit\";\nimport GroupMembersView from \"../Groups/GroupMembersView\";\nimport RandomString from \"../../RandomString\";\n\n// Router stuff\nimport { Switch, Route, Link, useRouteMatch } from \"react-router-dom\";\nimport {\n  groups_Collection,\n  groupReqQueue_Collection,\n} from \"../../../utils/firebase\";\nimport {\n  checkJoinedGroupStatusAction,\n  checkRequestedGroupStatusAction,\n} from \"../../../redux/actions\";\nimport { firebaseLooper } from \"../../../utils/tools\";\n\nexport default function GroupsPage() {\n  let { url } = useRouteMatch();\n  const teacherAuthID = useSelector((state) => state.storeTeacherAuthIDReducer);\n  const history = useHistory();\n  const dispatch = useDispatch();\n\n  const group = useSelector((state) => state.storeSingleGroupReducer);\n  const joined = useSelector((state) => state.checkJoinedGroupStatusReducer);\n  const requested = useSelector(\n    (state) => state.checkRequestedGroupStatusReducer\n  );\n\n  const joinGroup = () => {\n    const rand1 = RandomString();\n    const rand2 = RandomString();\n    const reqID = `GroupReq${rand1}${rand2}`;\n\n    // Send Request to DB\n    groupReqQueue_Collection\n      .doc(reqID)\n      .set({\n        MemberID: teacherAuthID,\n        HostID: group.Host,\n        isAccepted: false,\n      })\n      .catch((err) => console.log(err));\n\n    // Dispatch\n    dispatch(checkRequestedGroupStatusAction(true));\n  };\n  const disconnectGroup = () => {\n    if (teacherAuthID === group.Host) {\n      // Show modal\n      alert(\n        \"Our apologies. You are not able to disconnect from this group since you are the host.\"\n      );\n    } else {\n      // Remove from DB\n      groups_Collection\n        .doc(group.id)\n        .collection(\"Members\")\n        .get()\n        .then((snapshot) => {\n          const memberData = firebaseLooper(snapshot);\n          memberData.forEach((mem) => {\n            if (mem.Username === teacherAuthID) {\n              groups_Collection\n                .doc(group.id)\n                .collection(\"Members\")\n                .doc(mem.id)\n                .delete()\n                .catch((err) => console.log(err));\n            }\n          });\n        })\n        .catch((err) => console.log(err));\n    }\n\n    // Dispatch\n    dispatch(checkJoinedGroupStatusAction(false));\n  };\n\n  const checkJoined = () => {\n    groups_Collection\n      .doc(group.id)\n      .collection(\"Members\")\n      .get()\n      .then((snapshot) => {\n        const memberData = firebaseLooper(snapshot);\n        memberData.forEach((mem) => {\n          if (mem.Username === teacherAuthID) {\n            dispatch(checkJoinedGroupStatusAction(true));\n          }\n        });\n      })\n      .catch((err) => console.log(err));\n  };\n  const checkRequested = () => {\n    groupReqQueue_Collection\n      .get()\n      .then((snapshot) => {\n        const queueData = firebaseLooper(snapshot);\n        queueData.forEach((q) => {\n          if (q.MemberID === teacherAuthID) {\n            dispatch(checkRequestedGroupStatusAction(true));\n          }\n        });\n      })\n      .catch((err) => console.log(err));\n  };\n\n  useEffect(() => {\n    if (!teacherAuthID) {\n      history.push(\"/teacherdash\");\n      return;\n    }\n    checkJoined();\n    checkRequested();\n  }, []);\n  return (\n    <div>\n      {/* Top Bar */}\n      <div>\n        <TopBar />\n      </div>\n\n      {/* Main Content */}\n      <div>\n        <div>\n          <h1>{group.Name}</h1>\n        </div>\n        <div>\n          {joined ? (\n            <button onClick={disconnectGroup}>Disconnect</button>\n          ) : requested ? (\n            <button enabled=\"false\">Request Sent</button>\n          ) : (\n            <button onClick={joinGroup}>Join</button>\n          )}\n        </div>\n      </div>\n\n      <div>\n        <ul>\n          <li>\n            <Link to={`${url}/feed`}>Feed</Link>\n          </li>\n          <li>\n            <Link to={`${url}/about`}>About</Link>\n          </li>\n          <li>\n            <Link to={`${url}/members`}>Members</Link>\n          </li>\n        </ul>\n      </div>\n\n      <div>\n        <Switch>\n          {/* Feed */}\n          <Route path={`${url}/feed`}>\n            <GroupFeedView />\n          </Route>\n          <Route path={`${url}/feed-edit`}>\n            <GroupFeedEdit />\n          </Route>\n          {/* About */}\n          <Route path={`${url}/about`}>\n            <GroupAboutView />\n          </Route>\n          <Route path={`${url}/about-edit`}>\n            <GroupAboutEdit />\n          </Route>\n          {/* Members */}\n          <Route path={`${url}/members`}>\n            <GroupMembersView />\n          </Route>\n        </Switch>\n      </div>\n\n      {/* Footer */}\n      <div>\n        <DashFooter />\n      </div>\n    </div>\n  );\n}\n","/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Teachers/Milestones/MilestoneAssign.js",["576","577"],"import React, { useEffect } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { useHistory } from \"react-router-dom\";\n\nimport TopBar from \"../Dash/TopBar\";\nimport DashFooter from \"../Dash/DashFooter\";\nimport {\n  students_Collection,\n  teachers_Collection,\n} from \"../../../utils/firebase\";\nimport { storeTeacherMilestonesAssigneesAction } from \"../../../redux/actions\";\nimport { firebaseLooper } from \"../../../utils/tools\";\nimport firestore from \"../../../utils/firebase\";\n\nexport default function MilestoneAssign() {\n  const teacherAuthID = useSelector((state) => state.storeTeacherAuthIDReducer);\n  const history = useHistory();\n  const dispatch = useDispatch();\n\n  const milestone = useSelector(\n    (state) => state.storeTeacherSingleMilestoneSegReducer\n  );\n  const assignees = useSelector(\n    (state) => state.storeTeacherMilestonesAssigneesReducer\n  );\n\n  // GET\n  const getAllStudents = () => {\n    teachers_Collection\n      .doc(teacherAuthID)\n      .collection(\"Students\")\n      .get()\n      .then((snapshot) => {\n        const studentData = firebaseLooper(snapshot);\n        let studIDs = [];\n        studentData.forEach((stud) => {\n          studIDs.push(stud.id);\n        });\n        const filtered = studIDs.filter(\n          (e) => !milestone.AssignedTo.includes(e)\n        );\n        console.log(filtered);\n        dispatch(storeTeacherMilestonesAssigneesAction(filtered));\n      })\n      .catch((err) => console.log(err));\n  };\n\n  //   HANDLE\n  const handleStudentList = () => {\n    return assignees.map((assignee, i) => {\n      return (\n        <button onClick={assignMilestone} key={i} id={assignee}>\n          {assignee}\n        </button>\n      );\n    });\n  };\n\n  //   POST\n  const assignMilestone = (event) => {\n    const studID = event.target.getAttribute(\"id\");\n\n    let currAssignees = [...milestone.AssignedTo];\n    currAssignees.push(studID);\n\n    teachers_Collection\n      .doc(teacherAuthID)\n      .collection(\"Milestones\")\n      .doc(milestone.id)\n      .update({\n        AssignedTo: currAssignees,\n      })\n      .catch((err) => console.log(err));\n\n    students_Collection\n      .doc(studID)\n      .collection(\"Milestones\")\n      .doc(milestone.id)\n      .set({\n        Name: milestone.Name,\n      })\n      .catch((err) => console.log(err));\n\n    milestone.Tasks.forEach((task) => {\n      students_Collection\n        .doc(studID)\n        .collection(\"Milestones\")\n        .doc(milestone.id)\n        .collection(\"MilestoneTasks\")\n        .doc(task.id)\n        .set({\n          Task: task.Task,\n          Desc: task.Desc,\n          isComplete: false,\n        })\n        .catch((err) => console.log(err));\n    });\n\n    // Dispatch\n    const allAssignees = [...assignees];\n    const filtered = allAssignees.filter((a) => a !== studID);\n\n    dispatch(storeTeacherMilestonesAssigneesAction(filtered));\n  };\n\n  useEffect(() => {\n    if (!teacherAuthID) {\n      history.push(\"/teacherdash\");\n      return;\n    }\n\n    getAllStudents();\n  }, []);\n  return (\n    <div>\n      {/* Top Bar */}\n      <div>\n        <TopBar />\n      </div>\n\n      <div className=\"content\">\n        <button onClick={() => history.push(\"/teacher-milestones\")}>\n          Back\n        </button>\n        <h1>Assign Milestone Segment</h1>\n\n        <p>\n          Please choose the student you want to assign {milestone.Name} Miletone\n          Segment to.\n        </p>\n\n        <div>{handleStudentList()}</div>\n      </div>\n\n      {/* Footer */}\n      <div>\n        <DashFooter />\n      </div>\n    </div>\n  );\n}\n","/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Teachers/Articles/ArticlesMain.js",["578"],"import React, { useEffect } from \"react\";\n\nimport TopBar from \"../Dash/TopBar\";\nimport DashFooter from \"../Dash/DashFooter\";\n\nimport { useSelector } from \"react-redux\";\nimport { useHistory } from \"react-router-dom\";\nimport ArticleBlock from \"./ArticleBlock\";\n\nexport default function ArticlesMain() {\n  const teacherAuthID = useSelector((state) => state.storeTeacherAuthIDReducer);\n  const history = useHistory();\n\n  const articleState = useSelector(\n    (state) => state.storeTeacherArticlesGeneralInfoReducer\n  );\n\n  useEffect(() => {\n    if (!teacherAuthID) {\n      history.push(\"/teacherdash\");\n      return;\n    }\n  }, []);\n\n  return (\n    <div>\n      {/* Top Bar */}\n      <div>\n        <TopBar />\n      </div>\n\n      {/* Content */}\n      <div>\n        <div>\n          <input id=\"tbArticleSearch\" type=\"text\" placeholder=\"Search\" />\n          <button>Create New Article</button>\n        </div>\n        <div>\n          {articleState.map((art, i) => {\n            return (\n              <ArticleBlock key={i} mainTopic={art.MainTopic} desc={art.Desc} />\n            );\n          })}\n        </div>\n      </div>\n\n      {/* Footer */}\n      <div>\n        <DashFooter />\n      </div>\n    </div>\n  );\n}\n","/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Teachers/Settings/SettingsMain.js",[],"/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Students/Footer.js",[],"/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Teachers/Dash/AnnouncementBox.js",[],["579","580"],"/Users/jesusjimenez/Creative/MusicProject/musicapp/src/utils/tools.js",[],"/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Teachers/Profile/ProfileFeedEdit.js",["581"],"import React, { useEffect } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { useHistory } from \"react-router-dom\";\nimport { storeProfileFeedPostDataAction } from \"../../../redux/actions\";\nimport { teachers_Collection } from \"../../../utils/firebase\";\nimport GetToday from \"../../GetToday\";\n\nexport default function ProfileFeedEdit() {\n  const teacherAuthID = useSelector((state) => state.storeTeacherAuthIDReducer);\n  const history = useHistory();\n  const dispatch = useDispatch();\n\n  //   States\n  const singlePostState = useSelector(\n    (state) => state.storeProfileFeedSinglePostDataReducer\n  );\n  const allPostsState = useSelector(\n    (state) => state.storeProfileFeedPostDataReducer\n  );\n\n  const saveSinglePost = () => {\n    const postText = document.querySelector(\"#tbPostText\").value;\n    const postObj = {\n      ...singlePostState,\n      Text: postText,\n      Date: GetToday(),\n    };\n    // Save to DB\n    teachers_Collection\n      .doc(teacherAuthID)\n      .collection(\"Profile\")\n      .doc(\"Feed\")\n      .collection(\"Posts\")\n      .doc(singlePostState.id)\n      .set({\n        Likes: singlePostState.Likes,\n        Text: postText,\n        Date: GetToday(),\n      })\n      .catch((err) => console.log(err));\n\n    allPostsState.forEach((post) => {\n      if (post.id === singlePostState.id) {\n        post = {\n          ...postObj,\n        };\n        dispatch(storeProfileFeedPostDataAction(allPostsState));\n      }\n    });\n\n    history.push(\"/teacher-profile/feed\");\n  };\n\n  // REMOVE\n  const removeSinglePost = () => {\n    const postID = singlePostState.id;\n\n    teachers_Collection\n      .doc(teacherAuthID)\n      .collection(\"Profile\")\n      .doc(\"Feed\")\n      .collection(\"Posts\")\n      .doc(postID)\n      .delete()\n      .catch((err) => console.log(err));\n\n    const all = [...allPostsState];\n    const newArray = all.filter((post) => post.id !== postID);\n\n    dispatch(storeProfileFeedPostDataAction(newArray));\n    history.push(\"/teacher-profile/feed\");\n  };\n\n  // HANDLE\n  const handleCurrPage = () => {\n    let feedBtn = document.querySelector(\"#link-feed\");\n    feedBtn.classList.add(\"navy-back\");\n\n    let aboutBtn = document.querySelector(\"#link-about\");\n    aboutBtn.classList.remove(\"navy-back\");\n\n    let awardsBtn = document.querySelector(\"#link-awards\");\n    awardsBtn.classList.remove(\"navy-back\");\n\n    let galleryBtn = document.querySelector(\"#link-gallery\");\n    galleryBtn.classList.remove(\"navy-back\");\n\n    let reviewsBtn = document.querySelector(\"#link-reviews\");\n    reviewsBtn.classList.remove(\"navy-back\");\n  };\n\n  useEffect(() => {\n    if (!teacherAuthID) {\n      history.push(\"/teacherdash\");\n      return;\n    }\n\n    handleCurrPage();\n  }, []);\n\n  return (\n    <div className=\"post-edit-wrapper\">\n      <button\n        className=\"btn-back maroon-back\"\n        onClick={() => {\n          history.push(\"/teacher-profile/feed\");\n        }}\n      >\n        Back\n      </button>\n\n      <div className=\"post-create\">\n        <h1 className=\"post-create-head\">Edit Post</h1>\n        <textarea\n          className=\"ta\"\n          id=\"tbPostText\"\n          defaultValue={singlePostState.Text}\n        ></textarea>\n        <div className=\"btn-wrapper\">\n          \n          <button className=\"btn-remove\" onClick={removeSinglePost}>\n            Remove\n          </button>\n          <button className=\"btn-dark\" onClick={saveSinglePost}>\n            Save\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n}\n","/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Teachers/Invoices/InvoiceBlock.js",[],"/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Teachers/Groups/GroupFeedEdit.js",["582","583"],"/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Students/Profile/ProfileAboutView.js",["584","585"],"import React, { useEffect } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { useHistory } from \"react-router-dom\";\nimport {\n  storeStudentAboutAction,\n  storeStudentExpAction,\n} from \"../../../redux/actions\";\nimport { students_Collection } from \"../../../utils/firebase\";\nimport { firebaseLooper } from \"../../../utils/tools\";\n\nexport default function ProfileAboutView() {\n  const studentAuthID = useSelector((state) => state.storeStudentAuthIDReducer);\n  const user = useSelector((state) => state.storeStudentUserDataReducer);\n  const history = useHistory();\n  const dispatch = useDispatch();\n\n  const about = useSelector((state) => state.storeStudentAboutReducer);\n  const exps = useSelector((state) => state.storeStudentExpReducer);\n\n  // GET\n  const getAllStudentAbout = () => {\n    students_Collection\n      .doc(studentAuthID)\n      .collection(\"Profile\")\n      .get()\n      .then((snapshot) => {\n        const data = firebaseLooper(snapshot);\n        data.forEach((d) => {\n          if (d.id === \"About\") {\n            dispatch(storeStudentAboutAction(d));\n          }\n        });\n      })\n      .catch((err) => console.log(err));\n  };\n  const getAllStudentExp = () => {\n    students_Collection\n      .doc(studentAuthID)\n      .collection(\"Profile\")\n      .doc(\"Experience\")\n      .collection(\"ExpBlocks\")\n      .get()\n      .then((snapshot) => {\n        const data = firebaseLooper(snapshot);\n        dispatch(storeStudentExpAction(data));\n      })\n      .catch((err) => console.log(err));\n  };\n\n  //   HANDLE\n  const handleExpBlocks = () => {\n    return exps.map((exp, i) => {\n      return (\n        <div key={i}>\n          <h3>{exp.Institution}</h3>\n          <p>{exp.Desc}</p>\n          <p>Started: {exp.Start.toDate().toString().substr(4, 11)}</p>\n          <p>Ended: {exp.End.toDate().toString().substr(4, 11)}</p>\n        </div>\n      );\n    });\n  };\n  const handleInstruments = () => {\n    if (about.Instruments) {\n      return about.Instruments.map((ins, i) => {\n        return <li key={i}>{ins}</li>;\n      });\n    }\n  };\n\n  useEffect(() => {\n    if (!studentAuthID) {\n      history.push(\"/studentdash\");\n      return;\n    }\n\n    getAllStudentAbout();\n    getAllStudentExp();\n  }, []);\n\n  return (\n    <div>\n      <button onClick={() => history.push(\"/student-profile/about-edit\")}>\n        Edit\n      </button>\n      <br />\n      {/* About */}\n      <div>\n        <h2>About</h2>\n        <p>{about.About}</p>\n      </div>\n\n      {/* Experience */}\n      <div>\n        <h2>Experience</h2>\n        <div>{handleExpBlocks()}</div>\n      </div>\n\n      {/* Personal */}\n      <div>\n        <h2>Personal</h2>\n        <p>{about.Location}</p>\n        <h2>Instruments</h2>\n        {handleInstruments()}\n        <p>\n          Joined:{\" \"}\n          {about.Joined ? about.Joined.toDate().toString().substr(4, 11) : null}\n        </p>\n      </div>\n    </div>\n  );\n}\n","/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/TeacherDash.js",["586","587","588","589","590","591"],"import React, { useEffect } from \"react\";\n\nimport TopBar from \"./Teachers/Dash/TopBar\";\nimport AnnouncementBox from \"./Teachers/Dash/AnnouncementBox\";\nimport SimpleStats from \"./Teachers/Dash/SimpleStats\";\nimport RecentActivity from \"./Teachers/Dash/RecentActivity\";\nimport RecentInvoices from \"./Teachers/Dash/RecentInvoices\";\nimport Earnings from \"./Teachers/Dash/Earnings\";\nimport Achievement from \"./Teachers/Dash/Achievement\";\nimport UpcomingEvents from \"./Teachers/Dash/UpcomingEvents\";\n\nimport DashFooter from \"./Teachers/Dash/DashFooter\";\nimport \"./TeacherDash.css\";\n\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { useHistory } from \"react-router-dom\";\nimport {\n  storeTeacherAuthIDAction,\n  storeTeacherForumsGeneralInfoAction,\n  storeTeacherSettingsGeneralInfoAction,\n  storeTeacherStatisticsGeneralInfoAction,\n  userDataAction,\n  storeAccountTypeAction,\n  isLoggedInAction,\n} from \"../redux/actions\";\n\nimport {\n  teachers_Collection,\n  groups_Collection,\n  users_Collection,\n} from \"../utils/firebase\";\nimport { firebaseLooper } from \"../utils/tools\";\n\nexport default function TeacherDash() {\n  const dispatch = useDispatch();\n  const history = useHistory();\n\n  const teacherAuthID = useSelector((state) => state.storeTeacherAuthIDReducer);\n  const state = useSelector(\n    (state) => state.storeTeacherStudentGeneralInfoReducer\n  );\n  // All Data Needed\n\n  // Student Collection\n  const getAllUserData = () => {\n    users_Collection\n      .where(\"AuthID\", \"==\", teacherAuthID)\n      .get()\n      .then((snapshot) => {\n        const data = firebaseLooper(snapshot);\n        dispatch(userDataAction(data[0]));\n        dispatch(storeTeacherAuthIDAction(data[0].AuthID));\n       \n      })\n      .catch((err) => console.log(err));\n  };\n  const getAllStatisticData = () => {\n    const statistics_Collection = teachers_Collection\n      .doc(teacherAuthID)\n      .collection(\"Statistics\");\n    statistics_Collection\n      .get()\n      .then((snapshot) => {\n        const data = firebaseLooper(snapshot);\n        dispatch(storeTeacherStatisticsGeneralInfoAction(data));\n      })\n      .catch((err) => console.log(err));\n  };\n  const getAllSettingData = () => {\n    const settings_Collection = teachers_Collection\n      .doc(teacherAuthID)\n      .collection(\"Settings\");\n    settings_Collection\n      .get()\n      .then((snapshot) => {\n        const data = firebaseLooper(snapshot);\n        dispatch(storeTeacherSettingsGeneralInfoAction(data));\n      })\n      .catch((err) => console.log(err));\n  };\n\n  useEffect(() => {\n    if (!teacherAuthID) {\n      history.push(\"/login\");\n      return;\n    }\n    getAllUserData();\n    getAllStatisticData();\n    getAllSettingData();\n  }, []);\n\n  return (\n    //   This entire component will have a background. The pieces inside will be another color, in chunks.\n    <div>\n      {/* Top Bar */}\n      <div>\n        <TopBar />\n      </div>\n\n      {/* Main Content */}\n      <div className=\"content\">\n        {/* Announcement Box */}\n        <div>\n          <AnnouncementBox />\n        </div>\n\n        {/* Simple Stats */}\n        <div>\n          <SimpleStats />\n        </div>\n\n        {/* Recent Student,Group,Forum Activity */}\n        <div>\n          <RecentActivity />\n        </div>\n\n        {/* Recent Invoices */}\n        <div>\n          <RecentInvoices />\n        </div>\n\n        {/* Earnings, Achievement, Upcoming Events*/}\n        <div>\n          {/* Earnings */}\n          <div>\n            <Earnings />\n          </div>\n\n          {/* Achievement */}\n          <div>\n            <Achievement />\n          </div>\n\n          {/* Upcoming Events */}\n          <div>\n            <UpcomingEvents />\n          </div>\n        </div>\n      </div>\n\n      {/* Footer */}\n      <DashFooter />\n    </div>\n  );\n}\n","/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Students/Assignments/StudentAssignmentView.js",["592","593"],"import React, { useEffect } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { useHistory } from \"react-router-dom\";\n\nimport TopBar from \"../TopBar\";\nimport Footer from \"../Footer\";\nimport GetToday from \"../../GetToday\";\n\nimport Notice from \"../../MiscComponents/Notice\";\n\nimport {\n  storeStudentAssignmentPracticeRatingAction,\n  storeStudentAssignmentsInfoAction,\n} from \"../../../redux/actions\";\nimport { students_Collection } from \"../../../utils/firebase\";\nimport { firebaseLooper } from \"../../../utils/tools\";\n\nexport default function StudentAssignmentView() {\n  const studentAuthID = useSelector((state) => state.storeStudentAuthIDReducer);\n  const user = useSelector((state) => state.storeStudentUserDataReducer);\n  const history = useHistory();\n  const dispatch = useDispatch();\n\n  const assignment = useSelector(\n    (state) => state.storeStudentSingleAssignmentReducer\n  );\n  const rating = useSelector(\n    (state) => state.storeStudentAssignmentPracticeRatingReducer\n  );\n  const assignmentsInfo = useSelector(\n    (state) => state.storeStudentAssignmentsInfoReducer\n  );\n\n  // HANDLE\n  const handleAssignmentDetails = () => {\n    if (assignment.Type === \"Textual\") {\n      return (\n        <div>\n          <h3>Prompt:</h3>\n          <h4>{assignment.Text}</h4>\n\n          <h3>Response:</h3>\n          <textarea\n            id=\"taTextualRes\"\n            placeholder=\"Type response here...\"\n          ></textarea>\n\n          <button>Submit</button>\n        </div>\n      );\n    } else if (assignment.Type === \"Practice\") {\n      return (\n        <div>\n          <h3>Prompt:</h3>\n          <h4>{assignment.Text}</h4>\n\n          <h3>Repertoire:</h3>\n          <p>{assignment.Repertoire}</p>\n\n          <h3>Composer:</h3>\n          <p>{assignment.Composer}</p>\n\n          <h3>Tempo:</h3>\n          <p>{assignment.Tempo}</p>\n\n          <Notice message=\"Before you continue, please make sure to complete the assignment. The form below will require the results of your practice\" />\n\n          {/* Survey */}\n          <div>\n            <h3>How long did you practice this assignment?</h3>\n            <input\n              id=\"tbPracTime\"\n              type=\"text\"\n              placeholder=\"Practice Time\"\n            />{\" \"}\n            minutes\n            <h3>\n              How would you rate your overall practice for this assignment?\n            </h3>\n            <p>\n              1 - Practice was not effective. <br />\n              10 - Practice was very effective.\n            </p>\n            <div>\n              <button id=\"1\" onClick={handleRating}>\n                1\n              </button>\n              <button id=\"2\" onClick={handleRating}>\n                2\n              </button>\n              <button id=\"3\" onClick={handleRating}>\n                3\n              </button>\n              <button id=\"4\" onClick={handleRating}>\n                4\n              </button>\n              <button id=\"5\" onClick={handleRating}>\n                5\n              </button>\n              <button id=\"6\" onClick={handleRating}>\n                6\n              </button>\n              <button id=\"7\" onClick={handleRating}>\n                7\n              </button>\n              <button id=\"8\" onClick={handleRating}>\n                8\n              </button>\n              <button id=\"9\" onClick={handleRating}>\n                9\n              </button>\n              <button id=\"10\" onClick={handleRating}>\n                10\n              </button>\n            </div>\n            <p>{rating !== \"\" ? `Rating: ${rating}` : null}</p>\n            <h3>Any concerns with your practice?</h3>\n            <textarea\n              id=\"taPracticeConcerns\"\n              placeholder=\"Type message here...\"\n            ></textarea>\n            <br />\n            <br />\n            <button className=\"btn-navy\" onClick={submitAssignment}>\n              Submit Assignment\n            </button>\n          </div>\n        </div>\n      );\n    }\n  };\n\n  const handleRating = (event) => {\n    const ra = event.target.getAttribute(\"id\");\n\n    dispatch(storeStudentAssignmentPracticeRatingAction(ra));\n  };\n\n  //   POST\n  const submitAssignment = () => {\n    if (assignment.Type === \"Textual\") {\n      const response = document.querySelector(\"#taTextualRes\").value;\n\n      students_Collection\n        .doc(studentAuthID)\n        .collection(\"AssignmentsInfo\")\n        .where(\"Name\", \"==\", assignment.Name)\n        .get()\n        .then((snapshot) => {\n          const resData = firebaseLooper(snapshot);\n          resData.forEach((data) => {\n            students_Collection\n              .doc(studentAuthID)\n              .collection(\"AssignmentsInfo\")\n              .doc(data.id)\n              .update({\n                isComplete: true,\n                Response: response,\n                CompletionDate: GetToday(),\n              })\n              .catch((err) => console.log(err));\n          });\n        })\n        .catch((err) => console.log(err));\n    } else if (assignment.Type === \"Practice\") {\n      const pracTime = parseInt(\n        document.querySelector(\"#tbPracTime\").value,\n        10\n      );\n      const ra = rating;\n      const concerns = document.querySelector(\"#taPracticeConcerns\").value;\n\n      // Save to DB\n\n      students_Collection\n        .doc(studentAuthID)\n        .collection(\"AssignmentsInfo\")\n        .where(\"Name\", \"==\", assignment.Name)\n        .get()\n        .then((snapshot) => {\n          const resData = firebaseLooper(snapshot);\n          resData.forEach((data) => {\n            students_Collection\n              .doc(studentAuthID)\n              .collection(\"AssignmentsInfo\")\n              .doc(data.id)\n              .update({\n                isComplete: true,\n                Time: pracTime,\n                Rating: ra,\n                Concerns: concerns,\n                CompletionDate: GetToday(),\n              })\n              .catch((err) => console.log(err));\n          });\n        })\n        .catch((err) => console.log(err));\n    }\n\n    const assignmentsInfoThings = [...assignmentsInfo];\n    assignmentsInfoThings.forEach((a) => {\n      if (a.Name === assignment.Name) {\n        a.isComplete = true;\n      }\n    });\n    dispatch(storeStudentAssignmentsInfoAction(assignmentsInfoThings));\n\n    history.push(\"/student-assignments\");\n  };\n\n  useEffect(() => {\n    if (!studentAuthID) {\n      history.push(\"/studentdash\");\n      return;\n    }\n  }, []);\n  return (\n    <div>\n      {/* Top Bar */}\n      <div>\n        <TopBar />\n      </div>\n\n      {/* Content */}\n      <div>\n        <h1>{assignment.Name}</h1>\n        <p>{assignment.Desc}</p>\n        <div>{handleAssignmentDetails()}</div>\n      </div>\n\n      {/* Footer */}\n      <div>\n        <Footer />\n      </div>\n    </div>\n  );\n}\n","/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Teachers/Assignments/AssignmentView.js",["594"],"import React, { useEffect } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { useHistory } from \"react-router-dom\";\nimport { firebaseLooper } from \"../../../utils/tools\";\nimport {\n  students_Collection,\n  teachers_Collection,\n} from \"../../../utils/firebase\";\n\nimport TopBar from \"../Dash/TopBar\";\nimport DashFooter from \"../Dash/DashFooter\";\nimport {\n  storeTeacherAssignmentAssigneesAction,\n  storeTeacherAssignmentsGeneralInfoAction,\n  storeTeacherStudentGeneralInfoAction,\n  toggleAssigneeFormAction,\n} from \"../../../redux/actions\";\nimport RandomString from \"../../RandomString\";\nimport firebase from \"../../../utils/firebase\";\n\nexport default function AssignmentView() {\n  const teacherAuthID = useSelector((state) => state.storeTeacherAuthIDReducer);\n  const history = useHistory();\n  const dispatch = useDispatch();\n\n  const toggleAssigneeForm = useSelector(\n    (state) => state.toggleAssigneeFormReducer\n  );\n\n  const assignment = useSelector(\n    (state) => state.storeTeacherSingleAssignmentReducer\n  );\n  const students = useSelector(\n    (state) => state.storeTeacherStudentGeneralInfoReducer\n  );\n  const assignees = useSelector(\n    (state) => state.storeTeacherAssignmentAssigneesReducer\n  );\n\n  //   HANDLE\n  const handleAssignment = () => {\n    return (\n      <div>\n        {assignment.Date ? (\n          <p>Assigned: {assignment.Date.toDate().toString().substr(4, 11)}</p>\n        ) : null}\n        {assignment.Due ? (\n          <p>Due: {assignment.Due.toDate().toString().substr(4, 11)}</p>\n        ) : null}\n        <p>Assignment Type: {assignment.Type}</p>\n        <div>{handleAssignmentType()}</div>\n        <div>\n          <h3>Assignees:</h3>\n          {assignment.Assignees\n            ? assignees.map((stud, i) => {\n                return <p key={i}>{stud}</p>;\n              })\n            : null}\n        </div>\n      </div>\n    );\n  };\n  const handleAssignmentType = () => {\n    if (assignment.Type === \"Textual\") {\n      return (\n        <div>\n          <h3>Assignment:</h3>\n          <p>{assignment.Text}</p>\n        </div>\n      );\n    } else if (assignment.Type === \"Practice\") {\n      return (\n        <div>\n          <div>\n            <h3>Assignment:</h3>\n            <p>{assignment.Text}</p>\n          </div>\n          <div>\n            <h3>Repertoire:</h3>\n            <p>{assignment.Repertoire}</p>\n          </div>\n          <div>\n            <h3>Composer:</h3>\n            <p>{assignment.Composer}</p>\n          </div>\n          <div>\n            <h3>Tempo:</h3>\n            <p>{assignment.Tempo}</p>\n          </div>\n          <div>\n            <h3>Max Practice Time</h3>\n            <p>{assignment.MaxTime}</p>\n          </div>\n        </div>\n      );\n    }\n  };\n  const handleAssigneeForm = () => {\n    if (assignees.length > 0) {\n      const studs = [...students];\n      const distinct = studs.filter((item) => !assignees.includes(item.id));\n\n      return distinct.map((dis, i) => {\n        return (\n          <div key={i}>\n            <p>{dis.id}</p>\n            <button onClick={addAssignee} id={dis.id}>\n              Assign\n            </button>\n          </div>\n        );\n      });\n    } else {\n      return students.map((stud, i) => {\n        return (\n          <div key={i}>\n            <p>{stud.id}</p>\n            <button onClick={addAssignee} id={stud.id}>\n              Assign\n            </button>\n          </div>\n        );\n      });\n    }\n  };\n\n  // GET\n  const getAllStudents = () => {\n    teachers_Collection\n      .doc(teacherAuthID)\n      .collection(\"Students\")\n      .get()\n      .then((snapshot) => {\n        const studList = firebaseLooper(snapshot);\n        dispatch(storeTeacherStudentGeneralInfoAction(studList));\n      })\n      .catch((err) => console.log(err));\n  };\n\n  // POST\n  const addAssignee = (event) => {\n    let valid = true;\n    const studID = event.target.getAttribute(\"id\");\n    assignees.forEach((assignee) => {\n      if (studID === assignee) {\n        valid = false;\n      }\n    });\n\n    if (valid) {\n      const rand1 = RandomString();\n      const rand2 = RandomString();\n      const assInfoID = `AssInfo${rand1}${rand2}`;\n\n      // Save to DB\n\n      students_Collection\n        .doc(studID)\n        .collection(\"AssignmentsInfo\")\n        .doc(assInfoID)\n        .set({\n          Teacher: teacherAuthID,\n          AssID: assignment.id,\n          Name: assignment.Name,\n          Desc: assignment.Desc,\n          isComplete: false,\n        })\n        .catch((err) => console.log(err));\n\n      teachers_Collection\n        .doc(teacherAuthID)\n        .collection(\"Assignments\")\n        .doc(assignment.id)\n        .update({\n          Assignees: firebase.firestore.FieldValue.arrayUnion(studID),\n        })\n        .catch((err) => console.log(err));\n\n      const allAssignees = [...assignment.Assignees];\n      allAssignees.push(studID);\n      dispatch(storeTeacherAssignmentAssigneesAction(allAssignees));\n\n      const tempObj = {\n        ...assignment,\n        Assignees: allAssignees,\n      };\n\n      dispatch(storeTeacherAssignmentsGeneralInfoAction(tempObj));\n    }\n  };\n\n  //   NAV\n  const navAssignmentEdit = () => {\n    history.push(\"teacher-assignment-edit\");\n  };\n\n  useEffect(() => {\n    if (!teacherAuthID) {\n      history.push(\"/teacherdash\");\n      return;\n    }\n\n    getAllStudents();\n  }, []);\n  return (\n    <div>\n      {/* Top Bar */}\n      <div>\n        <TopBar />\n      </div>\n      <button\n        className=\"btn-lime\"\n        onClick={() => history.push(\"/teacher-assignments\")}\n      >\n        Back\n      </button>\n      <button onClick={navAssignmentEdit}>Edit Assignment</button>\n      <h1>{assignment.Name}</h1>\n      <div>{handleAssignment()}</div>\n      <br />\n      <div>\n        <button\n          onClick={() => dispatch(toggleAssigneeFormAction())}\n          className=\"btn-navy\"\n        >\n          {toggleAssigneeForm ? \"Close\" : \"Add Assignee\"}\n        </button>\n        {toggleAssigneeForm ? handleAssigneeForm() : null}\n      </div>\n\n      {/* Footer */}\n      <div>\n        <DashFooter />\n      </div>\n    </div>\n  );\n}\n",["595","596"],"/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Teachers/Messages/MessageThreadView.js",["597"],"import React, { useEffect } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { useHistory } from \"react-router-dom\";\n\nimport TopBar from \"../Dash/TopBar\";\nimport DashFooter from \"../Dash/DashFooter\";\nimport GetToday from \"../../GetToday\";\nimport RandomString from \"../../RandomString\";\nimport {\n  students_Collection,\n  teachers_Collection,\n} from \"../../../utils/firebase\";\nimport { storeTeacherSingleThreadAction } from \"../../../redux/actions\";\nimport { firebaseLooper } from \"../../../utils/tools\";\n\nexport default function MessageThreadView() {\n  const teacherAuthID = useSelector((state) => state.storeTeacherAuthIDReducer);\n  const history = useHistory();\n  const dispatch = useDispatch();\n\n  const thread = useSelector((state) => state.storeTeacherSingleThreadReducer);\n\n  //   HANDLE\n  const handleMessageList = () => {\n    if (thread.Messages) {\n      return thread.Messages.map((message, i) => {\n        return (\n          <div key={i}>\n            <h4\n              style={\n                message.Sender === teacherAuthID\n                  ? { color: \"blue\" }\n                  : { color: \"rgba(0,0,0,0.6)\" }\n              }\n            >\n              {message.Sender}\n            </h4>\n            <p>{message.Text}</p>\n          </div>\n        );\n      });\n    }\n  };\n\n  //   POST\n  const sendMessage = () => {\n    const message = document.querySelector(\"#tbMessage\").value;\n    const rand1 = RandomString();\n    const rand2 = RandomString();\n    const messID = `Mess${rand1}${rand2}`;\n    // Save to Teacher DB\n    teachers_Collection\n      .doc(teacherAuthID)\n      .collection(\"Messages\")\n      .doc(thread.id)\n      .collection(\"MessageBlocks\")\n      .doc(messID)\n      .set({\n        Sender: teacherAuthID,\n        Text: message,\n        Receiver: thread.Recipient,\n        Date: GetToday(),\n      })\n      .catch((err) => console.log(err));\n\n    // Save to Student DB\n    students_Collection\n      .doc(thread.Recipient)\n      .collection(\"Messages\")\n      .where(\"Recipient\", \"==\", teacherAuthID)\n      .get()\n      .then((snapshot) => {\n        const data = firebaseLooper(snapshot);\n        if (snapshot.size > 0) {\n          data.forEach((d) => {\n            if (d.Recipient === teacherAuthID) {\n              students_Collection\n                .doc(thread.Recipient)\n                .collection(\"Messages\")\n                .doc(d.id)\n                .collection(\"MessageBlocks\")\n                .doc(messID)\n                .set({\n                  Sender: teacherAuthID,\n                  Text: message,\n                  Receiver: thread.Recipient,\n                  Date: GetToday(),\n                })\n                .catch((err) => console.log(err));\n            }\n          });\n        } else {\n          students_Collection\n            .doc(thread.Recipient)\n            .collection(\"Messages\")\n            .doc(thread.id)\n            .set({\n              Recipient: thread.Recipient,\n            })\n            .catch((err) => console.log(err));\n\n          students_Collection\n            .doc(thread.Recipient)\n            .collection(\"Messages\")\n            .doc(thread.id)\n            .collection(\"MessageBlocks\")\n            .doc(messID)\n            .set({\n              Sender: teacherAuthID,\n              Text: message,\n              Receiver: thread.Recipient,\n              Date: GetToday(),\n            })\n            .catch((err) => console.log(err));\n        }\n      })\n      .catch((err) => console.log(err));\n\n    //   Dispatch\n    let allMess = [];\n    if (thread.Messages) {\n      allMess = [...thread.Messages];\n    }\n    allMess.push({\n      id: messID,\n      Sender: teacherAuthID,\n      Text: message,\n      Receiver: thread.Recipient,\n      Date: GetToday(),\n    });\n\n    const tempObj = { ...thread };\n    tempObj.Messages = allMess;\n\n    dispatch(storeTeacherSingleThreadAction(tempObj));\n    document.querySelector(\"#tbMessage\").value = \"\";\n  };\n\n  useEffect(() => {\n    if (!teacherAuthID) {\n      history.push(\"/teacherdash\");\n      return;\n    }\n  }, []);\n  return (\n    <div>\n      {/* Top Bar */}\n      <div>\n        <TopBar />\n      </div>\n\n      {/* Thread */}\n      <div>\n        <div>\n          <button onClick={() => history.push(\"/teacher-messages\")}>\n            Back\n          </button>\n          <h1>Recipient: {thread.Recipient}</h1>\n        </div>\n\n        <div>{handleMessageList()}</div>\n        <hr />\n        <div>\n          <input\n            id=\"tbMessage\"\n            type=\"text\"\n            placeholder=\"Type message here...\"\n          />\n          <button onClick={sendMessage}>Send</button>\n        </div>\n      </div>\n\n      {/* Footer */}\n      <div>\n        <DashFooter />\n      </div>\n    </div>\n  );\n}\n","/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/GetToday.js",[],"/Users/jesusjimenez/Creative/MusicProject/musicapp/src/utils/firebase.js",[],"/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Teachers/Profile/ProfileAwardsView.js",["598"],"import React, { useEffect } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { useHistory } from \"react-router-dom\";\nimport { teachers_Collection } from \"../../../utils/firebase\";\nimport {\n  storeAwardListAction,\n  storeCertListAction,\n} from \"../../../redux/actions\";\nimport { firebaseLooper } from \"../../../utils/tools\";\n\nexport default function ProfileAwardsView() {\n  const teacherAuthID = useSelector((state) => state.storeTeacherAuthIDReducer);\n  const history = useHistory();\n  const dispatch = useDispatch();\n\n  const awards = useSelector((state) => state.storeAwardListReducer);\n  const certs = useSelector((state) => state.storeCertListReducer);\n\n  // GET\n  const getAllAwards = () => {\n    const awards_Collection = teachers_Collection\n      .doc(teacherAuthID)\n      .collection(\"Profile\")\n      .doc(\"Awards\")\n      .collection(\"AwardList\");\n    const cert_Collection = teachers_Collection\n      .doc(teacherAuthID)\n      .collection(\"Profile\")\n      .doc(\"Awards\")\n      .collection(\"CertificationList\");\n\n    awards_Collection\n      .get()\n      .then((snapshot) => {\n        const awardData = firebaseLooper(snapshot);\n        dispatch(storeAwardListAction(awardData));\n      })\n      .catch((err) => console.log(err));\n\n    cert_Collection\n      .get()\n      .then((snapshot) => {\n        const certData = firebaseLooper(snapshot);\n        dispatch(storeCertListAction(certData));\n      })\n      .catch((err) => console.log(err));\n  };\n\n  // HANDLE\n  const handleCurrPage = () => {\n    let feedBtn = document.querySelector(\"#link-feed\");\n    feedBtn.classList.remove(\"navy-back\");\n\n    let aboutBtn = document.querySelector(\"#link-about\");\n    aboutBtn.classList.remove(\"navy-back\");\n\n    let awardsBtn = document.querySelector(\"#link-awards\");\n    awardsBtn.classList.add(\"navy-back\");\n\n    let galleryBtn = document.querySelector(\"#link-gallery\");\n    galleryBtn.classList.remove(\"navy-back\");\n\n    let reviewsBtn = document.querySelector(\"#link-reviews\");\n    reviewsBtn.classList.remove(\"navy-back\");\n  };\n\n  useEffect(() => {\n    if (!teacherAuthID) {\n      history.push(\"/teacherdash\");\n      return;\n    }\n    getAllAwards();\n    handleCurrPage();\n  }, []);\n  return (\n    <div>\n      <div>\n        <button\n          onClick={() => {\n            history.push(\"/teacher-profile/edit-awards\");\n          }}\n        >\n          Edit\n        </button>\n      </div>\n      <div>\n        <h2>Awards</h2>\n        {awards.map((award, i) => {\n          return (\n            <div key={i}>\n              <h3>{award.Name}</h3>\n              <p>Location: {award.Location}</p>\n              <p>Date: {award.Date.toDate().toString().substr(4, 11)}</p>\n              <p>Description: {award.Desc}</p>\n            </div>\n          );\n        })}\n      </div>\n      <div>\n        <h2>Certifications</h2>\n        {certs.map((cert, i) => {\n          return (\n            <div key={i}>\n              <h3>{cert.Name}</h3>\n              <p>Location: {cert.Location}</p>\n              <p>Date: {cert.Date.toDate().toString().substr(4, 11)}</p>\n              <p>Description: {cert.Desc}</p>\n            </div>\n          );\n        })}\n      </div>\n    </div>\n  );\n}\n","/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Teachers/Profile/ProfileAwardsEdit.js",["599"],"import React, { useEffect } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { useHistory } from \"react-router-dom\";\nimport {\n  storeAwardListAction,\n  storeCertListAction,\n  toggleNewAwardFormAction,\n  toggleNewCertFormAction,\n} from \"../../../redux/actions\";\nimport { teachers_Collection } from \"../../../utils/firebase\";\n\nimport InputDateFormatter from \"../../InputDateFormatter\";\nimport RandomString from \"../../RandomString\";\nimport FirebaseDate from \"../../FirebaseDate\";\n\nexport default function ProfileAwardsEdit() {\n  const teacherAuthID = useSelector((state) => state.storeTeacherAuthIDReducer);\n  const history = useHistory();\n  const dispatch = useDispatch();\n\n  const awards = useSelector((state) => state.storeAwardListReducer);\n  const certs = useSelector((state) => state.storeCertListReducer);\n\n  const toggleAwardForm = useSelector(\n    (state) => state.toggleNewAwardFormReducer\n  );\n  const toggleCertForm = useSelector((state) => state.toggleNewCertFormReducer);\n\n  const applyNewAward = () => {\n    const awardName = document.querySelector(\"#tbAwardNameText\").value;\n    const awardLocation = document.querySelector(\"#tbAwardLocationText\").value;\n    const awardDate = document.querySelector(\"#daAwardDateNew\").value;\n    const awardDesc = document.querySelector(\"#taAwardDescText\").value;\n\n    const rand1 = RandomString();\n    const rand2 = RandomString();\n    const awardID = `Award${rand1}${rand2}`;\n\n    // Save to DB\n    teachers_Collection\n      .doc(teacherAuthID)\n      .collection(\"Profile\")\n      .doc(\"Awards\")\n      .collection(\"AwardList\")\n      .doc(awardID)\n      .set({\n        Name: awardName,\n        Location: awardLocation,\n        Date: FirebaseDate(awardDate),\n        Desc: awardDesc,\n      })\n      .catch((err) => console.log(err));\n\n    // Dispatch\n    const allAwards = [...awards];\n    allAwards.push({\n      id: awardID,\n      Name: awardName,\n      Location: awardLocation,\n      Date: FirebaseDate(awardDate),\n      Desc: awardDesc,\n    });\n\n    dispatch(storeAwardListAction(allAwards));\n    dispatch(toggleNewAwardFormAction());\n  };\n\n  const applyNewCert = () => {\n    const certName = document.querySelector(\"#tbCertNameText\").value;\n    const certLocation = document.querySelector(\"#tbCertLocationText\").value;\n    const certDate = document.querySelector(\"#daCertDateNew\").value;\n    const certDesc = document.querySelector(\"#taCertDescText\").value;\n\n    const rand1 = RandomString();\n    const rand2 = RandomString();\n    const certID = `Cert${rand1}${rand2}`;\n\n    // Save to DB\n    teachers_Collection\n      .doc(teacherAuthID)\n      .collection(\"Profile\")\n      .doc(\"Awards\")\n      .collection(\"CertificationList\")\n      .doc(certID)\n      .set({\n        Name: certName,\n        Location: certLocation,\n        Date: FirebaseDate(certDate),\n        Desc: certDesc,\n      })\n      .catch((err) => console.log(err));\n\n    // Dispatch\n    const allCerts = [...certs];\n    allCerts.push({\n      id: certID,\n      Name: certName,\n      Location: certLocation,\n      Date: FirebaseDate(certDate),\n      Desc: certDesc,\n    });\n\n    dispatch(storeCertListAction(allCerts));\n    dispatch(toggleNewCertFormAction());\n  };\n\n  // REMOVE\n  const removeAward = (event) => {\n    const awardID = event.target.getAttribute(\"id\");\n\n    teachers_Collection\n      .doc(teacherAuthID)\n      .collection(\"Profile\")\n      .doc(\"Awards\")\n      .collection(\"AwardList\")\n      .doc(awardID)\n      .delete()\n      .catch((err) => console.log(err));\n\n    const allAwards = [...awards];\n    const filteredAwards = allAwards.filter((a) => a.id !== awardID);\n\n    dispatch(storeAwardListAction(filteredAwards));\n  };\n  const removeCert = (event) => {\n    const certID = event.target.getAttribute(\"id\");\n\n    teachers_Collection\n      .doc(teacherAuthID)\n      .collection(\"Profile\")\n      .doc(\"Awards\")\n      .collection(\"CertificationList\")\n      .doc(certID)\n      .delete()\n      .catch((err) => console.log(err));\n\n    const allCerts = [...certs];\n    const filteredCerts = allCerts.filter((c) => c.id !== certID);\n\n    dispatch(storeCertListAction(filteredCerts));\n  };\n\n  const saveAllChanges = () => {\n    const allAwards = [];\n    const allCerts = [];\n\n    const awardCount = awards.length;\n    const certCount = certs.length;\n\n    // Save to DB\n    for (let i = 0; i < awardCount; i = i + 1) {\n      const tempObj = {\n        Name: document.querySelector(`#tbAwardName${i}`).value,\n        Location: document.querySelector(`#tbAwardLocation${i}`).value,\n        Date: FirebaseDate(document.querySelector(`#daAwardDate${i}`).value),\n        Desc: document.querySelector(`#taAwardDesc${i}`).value,\n      };\n\n      allAwards.push(tempObj);\n    }\n\n    console.log(allAwards);\n\n    for (let i = 0; i < certCount; i = i + 1) {\n      const tempObj = {\n        Name: document.querySelector(`#tbCertName${i}`).value,\n        Location: document.querySelector(`#tbCertLocation${i}`).value,\n        Date: FirebaseDate(document.querySelector(`#daCertDate${i}`).value),\n        Desc: document.querySelector(`#taCertDesc${i}`).value,\n      };\n\n      allCerts.push(tempObj);\n    }\n\n    allAwards.forEach((a, i) => {\n      teachers_Collection\n        .doc(teacherAuthID)\n        .collection(\"Profile\")\n        .doc(\"Awards\")\n        .collection(\"AwardList\")\n        .doc(awards[i].id)\n        .update({\n          Name: a.Name,\n          Location: a.Location,\n          Date: a.Date,\n          Desc: a.Desc,\n        })\n        .catch((err) => console.log(err));\n    });\n\n    allCerts.forEach((c, i) => {\n      teachers_Collection\n        .doc(teacherAuthID)\n        .collection(\"Profile\")\n        .doc(\"Awards\")\n        .collection(\"CertificationList\")\n        .doc(certs[i].id)\n        .update({\n          Name: c.Name,\n          Location: c.Location,\n          Date: c.Date,\n          Desc: c.Desc,\n        })\n        .catch((err) => console.log(err));\n    });\n\n    // Dispatch\n    dispatch(storeAwardListAction(allAwards));\n    dispatch(storeCertListAction(allCerts));\n\n    history.push(\"/teacher-profile/awards\");\n  };\n\n  // HANDLE\n  const handleCurrPage = () => {\n    let feedBtn = document.querySelector(\"#link-feed\");\n    feedBtn.classList.remove(\"navy-back\");\n\n    let aboutBtn = document.querySelector(\"#link-about\");\n    aboutBtn.classList.remove(\"navy-back\");\n\n    let awardsBtn = document.querySelector(\"#link-awards\");\n    awardsBtn.classList.add(\"navy-back\");\n\n    let galleryBtn = document.querySelector(\"#link-gallery\");\n    galleryBtn.classList.remove(\"navy-back\");\n\n    let reviewsBtn = document.querySelector(\"#link-reviews\");\n    reviewsBtn.classList.remove(\"navy-back\");\n  };\n\n  useEffect(() => {\n    if (!teacherAuthID) {\n      history.push(\"/teacherdash\");\n      return;\n    }\n\n    handleCurrPage();\n  }, []);\n  return (\n    <div>\n      <div>\n        <button\n          onClick={() => {\n            history.push(\"/teacher-profile/awards\");\n          }}\n        >\n          Back to Awards\n        </button>\n      </div>\n      <div>\n        <h2>Awards</h2>\n        {awards.map((award, i) => {\n          return (\n            <div key={i}>\n              <div>\n                <p>Award Name:</p>\n                <input\n                  id={`tbAwardName${i}`}\n                  type=\"text\"\n                  defaultValue={award.Name}\n                />\n              </div>\n              <div>\n                <p>Location: </p>\n                <input\n                  id={`tbAwardLocation${i}`}\n                  type=\"text\"\n                  defaultValue={award.Location}\n                />\n              </div>\n              <div>\n                <p>Date Received:</p>\n                <input\n                  id={`daAwardDate${i}`}\n                  type=\"date\"\n                  defaultValue={InputDateFormatter(award.Date)}\n                />\n              </div>\n              <div>\n                <p>Description:</p>\n                <textarea\n                  id={`taAwardDesc${i}`}\n                  defaultValue={award.Desc}\n                ></textarea>\n              </div>\n              <button id={award.id} onClick={removeAward}>\n                Remove\n              </button>\n              <hr />\n            </div>\n          );\n        })}\n\n        {/* New Award Form */}\n        {toggleAwardForm ? (\n          <div>\n            {/* Award Name */}\n            <div>\n              <p>Award Name:</p>\n              <input\n                id={`tbAwardNameText`}\n                type=\"text\"\n                placeholder=\"Award Name\"\n              />\n            </div>\n            {/* Award Location */}\n            <div>\n              <p>Location:</p>\n              <input\n                id={`tbAwardLocationText`}\n                type=\"text\"\n                placeholder=\"Location\"\n              />\n            </div>\n            {/* Award Date */}\n            <div>\n              <p>Date Received:</p>\n              <input id={`daAwardDateNew`} type=\"date\" />\n            </div>\n            {/* Award Desc */}\n            <div>\n              <p>Description:</p>\n              <textarea id={`taAwardDescText`} placeholder=\"Description\" />\n            </div>\n            <button onClick={applyNewAward}>Apply</button>\n            <button\n              onClick={() => {\n                dispatch(toggleNewAwardFormAction());\n              }}\n            >\n              Cancel\n            </button>\n          </div>\n        ) : (\n          <button\n            onClick={() => {\n              dispatch(toggleNewAwardFormAction());\n            }}\n          >\n            +\n          </button>\n        )}\n      </div>\n      <div>\n        <h2>Certifications</h2>\n        {certs.map((cert, i) => {\n          return (\n            <div key={i}>\n              <div>\n                <p>Certification Name:</p>\n                <input\n                  id={`tbCertName${i}`}\n                  type=\"text\"\n                  defaultValue={cert.Name}\n                />\n              </div>\n              <div>\n                <p>Location:</p>\n                <input\n                  id={`tbCertLocation${i}`}\n                  type=\"text\"\n                  defaultValue={cert.Location}\n                />\n              </div>\n              <div>\n                <p>Date Received:</p>\n                <input\n                  id={`daCertDate${i}`}\n                  type=\"date\"\n                  defaultValue={InputDateFormatter(cert.Date)}\n                />\n              </div>\n              <div>\n                <p>Description:</p>\n                <textarea\n                  id={`taCertDesc${i}`}\n                  defaultValue={cert.Desc}\n                ></textarea>\n              </div>\n              <button id={cert.id} onClick={removeCert}>\n                Remove\n              </button>\n              <hr />\n            </div>\n          );\n        })}\n\n        {/* New Cert Form */}\n        {toggleCertForm ? (\n          <div>\n            {/* Cert Name */}\n            <div>\n              <p>Certification Name:</p>\n              <input\n                id={`tbCertNameText`}\n                type=\"text\"\n                placeholder=\"Certification Name\"\n              />\n            </div>\n            {/* Cert Location */}\n            <div>\n              <p>Location:</p>\n              <input\n                id={`tbCertLocationText`}\n                type=\"text\"\n                placeholder=\"Location\"\n              />\n            </div>\n            {/* Cert Date */}\n            <div>\n              <p>Date Received:</p>\n              <input id={`daCertDateNew`} type=\"date\" />\n            </div>\n            {/* Date Desc */}\n            <div>\n              <p>Description:</p>\n              <textarea id={`taCertDescText`} placeholder=\"Description\" />\n            </div>\n            <button onClick={applyNewCert}>Apply</button>\n            <button\n              onClick={() => {\n                dispatch(toggleNewCertFormAction());\n              }}\n            >\n              Cancel\n            </button>\n          </div>\n        ) : (\n          <button\n            onClick={() => {\n              dispatch(toggleNewCertFormAction());\n            }}\n          >\n            +\n          </button>\n        )}\n      </div>\n      <hr />\n      <button onClick={saveAllChanges}>Save All Changes</button>\n    </div>\n  );\n}\n",["600","601"],"/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Teachers/Dash/TopBar.js",["602","603","604"],"import React, { useEffect } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { useHistory } from \"react-router-dom\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport {\n  faCommentAlt,\n  faBell,\n  faSignOutAlt,\n  faBookOpen,\n  faCalendarAlt,\n  faUserFriends,\n  faUser,\n  faStar,\n  faExclamationCircle,\n  faTimes,\n  faTimesCircle,\n} from \"@fortawesome/free-solid-svg-icons\";\nimport {\n  storeAccountTypeAction,\n  storeTeacherAuthIDAction,\n  isLoggedInAction,\n  storeTeacherNotificationsAction,\n  toggleTeacherNotificationsWindowAction,\n  storeTeacherAddStudentSearchResultAction,\n} from \"../../../redux/actions\";\n\nimport \"./TopBar.css\";\nimport { teachers_Collection } from \"../../../utils/firebase\";\nimport { firebaseLooper } from \"../../../utils/tools\";\n\nexport default function TopBar() {\n  const teacherAuthID = useSelector((state) => state.storeTeacherAuthIDReducer);\n  const history = useHistory();\n  const dispatch = useDispatch();\n\n  // States\n  const toggleNotifWin = useSelector(\n    (state) => state.toggleTeacherNotificationsWindowReducer\n  );\n  const notifications = useSelector(\n    (state) => state.storeTeacherNotificationsReducer\n  );\n\n  // GET\n  const getAllNotifications = () => {\n    teachers_Collection\n      .doc(teacherAuthID)\n      .collection(\"Notifications\")\n      .orderBy(\"Date\", \"desc\")\n      .get()\n      .then((snapshot) => {\n        const notifData = firebaseLooper(snapshot);\n        dispatch(storeTeacherNotificationsAction(notifData));\n      })\n      .catch((err) => console.log(err));\n  };\n\n  // HANDLE\n  const handleNotificationsList = () => {\n    return notifications.map((notif, i) => {\n      return (\n        <div className=\"notifPanel\" key={i}>\n          <div className=\"topPanel\">\n            <FontAwesomeIcon\n              className=\"iconNotif\"\n              icon={\n                notif.Icon === \"faBell\"\n                  ? faBell\n                  : notif.Icon === \"faUser\"\n                  ? faUser\n                  : notif.Icon === \"faStar\"\n                  ? faStar\n                  : notif.Icon === \"faExclamationCircle\"\n                  ? faExclamationCircle\n                  : null\n              }\n            />\n            <p className=\"notifText\">{notif.Text}</p>\n            <p className=\"notifDate\">\n              {notif.Date ? notif.Date.toDate().toString().substr(4, 11) : null}\n            </p>\n            <button className=\"notifDel\">\n              <FontAwesomeIcon className=\"notifDelIcon\" icon={faTimes} />\n            </button>\n          </div>\n          <div className=\"bottomPanel\">\n            {notif.Action === \"request\" ? (\n              <div className=\"btnsNotifReq\">\n                <button className=\"btnReq reqAccept\">Accept</button>\n                <button className=\"btnReq reqDecline\">Decline</button>\n              </div>\n            ) : notif.Action === \"navigate\" ? (\n              <div className=\"btnNotifNav\">\n                <button className=\"btnReq notifNav\">Go to Page</button>\n              </div>\n            ) : null}\n          </div>\n        </div>\n      );\n    });\n  };\n\n  useEffect(() => {\n    if (!teacherAuthID) {\n      history.push(\"/teacherdash\");\n      return;\n    }\n\n    getAllNotifications();\n  }, []);\n\n  const onLogOut = () => {\n    dispatch(storeAccountTypeAction(\"\"));\n    dispatch(storeTeacherAuthIDAction(\"\"));\n    dispatch(isLoggedInAction());\n    history.push(\"/login\");\n  };\n\n  return (\n    <div className=\"topbar-wrapper\">\n      <div>\n        <button class=\"btn-topbar\">\n          <FontAwesomeIcon icon={faCommentAlt} />\n        </button>\n        <button class=\"btn-topbar\">\n          <FontAwesomeIcon icon={faBookOpen} />\n        </button>\n        <button class=\"btn-topbar\">\n          <FontAwesomeIcon icon={faCalendarAlt} />\n        </button>\n        <button class=\"btn-topbar\">\n          <FontAwesomeIcon icon={faUserFriends} />\n        </button>\n      </div>\n      <div id=\"search-input\">\n        <input id=\"tbSearch\" type=\"text\" placeholder=\"Search...\" />\n      </div>\n      <div>\n        <button\n          onClick={() => dispatch(toggleTeacherNotificationsWindowAction())}\n          id=\"btnNotif\"\n          class=\"btn-topbar\"\n        >\n          <FontAwesomeIcon icon={faBell} />\n        </button>\n        {toggleNotifWin ? (\n          <div id=\"winNotifications\">{handleNotificationsList()}</div>\n        ) : null}\n      </div>\n      <div className=\"topbar-user\">\n        <p>Jesus Jimenez</p>\n        <p>Teacher</p>\n      </div>\n      <div>\n        <button onClick={onLogOut} class=\"btn-topbar red\">\n          <FontAwesomeIcon icon={faSignOutAlt} />\n        </button>\n      </div>\n    </div>\n  );\n}\n",["605","606"],"/Users/jesusjimenez/Creative/MusicProject/musicapp/src/App.js",["607","608"],"/Users/jesusjimenez/Creative/MusicProject/musicapp/src/index.js",[],"/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Students/Profile/StudentProfileMain.js",["609","610"],"import React, { useEffect } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { useHistory } from \"react-router-dom\";\nimport { Switch, Route, Link, useRouteMatch } from \"react-router-dom\";\n\nimport TopBar from \"../TopBar\";\nimport Footer from \"../Footer\";\nimport ProfileFeedView from \"../Profile/ProfileFeedView\";\nimport ProfileFeedEdit from \"../Profile/ProfileFeedEdit\";\nimport ProfileAboutView from \"../Profile/ProfileAboutView\";\nimport ProfileAboutEdit from \"../Profile/ProfileAboutEdit\";\nimport ProfileAwardsView from \"../Profile/ProfileAwardsView\";\nimport ProfileAwardsEdit from \"../Profile/ProfileAwardsEdit\";\n\nexport default function StudentProfileMain() {\n  const studentAuthID = useSelector((state) => state.storeStudentAuthIDReducer);\n  const user = useSelector((state) => state.storeStudentUserDataReducer);\n  const history = useHistory();\n  const dispatch = useDispatch();\n  const { url } = useRouteMatch();\n\n  useEffect(() => {\n    if (!studentAuthID) {\n      history.push(\"/studentdash\");\n      return;\n    }\n  }, []);\n\n  return (\n    <div>\n      {/* Top Bar */}\n      <div>\n        <TopBar />\n      </div>\n\n      {/* Cover Section */}\n      <div>\n        {/* Profile Photo */}\n        <img src=\"\" alt=\"\" />\n        {/* Full Name */}\n        <h3>\n          {user.FirstName} {user.LastName}\n        </h3>\n        <p>{user.AccountType}</p>\n      </div>\n\n      {/* Profile Options */}\n      <div>\n        <div>\n          <ul>\n            <Link to={`${url}/feed`}>Feed</Link>\n            <br />\n            <Link to={`${url}/about`}>About</Link>\n            <br />\n            <Link to={`${url}/awards`}>Awards</Link>\n            <br />\n            <Link to={`${url}/gallery`}>Gallery</Link>\n            <br />\n          </ul>\n        </div>\n\n        <div>\n          {/* ********************** */}\n\n          {/* Switch */}\n          <Switch>\n            {/* Feed */}\n            <Route path={`${url}/feed`}>\n              <ProfileFeedView />\n            </Route>\n            <Route path={`${url}/feed-edit`}>\n              <ProfileFeedEdit />\n            </Route>\n\n            {/* About */}\n            <Route path={`${url}/about`}>\n              <ProfileAboutView />\n            </Route>\n            <Route path={`${url}/about-edit`}>\n              <ProfileAboutEdit />\n            </Route>\n\n            {/* Awards */}\n            <Route path={`${url}/awards`}>\n              <ProfileAwardsView />\n            </Route>\n            <Route path={`${url}/awards-edit`}>\n              <ProfileAwardsEdit />\n            </Route>\n          </Switch>\n        </div>\n      </div>\n\n      {/* Footer */}\n      <div>\n        <Footer />\n      </div>\n    </div>\n  );\n}\n","/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Students/Messages/StudentMessageThreadView.js",["611","612"],"import React, { useEffect } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { useHistory } from \"react-router-dom\";\n\nimport TopBar from \"../TopBar\";\nimport Footer from \"../Footer\";\nimport RandomString from \"../../RandomString\";\nimport GetToday from \"../../GetToday\";\nimport {\n  students_Collection,\n  teachers_Collection,\n} from \"../../../utils/firebase\";\nimport { storeStudentSingleThreadAction } from \"../../../redux/actions\";\nimport { firebaseLooper } from \"../../../utils/tools\";\n\nexport default function StudentMessageThreadView() {\n  const studentAuthID = useSelector((state) => state.storeStudentAuthIDReducer);\n  const user = useSelector((state) => state.storeStudentUserDataReducer);\n  const history = useHistory();\n  const dispatch = useDispatch();\n\n  const thread = useSelector((state) => state.storeStudentSingleThreadReducer);\n\n  //   HANDLE\n  const handleMessages = () => {\n    if (thread.Messages) {\n      return thread.Messages.map((mess, i) => {\n        return (\n          <div key={i}>\n            <h4\n              style={\n                mess.Sender === studentAuthID\n                  ? { color: \"blue\" }\n                  : { color: \"rgba(0,0,0,0.6)\" }\n              }\n            >\n              {mess.Sender}\n            </h4>\n            <p>{mess.Text}</p>\n          </div>\n        );\n      });\n    }\n  };\n\n  //   POST\n  const sendMessage = () => {\n    const message = document.querySelector(\"#tbMessage\").value;\n    const rand1 = RandomString();\n    const rand2 = RandomString();\n    const messID = `Mess${rand1}${rand2}`;\n    // Save to Teacher DB\n    students_Collection\n      .doc(studentAuthID)\n      .collection(\"Messages\")\n      .doc(thread.id)\n      .collection(\"MessageBlocks\")\n      .doc(messID)\n      .set({\n        Sender: studentAuthID,\n        Text: message,\n        Receiver: thread.Recipient,\n        Date: GetToday(),\n      })\n      .catch((err) => console.log(err));\n\n    // Save to Teacher DB\n    teachers_Collection\n      .doc(thread.Recipient)\n      .collection(\"Messages\")\n      .where(\"Recipient\", \"==\", studentAuthID)\n      .get()\n      .then((snapshot) => {\n        const data = firebaseLooper(snapshot);\n        data.forEach((d) => {\n          if (d.Recipient === studentAuthID) {\n            teachers_Collection\n              .doc(thread.Recipient)\n              .collection(\"Messages\")\n              .doc(d.id)\n              .collection(\"MessageBlocks\")\n              .doc(messID)\n              .set({\n                Sender: studentAuthID,\n                Text: message,\n                Receiver: thread.Recipient,\n                Date: GetToday(),\n              })\n              .catch((err) => console.log(err));\n          }\n        });\n      })\n      .catch((err) => console.log(err));\n\n    //   Dispatch\n    let allMess = [...thread.Messages];\n    allMess.push({\n      id: messID,\n      Sender: studentAuthID,\n      Text: message,\n      Receiver: thread.Recipient,\n      Date: GetToday(),\n    });\n\n    const tempObj = { ...thread };\n    tempObj.Messages = allMess;\n\n    dispatch(storeStudentSingleThreadAction(tempObj));\n    document.querySelector(\"#tbMessage\").value = \"\";\n  };\n\n  useEffect(() => {\n    if (!studentAuthID) {\n      history.push(\"/studentdash\");\n      return;\n    }\n  }, []);\n  return (\n    <div>\n      {/* Top Bar */}\n      <div>\n        <TopBar />\n      </div>\n\n      <div>\n        <button onClick={() => history.push(\"/student-messages\")}>Back</button>\n        <h1>Recipient: {thread.Recipient}</h1>\n\n        {/* Messaages */}\n        <div>{handleMessages()}</div>\n\n        {/* input */}\n        <div>\n          <input\n            id=\"tbMessage\"\n            type=\"text\"\n            placeholder=\"Type message here...\"\n          />\n          <button onClick={sendMessage}>Send</button>\n        </div>\n      </div>\n\n      {/* Footer */}\n      <div>\n        <Footer />\n      </div>\n    </div>\n  );\n}\n","/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Teachers/Events/EventNew.js",["613","614"],"import React, { useEffect } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { useHistory } from \"react-router-dom\";\n\nimport TopBar from \"../Dash/TopBar\";\nimport DashFooter from \"../Dash/DashFooter\";\nimport GetToday from \"../../GetToday\";\nimport RandomString from \"../../RandomString\";\nimport InputDateFormatter from \"../../InputDateFormatter\";\nimport FirebaseDate from \"../../FirebaseDate\";\nimport { teachers_Collection } from \"../../../utils/firebase\";\nimport { storeTeacherEventsGeneralInfoAction } from \"../../../redux/actions\";\nimport { create } from \"sortablejs\";\n\nexport default function EventNew() {\n  const teacherAuthID = useSelector((state) => state.storeTeacherAuthIDReducer);\n  const history = useHistory();\n  const dispatch = useDispatch();\n\n  const events = useSelector(\n    (state) => state.storeTeacherEventsGeneralInfoReducer\n  );\n\n  //   POST\n  const createEvent = () => {\n    const rand1 = RandomString();\n    const rand2 = RandomString();\n    const eventID = `Event${rand1}${rand2}`;\n\n    const name = document.querySelector(\"#tbName\").value;\n    const desc = document.querySelector(\"#taDesc\").value;\n    const color = document.querySelector(\"#tbColor\").value;\n    const start = FirebaseDate(document.querySelector(\"#daStart\").value);\n    const end = FirebaseDate(document.querySelector(\"#daEnd\").value);\n\n    // Save to DB\n    teachers_Collection\n      .doc(teacherAuthID)\n      .collection(\"Events\")\n      .doc(eventID)\n      .set({\n        Name: name,\n        Desc: desc,\n        Color: color,\n        Start: start,\n        End: end,\n      })\n      .catch((err) => console.log(err));\n\n    //   Dispatch\n    const allEvents = [...events];\n    allEvents.push({\n      id: eventID,\n      Name: name,\n      Desc: desc,\n      Color: color,\n      Start: start,\n      End: end,\n    });\n\n    allEvents.sort((a, b) => (a.Start > b.Start ? 1 : -1));\n    dispatch(storeTeacherEventsGeneralInfoAction(allEvents));\n    history.push(\"/teacher-events\");\n  };\n\n  useEffect(() => {\n    if (!teacherAuthID) {\n      history.push(\"/teacherdash\");\n      return;\n    }\n  }, []);\n\n  return (\n    <div>\n      {/* Top Bar */}\n      <div>\n        <TopBar />\n      </div>\n\n      {/* Content */}\n      <div>\n        <h1>New Event</h1>\n\n        <div>\n          <h3>Name: </h3>\n          <input id=\"tbName\" type=\"text\" placeholder=\"Name\" />\n\n          <h3>Desc: </h3>\n          <textarea id=\"taDesc\" placeholder=\"Description\"></textarea>\n\n          <h3>Color: </h3>\n          <input id=\"tbColor\" type=\"text\" placeholder=\"Color\" />\n\n          <h3>Start: </h3>\n          <input\n            id={`daStart`}\n            type=\"date\"\n            defaultValue={InputDateFormatter(GetToday())}\n          />\n\n          <h3>End: </h3>\n          <input\n            id={`daEnd`}\n            type=\"date\"\n            defaultValue={InputDateFormatter(GetToday())}\n          />\n          <br />\n          <br />\n          <button onClick={createEvent} className=\"btn-navy\">\n            Create Event\n          </button>\n        </div>\n      </div>\n\n      {/* Footer */}\n      <div>\n        <DashFooter />\n      </div>\n    </div>\n  );\n}\n","/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Teachers/Groups/GroupAboutView.js",["615","616"],"/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Teachers/Statistics/StudentStats.js",["617"],"import React, { useEffect } from \"react\";\n\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useHistory } from \"react-router-dom\";\n\nimport { statisticsObjectAction } from \"../../../redux/actions\";\n\nexport default function StudentStats() {\n  const history = useHistory();\n  const dispatch = useDispatch();\n\n  const teacherAuthID = useSelector((state) => state.storeTeacherAuthIDReducer);\n  const storageState = useSelector(\n    (state) => state.storeTeacherStatisticsGeneralInfoReducer\n  );\n  const storageObj = useSelector((state) => state.statisticsObjectReducer);\n\n  const getStorageObj = () => {\n    storageState.forEach((obj) => {\n      if (obj.id === \"StudentStats\") {\n        dispatch(statisticsObjectAction(obj));\n      }\n    });\n  };\n\n  useEffect(() => {\n    if (!teacherAuthID) {\n      history.push(\"/teacherdash\");\n    }\n    getStorageObj();\n  }, []);\n  return (\n    <div>\n      \n      <h1>Student Stats</h1>\n      <hr/>\n      <p># of Students: {storageObj.Num}</p>\n    </div>\n  );\n}\n","/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Teachers/Statistics/StorageStats.js",["618"],"import React, { useEffect } from \"react\";\n\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useHistory } from \"react-router-dom\";\n\nimport {statisticsObjectAction} from '../../../redux/actions';\n\nexport default function StorageStats() {\n  const history = useHistory();\n  const dispatch = useDispatch();\n  \n  const teacherAuthID = useSelector((state) => state.storeTeacherAuthIDReducer);\n  const storageState = useSelector(\n    (state) => state.storeTeacherStatisticsGeneralInfoReducer\n  );\n  const storageObj = useSelector(state => state.statisticsObjectReducer);\n\n  const getStorageObj = () => {\n    storageState.forEach((obj) => {\n      if (obj.id === 'StorageStats') {\n        dispatch(statisticsObjectAction(obj));\n      }\n    })\n  }\n\n  useEffect(() => {\n    if (!teacherAuthID) {\n      history.push(\"/teacherdash\");\n    }\n    getStorageObj();\n  }, []);\n\n  return (\n    <div>\n      <div>\n        <h1>Storage Statistics</h1>\n        <hr />\n        <p>Usage: {storageObj.Usage} MB</p>\n      </div>\n    </div>\n  );\n}\n","/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Students/Profile/ProfileFeedEdit.js",["619","620"],"import React, { useEffect } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { useHistory } from \"react-router-dom\";\nimport { storeStudentProfileFeedPostsAction } from \"../../../redux/actions\";\nimport { students_Collection } from \"../../../utils/firebase\";\n\nexport default function ProfileFeedEdit() {\n  const studentAuthID = useSelector((state) => state.storeStudentAuthIDReducer);\n  const user = useSelector((state) => state.storeStudentUserDataReducer);\n  const history = useHistory();\n  const dispatch = useDispatch();\n\n  const post = useSelector((state) => state.storeStudentProfileFeedPostReducer);\n  const posts = useSelector(\n    (state) => state.storeStudentProfileFeedPostsReducer\n  );\n\n  const savePost = () => {\n    const postText = document.querySelector(\"#taEditPost\").value;\n\n    // Save to DB\n    students_Collection\n      .doc(studentAuthID)\n      .collection(\"Profile\")\n      .doc(\"Feed\")\n      .collection(\"Posts\")\n      .doc(post.id)\n      .update({\n        Text: postText,\n      })\n      .catch((err) => console.log(err));\n\n    //   Dispatch\n\n    const allPosts = [...posts];\n    allPosts.forEach((p) => {\n      p.Text = postText;\n    });\n\n    dispatch(storeStudentProfileFeedPostsAction(allPosts));\n    history.push(\"/student-profile/feed\");\n  };\n\n  useEffect(() => {\n    if (!studentAuthID) {\n      history.push(\"/studentdash\");\n      return;\n    }\n  }, []);\n  return (\n    <div>\n      <h1>Edit Post</h1>\n\n      <div>\n        <textarea\n          id=\"taEditPost\"\n          type=\"text\"\n          defaultValue={post.Text}\n        ></textarea>\n        <button onClick={savePost}>Save</button>\n      </div>\n    </div>\n  );\n}\n","/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Students/Courses/StudentCoursePreview.js",["621","622"],"import React, { useEffect } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { useHistory } from \"react-router-dom\";\n\nimport TopBar from \"../TopBar\";\nimport Footer from \"../Footer\";\nimport {\n  storeStudentCourseLessonListAction,\n  toggleStudentCourseExerListAction,\n  toggleStudentCourseLessonListAction,\n  storeStudentCourseExerListAction,\n  storeStudentCourseQuizListAction,\n  toggleStudentCourseQuizListAction,\n  storeCurrentCourseComponentAction,\n  storeStudentNextExerciseAction,\n  storeStudentNextQuizAction,\n} from \"../../../redux/actions\";\nimport {\n  courses_Collection,\n  students_Collection,\n} from \"../../../utils/firebase\";\nimport { firebaseLooper } from \"../../../utils/tools\";\n\nexport default function StudentCoursePreview() {\n  const studentAuthID = useSelector((state) => state.storeStudentAuthIDReducer);\n  const user = useSelector((state) => state.storeStudentUserDataReducer);\n  const history = useHistory();\n  const dispatch = useDispatch();\n\n  //   Toggles\n  const toggleLessonList = useSelector(\n    (state) => state.toggleStudentCourseLessonListReducer\n  );\n  const toggleExerList = useSelector(\n    (state) => state.toggleStudentCourseExerListReducer\n  );\n  const toggleQuizList = useSelector(\n    (state) => state.toggleStudentCourseQuizListReducer\n  );\n\n  const course = useSelector((state) => state.storeStudentSingleCourseReducer);\n  const lessons = useSelector(\n    (state) => state.storeStudentCourseLessonListReducer\n  );\n  const currComp = useSelector(\n    (state) => state.storeCurrentCourseComponentReducer\n  );\n  const exers = useSelector((state) => state.storeStudentCourseExerListReducer);\n  const quizzes = useSelector(\n    (state) => state.storeStudentCourseQuizListReducer\n  );\n\n  // GET\n  const getAllCourseLessons = () => {\n    courses_Collection\n      .doc(course.id)\n      .collection(\"Lessons\")\n      .orderBy(\"Order\", \"asc\")\n      .get()\n      .then((snapshot) => {\n        const lessonsList = firebaseLooper(snapshot);\n        dispatch(storeStudentCourseLessonListAction(lessonsList));\n      })\n      .catch((err) => console.log(err));\n  };\n  const getAllCourseExercises = () => {\n    courses_Collection\n      .doc(course.id)\n      .collection(\"Exercises\")\n      .orderBy(\"Order\", \"asc\")\n      .get()\n      .then((snapshot) => {\n        const exerList = firebaseLooper(snapshot);\n\n        dispatch(storeStudentCourseExerListAction(exerList));\n      })\n      .catch((err) => console.log(err));\n  };\n  const getAllCourseQuizzes = () => {\n    courses_Collection\n      .doc(course.id)\n      .collection(\"Quizzes\")\n      .orderBy(\"Order\", \"asc\")\n      .get()\n      .then((snapshot) => {\n        const quizList = firebaseLooper(snapshot);\n\n        dispatch(storeStudentCourseQuizListAction(quizList));\n      })\n      .catch((err) => console.log(err));\n  };\n  const getStudentProgress = () => {\n    students_Collection\n      .doc(studentAuthID)\n      .collection(\"CourseProgress\")\n      .where(\"CourseName\", \"==\", course.Name)\n      .orderBy(\"Date\", \"desc\")\n      .get()\n      .then((snapshot) => {\n        const progressData = firebaseLooper(snapshot);\n        let progress = [];\n        progressData.forEach((prog) => {\n          if (prog.CourseName === course.Name) {\n            progress.push(prog);\n          }\n        });\n\n        // If there is data\n        if (progress.length > 0) {\n          const lastComp = progress[0];\n\n          if (lastComp.CompType === \"Lesson\") {\n            // get next exer\n            courses_Collection\n              .doc(course.id)\n              .collection(\"Exercises\")\n              .where(\"Order\", \"==\", lastComp.Order)\n              .get()\n              .then((snapshot) => {\n                const exerData = firebaseLooper(snapshot);\n                dispatch(storeCurrentCourseComponentAction(exerData[0]));\n                dispatch(storeStudentNextExerciseAction(exerData[0]));\n              })\n              .catch((err) => console.log(err));\n          } else if (lastComp.CompType === \"Exercise\") {\n            courses_Collection\n              .doc(course.id)\n              .collection(\"Quizzes\")\n              .where(\"Order\", \"==\", lastComp.Order)\n              .get()\n              .then((snapshot) => {\n                const quizData = firebaseLooper(snapshot);\n                courses_Collection\n                  .doc(course.id)\n                  .collection(\"Quizzes\")\n                  .doc(quizData[0].id)\n                  .collection(\"Components\")\n                  .get()\n                  .then((snapshot) => {\n                    const compData = firebaseLooper(snapshot);\n                    const tempObj = {\n                      ...quizData[0],\n                      Components: compData,\n                    };\n                    dispatch(storeCurrentCourseComponentAction(tempObj));\n                    dispatch(storeStudentNextQuizAction(tempObj));\n                  })\n                  .catch((err) => console.log(err));\n              })\n              .catch((err) => console.log(err));\n          } else if (lastComp.CompType === \"Quiz\") {\n            courses_Collection\n              .doc(course.id)\n              .collection(\"Lessons\")\n              .where(\"Order\", \"==\", lastComp.Order + 1)\n              .get()\n              .then((snapshot) => {\n                const lessonData = firebaseLooper(snapshot);\n                dispatch(storeCurrentCourseComponentAction(lessonData[0]));\n                dispatch(storeStudentNextExerciseAction(lessonData[0]));\n              })\n              .catch((err) => console.log(err));\n          }\n          // Here, the user should get the latest progress block and assess what comes next. That way the Start button can be added to the appropriate component.Consider the order.\n        } else {\n          courses_Collection\n            .doc(course.id)\n            .collection(\"Lessons\")\n            .where(\"Order\", \"==\", 1)\n            .get()\n            .then((snapshot) => {\n              const lessonData = firebaseLooper(snapshot);\n              dispatch(storeCurrentCourseComponentAction(lessonData[0]));\n            })\n            .catch((err) => console.log(err));\n        }\n      })\n      .catch((err) => console.log(err));\n  };\n\n  //   HANDLE\n  const handleLessonList = () => {\n    return lessons.map((lesson, i) => {\n      return (\n        <div key={i}>\n          <p>{lesson.Name}</p>\n          {currComp.Name === lesson.Name ? (\n            <button\n              style={{\n                backgroundColor: \"#54e346\",\n                color: \"white\",\n                border: \"1px solid rgba(0,0,0,0.2)\",\n                padding: \"1%\",\n                width: \"20%\",\n                borderRadius: '3px'\n              }}\n              onClick={navCourseLesson}\n            >\n              Start\n            </button>\n          ) : null}\n        </div>\n      );\n    });\n  };\n  const handleExerList = () => {\n    return exers.map((exer, i) => {\n      return (\n        <div key={i}>\n          <p>{exer.Name}</p>\n          {currComp.Name === exer.Name ? (\n            <button onClick={navCourseExercise}>Start</button>\n          ) : null}\n        </div>\n      );\n    });\n  };\n  const handleQuizList = () => {\n    return quizzes.map((quiz, i) => {\n      return (\n        <div key={i}>\n          <p>{quiz.Name}</p>\n          {currComp.Name === quiz.Name ? (\n            <button onClick={navCourseQuiz}>Start</button>\n          ) : null}\n        </div>\n      );\n    });\n  };\n\n  // NAV\n  const navCourseLesson = () => {\n    // We are assuming that the lesson is already in dispatch\n\n    history.push(\"/student-course-lesson\");\n  };\n  const navCourseExercise = () => {\n    history.push(\"/student-course-exercise\");\n  };\n  const navCourseQuiz = () => {\n    history.push(\"/student-course-quiz\");\n  };\n\n  useEffect(() => {\n    if (!studentAuthID) {\n      history.push(\"/studentdash\");\n      return;\n    }\n\n    getAllCourseLessons();\n    getAllCourseExercises();\n    getAllCourseQuizzes();\n    getStudentProgress();\n  }, []);\n\n  return (\n    <div>\n      {/* TopBar */}\n      <div>\n        <TopBar />\n      </div>\n\n      {/* Content */}\n      <div>\n        {/* Left */}\n        <div style={{ width: \"48%\", float: \"left\", padding: \"1%\" }}>\n          <h1>{course.Name}</h1>\n          <img\n            src=\"/Images/course-thumbnail.jpg\"\n            alt=\"\"\n            style={{ width: \"400px\", height: \"auto\" }}\n          />\n          <p>{course.Desc}</p>\n        </div>\n\n        {/* Right */}\n        <div style={{ width: \"48%\", float: \"right\", padding: \"1%\" }}>\n          <h2>Components</h2>\n\n          {/* Lessons */}\n          <div>\n            <button\n              style={{\n                width: \"100%\",\n                textAlign: \"left\",\n                padding: \"2%\",\n                backgroundColor: \"white\",\n                border: \"1px solid black\",\n                borderRadius: \"3px\",\n              }}\n              onClick={() => dispatch(toggleStudentCourseLessonListAction())}\n            >\n              Lessons\n            </button>\n            <div>{toggleLessonList ? handleLessonList() : null}</div>\n          </div>\n          <br />\n          {/* Exercises */}\n          <div>\n            <button\n              style={{\n                width: \"100%\",\n                textAlign: \"left\",\n                padding: \"2%\",\n                backgroundColor: \"white\",\n                border: \"1px solid black\",\n                borderRadius: \"3px\",\n              }}\n              onClick={() => dispatch(toggleStudentCourseExerListAction())}\n            >\n              Exercises\n            </button>\n            <div>{toggleExerList ? handleExerList() : null}</div>\n          </div>\n          <br />\n          {/* Quizzes */}\n          <div>\n            <button\n              style={{\n                width: \"100%\",\n                textAlign: \"left\",\n                padding: \"2%\",\n                backgroundColor: \"white\",\n                border: \"1px solid black\",\n                borderRadius: \"3px\",\n              }}\n              onClick={() => dispatch(toggleStudentCourseQuizListAction())}\n            >\n              Quizzes\n            </button>\n            <div>{toggleQuizList ? handleQuizList() : null}</div>\n          </div>\n        </div>\n      </div>\n\n      {/* Footer */}\n      <div style={{ clear: \"left\" }}>\n        <Footer />\n      </div>\n    </div>\n  );\n}\n","/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Teachers/Milestones/MilestoneView.js",["623","624"],"import React, { useEffect } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { useHistory } from \"react-router-dom\";\n\nimport TopBar from \"../Dash/TopBar\";\nimport DashFooter from \"../Dash/DashFooter\";\nimport RandomString from \"../../RandomString\";\nimport {\n  storeTeacherMilestonesGeneralInfoAction,\n  storeTeacherSingleMilestoneSegAction,\n  toggleNewTaskFormAction,\n} from \"../../../redux/actions\";\nimport { teachers_Collection } from \"../../../utils/firebase\";\n\nexport default function MilestoneView() {\n  const teacherAuthID = useSelector((state) => state.storeTeacherAuthIDReducer);\n  const history = useHistory();\n  const dispatch = useDispatch();\n\n  const toggleNewTaskForm = useSelector(\n    (state) => state.toggleNewTaskFormReducer\n  );\n\n  const milestone = useSelector(\n    (state) => state.storeTeacherSingleMilestoneSegReducer\n  );\n\n  //   HANDLE\n  const handleTaskList = () => {\n    if (milestone.Tasks) {\n      return milestone.Tasks.map((task, i) => {\n        return (\n          <div key={i}>\n            <h4>{task.Task}</h4>\n            <p>{task.Desc}</p>\n            <button id={task.id} onClick={removeTask}>\n              Remove\n            </button>\n          </div>\n        );\n      });\n    }\n  };\n  const handleNewTaskForm = () => {\n    return (\n      <div>\n        <h3>Task:</h3>\n        <input id=\"tbTask\" type=\"text\" placeholder=\"Task\" />\n\n        <h3>Description</h3>\n        <textarea id=\"taDesc\" placeholder=\"Description\"></textarea>\n\n        <button onClick={addNewTask}>Add</button>\n      </div>\n    );\n  };\n\n  // POST\n  const addNewTask = () => {\n    const rand1 = RandomString();\n    const rand2 = RandomString();\n    const taskID = `Task${rand1}${rand2}`;\n\n    const task = document.querySelector(\"#tbTask\").value;\n    const desc = document.querySelector(\"#taDesc\").value;\n\n    // Save to DB\n    teachers_Collection\n      .doc(teacherAuthID)\n      .collection(\"Milestones\")\n      .doc(milestone.id)\n      .collection(\"MilestoneTasks\")\n      .doc(taskID)\n      .set({\n        Task: task,\n        Desc: desc,\n        SegmentName: milestone.id,\n      })\n      .catch((err) => console.log(err));\n\n    // Dispatch\n\n    const allTasks = [...milestone.Tasks];\n    allTasks.push({\n      id: taskID,\n      Task: task,\n      Desc: desc,\n      SegmentName: milestone.id,\n    });\n\n    const tempObj = {\n      ...milestone,\n      Tasks: allTasks,\n    };\n\n    dispatch(storeTeacherSingleMilestoneSegAction(tempObj));\n    dispatch(toggleNewTaskFormAction());\n  };\n\n  // REMOVE\n  const removeTask = (event) => {\n    const taskID = event.target.getAttribute(\"id\");\n\n    // Remove from DB\n    teachers_Collection\n      .doc(teacherAuthID)\n      .collection(\"Milestones\")\n      .doc(milestone.id)\n      .collection(\"MilestoneTasks\")\n      .doc(taskID)\n      .delete()\n      .catch((err) => console.log(err));\n\n    // Dispatch\n    const allTasks = [...milestone.Tasks];\n    const filtered = allTasks.filter((task) => task.id !== taskID);\n\n    const tempObj = {\n      ...milestone,\n      Tasks: filtered,\n    };\n\n    dispatch(storeTeacherSingleMilestoneSegAction(tempObj));\n  };\n\n  useEffect(() => {\n    if (!teacherAuthID) {\n      history.push(\"/teacherdash\");\n      return;\n    }\n  }, []);\n  return (\n    <div>\n      {/* Top Bar */}\n      <div>\n        <TopBar />\n      </div>\n\n      {/* Content */}\n      <div className=\"content\">\n        <div>\n          <button onClick={() => history.push(\"/teacher-milestones\")}>\n            Back\n          </button>\n          <h1>{milestone.Name}</h1>\n          <button onClick={() => history.push(\"/teacher-milestone-edit\")}>\n            Edit Tasks\n          </button>\n        </div>\n\n        {/* Tasks */}\n        <div>{handleTaskList()}</div>\n        <br />\n        <button\n          onClick={() => dispatch(toggleNewTaskFormAction())}\n          className=\"btn-navy\"\n        >\n          {toggleNewTaskForm ? \"Close\" : \"Add Task\"}\n        </button>\n        {toggleNewTaskForm ? handleNewTaskForm() : null}\n      </div>\n\n      {/* Footer */}\n      <div>\n        <DashFooter />\n      </div>\n    </div>\n  );\n}\n","/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Teachers/Profile/ProfileAboutView.js",["625"],"import React, { useEffect } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { useHistory } from \"react-router-dom\";\nimport {\n  storeProfileAboutDataAction,\n  storeProfileExperienceDataAction,\n} from \"../../../redux/actions\";\nimport { teachers_Collection } from \"../../../utils/firebase\";\nimport { firebaseLooper } from \"../../../utils/tools\";\n\nexport default function ProfileAboutView() {\n  const teacherAuthID = useSelector((state) => state.storeTeacherAuthIDReducer);\n  const history = useHistory();\n  const dispatch = useDispatch();\n\n  const about = useSelector((state) => state.storeProfileAboutDataReducer);\n  const exp = useSelector((state) => state.storeProfileExperienceDataReducer);\n\n  // GET\n  const getAllAboutData = () => {\n    const profile_Collection = teachers_Collection\n      .doc(teacherAuthID)\n      .collection(\"Profile\");\n    profile_Collection\n      .get()\n      .then((snapshot) => {\n        const data = firebaseLooper(snapshot);\n        data.forEach((d) => {\n          if (d.id === \"About\") {\n            dispatch(storeProfileAboutDataAction(d));\n          }\n        });\n      })\n      .catch((err) => console.log(err));\n  };\n  const getAllExperienceData = () => {\n    const experience_Collection = teachers_Collection\n      .doc(teacherAuthID)\n      .collection(\"Profile\")\n      .doc(\"Experience\")\n      .collection(\"ExpBlocks\");\n    experience_Collection\n      .get()\n      .then((snapshot) => {\n        const data = firebaseLooper(snapshot);\n        dispatch(storeProfileExperienceDataAction(data));\n      })\n      .catch((err) => console.log(err));\n  };\n\n  // HANDLE\n  const handleCurrPage = () => {\n    let feedBtn = document.querySelector(\"#link-feed\");\n    feedBtn.classList.remove(\"navy-back\");\n\n    let aboutBtn = document.querySelector(\"#link-about\");\n    aboutBtn.classList.add(\"navy-back\");\n\n    let awardsBtn = document.querySelector(\"#link-awards\");\n    awardsBtn.classList.remove(\"navy-back\");\n\n    let galleryBtn = document.querySelector(\"#link-gallery\");\n    galleryBtn.classList.remove(\"navy-back\");\n\n    let reviewsBtn = document.querySelector(\"#link-reviews\");\n    reviewsBtn.classList.remove(\"navy-back\");\n  };\n\n  useEffect(() => {\n    if (!teacherAuthID) {\n      history.push(\"/teacherdash\");\n      return;\n    }\n    window.scrollTo(0, 0);\n    getAllAboutData();\n    getAllExperienceData();\n    handleCurrPage();\n  }, []);\n  return (\n    <div>\n      <button\n        className=\"btn-newPost\"\n        onClick={() => history.push(\"/teacher-profile/edit-about\")}\n      >\n        Edit\n      </button>\n      <div className=\"about-section\">\n        <h2>About</h2>\n        <p>{about.About}</p>\n      </div>\n      <div className=\"about-section\">\n        <h2>Experience</h2>\n        {exp.map((ex, i) => {\n          return (\n            <div className=\"exp-section\" key={i}>\n              <h3>{ex.Institution}</h3>\n              <p>{ex.Desc}</p>\n              <div className=\"about-dates\">\n                <p>\n                  <span className=\"about-date\">Started:</span>{\" \"}\n                  {ex.Start.toDate().toString().substr(4, 11)}\n                </p>\n                <p>\n                  <span className=\"about-date\">Ended:</span>{\" \"}\n                  {ex.End.toDate().toString().substr(4, 11)}\n                </p>\n              </div>\n            </div>\n          );\n        })}\n      </div>\n      <div className=\"about-section personal-section\">\n        <h2>Personal</h2>\n        <p>\n          <span className=\"personal-p\">Email:</span> {about.Email}\n        </p>\n        <p>\n          <span className=\"personal-p\">Location:</span> {about.Location}\n        </p>\n        <p>\n          <span className=\"personal-p\">Instruments:</span>{\" \"}\n        </p>\n        {about.Instruments ? (\n          <div>\n            <ul className=\"about-inst\">\n              {about.Instruments.map((ins, i) => {\n                return <li key={i}>{ins}</li>;\n              })}\n            </ul>\n            <p>\n              <span className=\"personal-p\">Joined:</span>{\" \"}\n              {about.Joined.toDate().toString().substr(4, 11)}\n            </p>\n          </div>\n        ) : null}\n      </div>\n    </div>\n  );\n}\n","/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Teachers/Dash/RecentActivity.js",[],"/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Teachers/Dash/UpcomingEvents.js",[],"/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Teachers/Articles/ArticleBlock.js",[],"/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Teachers/Groups/GroupFeedView.js",["626"],"import React, { useEffect } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { useHistory } from \"react-router-dom\";\nimport {\n  storeGroupFeedPostsAction,\n  storeSingleGroupFeedPostAction,\n} from \"../../../redux/actions\";\n\nimport { groups_Collection } from \"../../../utils/firebase\";\nimport { firebaseLooper } from \"../../../utils/tools\";\n\nimport RandomString from \"../../RandomString\";\nimport GetToday from \"../../GetToday\";\n\nexport default function GroupFeedView() {\n  const teacherAuthID = useSelector((state) => state.storeTeacherAuthIDReducer);\n  const history = useHistory();\n  const dispatch = useDispatch();\n\n  const group = useSelector((state) => state.storeSingleGroupReducer);\n  const posts = useSelector((state) => state.storeGroupFeedPostsReducer);\n\n  const getAllPosts = () => {\n    groups_Collection\n      .doc(group.id)\n      .collection(\"Posts\")\n      .get()\n      .then((snapshot) => {\n        const posts = firebaseLooper(snapshot);\n        const allPosts = [];\n        posts.forEach((post) => {\n          if (post.Poster) {\n            allPosts.push(post);\n          }\n        });\n        dispatch(storeGroupFeedPostsAction(allPosts));\n      })\n      .catch((err) => console.log(err));\n  };\n\n  const handleFeedPosts = () => {\n    return posts.map((post, i) => {\n      return (\n        <div key={i}>\n          <h3>{post.Poster}</h3>\n          <p>{post.Text}</p>\n          <p>{post.Date.toDate().toString().substr(4, 11)}</p>\n          {post.Poster === teacherAuthID ? (\n            <div>\n              <button id={post.id} onClick={navigateEdit}>\n                Edit\n              </button>\n              <button id={post.id} onClick={removePost}>\n                Remove\n              </button>\n            </div>\n          ) : null}\n        </div>\n      );\n    });\n  };\n\n  const createPost = () => {\n    const postText = document.querySelector(\"#taPostText\").value;\n\n    // Send to DB\n    const rand1 = RandomString();\n    const rand2 = RandomString();\n    const postID = `Post${rand1}${rand2}`;\n    const commentID = `Comment${rand1}${rand2}`;\n\n    groups_Collection\n      .doc(group.id)\n      .collection(\"Posts\")\n      .doc(postID)\n      .set({\n        Poster: teacherAuthID,\n        Text: postText,\n        Date: GetToday(),\n      })\n      .catch((err) => console.log(err));\n\n    groups_Collection\n      .doc(group.id)\n      .collection(\"Posts\")\n      .doc(postID)\n      .collection(\"Comments\")\n      .doc(commentID)\n      .set({})\n      .catch((err) => console.log(err));\n\n    // Dispatch\n    const allPosts = [...posts];\n    allPosts.push({\n      id: postID,\n      Poster: teacherAuthID,\n      Text: postText,\n      Date: GetToday(),\n    });\n    dispatch(storeGroupFeedPostsAction(allPosts));\n\n    document.querySelector(\"#taPostText\").value = \"\";\n  };\n\n  const removePost = (event) => {\n    const postID = event.target.getAttribute(\"id\");\n\n    // Remove from DB\n    groups_Collection\n      .doc(group.id)\n      .collection(\"Posts\")\n      .doc(postID)\n      .delete()\n      .catch((err) => console.log(err));\n\n    // Dispatch\n    const groupPosts = [...posts];\n    const filtered = groupPosts.filter((post) => post.id !== postID);\n\n    dispatch(storeGroupFeedPostsAction(filtered));\n  };\n\n  const navigateEdit = (event) => {\n    const postID = event.target.getAttribute(\"id\");\n\n    posts.forEach((post) => {\n      if (post.id === postID) {\n        dispatch(storeSingleGroupFeedPostAction(post));\n      }\n    });\n\n    history.push(\"/teacher-group-page/feed-edit\");\n  };\n\n  useEffect(() => {\n    if (!teacherAuthID) {\n      history.push(\"/teacherdash\");\n      return;\n    }\n\n    getAllPosts();\n  }, []);\n  return (\n    <div>\n      {/* New Post */}\n      <div>\n        <h4>Create a post.</h4>\n        <textarea id=\"taPostText\" placeholder=\"Type post here...\"></textarea>\n        <br />\n        <button onClick={createPost}>Post</button>\n      </div>\n      <hr />\n      {/* Post List */}\n      <div>{handleFeedPosts()}</div>\n    </div>\n  );\n}\n","/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Students/Courses/StudentCourseLesson.js",["627","628"],"import React, { useEffect } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { useHistory } from \"react-router-dom\";\n\nimport Footer from \"../Footer\";\nimport RandomString from \"../../RandomString\";\nimport GetToday from \"../../GetToday\";\n\nimport {\n  storeStudentLessonQuestionResultAction,\n  storeStudentNextExerciseAction,\n} from \"../../../redux/actions\";\nimport {\n  courses_Collection,\n  students_Collection,\n} from \"../../../utils/firebase\";\nimport { firebaseLooper } from \"../../../utils/tools\";\n\nexport default function StudentCourseLesson() {\n  const studentAuthID = useSelector((state) => state.storeStudentAuthIDReducer);\n  const user = useSelector((state) => state.storeStudentUserDataReducer);\n  const history = useHistory();\n  const dispatch = useDispatch();\n\n  const currLesson = useSelector(\n    (state) => state.storeCurrentCourseComponentReducer\n  );\n  const result = useSelector(\n    (state) => state.storeStudentLessonQuestionResultReducer\n  );\n  const course = useSelector((state) => state.storeStudentSingleCourseReducer);\n\n  // GET\n  const getNextExercise = () => {\n    courses_Collection\n      .doc(course.id)\n      .collection(\"Exercises\")\n      .get()\n      .then((snapshot) => {\n        const exerData = firebaseLooper(snapshot);\n        exerData.forEach((exer) => {\n          if (exer.Order === currLesson.Order) {\n            dispatch(storeStudentNextExerciseAction(exer));\n          }\n        });\n      })\n      .catch((err) => console.log(err));\n  };\n\n  //   HANDLE\n  const handleLessonUI = () => {\n    return (\n      <div>\n        <div>\n          <h2>Video is here...</h2>\n        </div>\n        <div>\n          <h2>Textual Lesson</h2>\n          <p>{currLesson.Text}</p>\n        </div>\n        <div>{handleLessonQuestion()}</div>\n        <div>{handleResult()}</div>\n      </div>\n    );\n  };\n  const handleLessonQuestion = () => {\n    if (currLesson.Text) {\n      return (\n        <div>\n          <h3>{currLesson.Question}</h3>\n          <div>\n            {currLesson.Options.map((opt, i) => {\n              return (\n                <div>\n                  <input\n                    type=\"radio\"\n                    id={`Opt${i}`}\n                    name=\"lessonOpts\"\n                    value={opt}\n                  />\n                  <label for={opt}>{opt}</label>\n                </div>\n              );\n            })}\n          </div>\n          <br />\n          <div>\n            <button onClick={calcQuestionResult}>Check</button>\n          </div>\n          <br />\n        </div>\n      );\n    }\n  };\n  const handleResult = () => {\n    if (result === \"correct\") {\n      return (\n        <div>\n          <p>That is correct!</p>\n          <button onClick={navExercise}>Finish</button>\n        </div>\n      );\n    } else if (result === \"incorrect\") {\n      return (\n        <div>\n          <p>Incorrect. Try Again.</p>\n        </div>\n      );\n    } else {\n      return (\n        <div>\n          <p>Answer question correctly before completing lesson.</p>\n        </div>\n      );\n    }\n  };\n\n  // NAV\n  const navExercise = () => {\n    getNextExercise();\n    dispatch(storeStudentLessonQuestionResultAction(\"\"));\n\n    const rand1 = RandomString();\n    const rand2 = RandomString();\n    const progID = `Prog${rand1}${rand2}`;\n\n    // Update Course Progress\n    students_Collection\n      .doc(studentAuthID)\n      .collection(\"CourseProgress\")\n      .doc(progID)\n      .set({\n        CourseName: course.Name,\n        CompName: currLesson.Name,\n        CompType: \"Lesson\",\n        Order: currLesson.Order,\n        Date: GetToday(),\n      })\n      .catch((err) => console.log(err));\n\n    history.push(\"/student-course-exercise\");\n  };\n\n  //   CALC\n  const calcQuestionResult = () => {\n    const answer = currLesson.Answer;\n\n    for (let i = 0; i < currLesson.Options.length; i = i + 1) {\n      const radioChoice = document.querySelector(`#Opt${i}`).checked;\n      if (radioChoice) {\n        if (currLesson.Options[i] === answer) {\n          dispatch(storeStudentLessonQuestionResultAction(\"correct\"));\n        } else {\n          dispatch(storeStudentLessonQuestionResultAction(\"incorrect\"));\n        }\n      }\n    }\n  };\n\n  useEffect(() => {\n    if (!studentAuthID) {\n      history.push(\"/studentdash\");\n      return;\n    }\n  }, []);\n  return (\n    <div>\n      <br />\n      <div>\n        <h1>{currLesson.Name}</h1>\n      </div>\n\n      <div>{handleLessonUI()}</div>\n\n      {/* Footer */}\n      <div>\n        <Footer />\n      </div>\n    </div>\n  );\n}\n","/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Teachers/Assignments/AssignmentEdit.js",["629"],"import React, { useEffect } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { useHistory } from \"react-router-dom\";\n\nimport TopBar from \"../Dash/TopBar\";\nimport DashFooter from \"../Dash/DashFooter\";\nimport InputDateFormatter from \"../../InputDateFormatter\";\nimport FirebaseDate from \"../../FirebaseDate\";\nimport {\n  storeTeacherAssignmentAssigneesAction,\n  storeTeacherSingleAssignmentAction,\n} from \"../../../redux/actions\";\nimport {\n  students_Collection,\n  teachers_Collection,\n} from \"../../../utils/firebase\";\n\nexport default function AssignmentEdit() {\n  const teacherAuthID = useSelector((state) => state.storeTeacherAuthIDReducer);\n  const history = useHistory();\n  const dispatch = useDispatch();\n\n  const assignment = useSelector(\n    (state) => state.storeTeacherSingleAssignmentReducer\n  );\n\n  //   HANDLE\n  const handleAssignment = () => {\n    if (assignment.Type === \"Textual\") {\n      return (\n        <div>\n          <h3>Assignment Prompt:</h3>\n          <textarea id=\"taAssText\" defaultValue={assignment.Text}></textarea>\n        </div>\n      );\n    } else if (assignment.Type === \"Practice\") {\n      return (\n        <div>\n          <div>\n            <h3>Assignment Prompt:</h3>\n            <textarea\n              id=\"taAssPracText\"\n              defaultValue={assignment.Text}\n            ></textarea>\n          </div>\n          <div>\n            <h3>Repertoire:</h3>\n            <input\n              id=\"tbPracReper\"\n              type=\"text\"\n              defaultValue={assignment.Repertoire}\n            />\n          </div>\n          <div>\n            <h3>Composer:</h3>\n            <input\n              id=\"tbPracComp\"\n              type=\"text\"\n              defaultValue={assignment.Composer}\n            />\n          </div>\n          <div>\n            <h3>Tempo</h3>\n            <input\n              id=\"tbPracTempo\"\n              type=\"text\"\n              defaultValue={assignment.Tempo}\n            />\n          </div>\n          <div>\n            <h3>Max Time</h3>\n            <input\n              id=\"tbPracMaxTime\"\n              type=\"text\"\n              defaultValue={assignment.MaxTime}\n            />\n          </div>\n        </div>\n      );\n    }\n  };\n  const handleAssignees = () => {\n    if (assignment.Assignees) {\n      return assignment.Assignees.map((stud, i) => {\n        return (\n          <div key={i}>\n            <p>{stud}</p>\n            <button id={stud} class=\"btn-salmon\" onClick={removeAssignee}>\n              -\n            </button>\n          </div>\n        );\n      });\n    }\n  };\n\n  //   POST\n  const saveAllChanges = () => {\n    const assName = document.querySelector(\"#tbAssName\").value;\n    const assDue = FirebaseDate(document.querySelector(\"#daAssDue\").value);\n    const allNames = [...assignment.Assignees];\n\n    if (assignment.Type === \"Textual\") {\n      const assText = document.querySelector(\"#taAssText\").value;\n\n      // Save to DB\n      teachers_Collection\n        .doc(teacherAuthID)\n        .collection(\"Assignments\")\n        .doc(assignment.id)\n        .update({\n          Name: assName,\n          Due: assDue,\n          Text: assText,\n          Assignees: allNames,\n        })\n        .catch((err) => console.log(err));\n\n      // Dispatch\n      const newAss = {\n        ...assignment,\n        Name: assName,\n        Due: assDue,\n        Text: assText,\n        Assignees: allNames,\n      };\n\n      dispatch(storeTeacherSingleAssignmentAction(newAss));\n      dispatch(storeTeacherAssignmentAssigneesAction(allNames));\n    } else if (assignment.Type === \"Practice\") {\n      const assPrompt = document.querySelector(\"#taAssPracText\").value;\n      const assReper = document.querySelector(\"#tbPracReper\").value;\n      const assComp = document.querySelector(\"#tbPracComp\").value;\n      const assTempo = document.querySelector(\"#tbPracTempo\").value;\n      const assMaxTime = document.querySelector(\"#tbPracMaxTime\").value;\n\n      // Save to DB\n      teachers_Collection\n        .doc(teacherAuthID)\n        .collection(\"Assignments\")\n        .doc(assignment.id)\n        .update({\n          Name: assName,\n          Due: assDue,\n          Text: assPrompt,\n          Repertoire: assReper,\n          Composer: assComp,\n          Tempo: assTempo,\n          MaxTime: assMaxTime,\n          Assignees: allNames,\n        })\n        .catch((err) => console.log(err));\n\n      // Dispatch\n      const newAss = {\n        ...assignment,\n        Name: assName,\n        Due: assDue,\n        Text: assPrompt,\n        Repertoire: assReper,\n        Composer: assComp,\n        Tempo: assTempo,\n        MaxTime: assMaxTime,\n        Assignees: allNames,\n      };\n\n      dispatch(storeTeacherSingleAssignmentAction(newAss));\n      dispatch(storeTeacherAssignmentAssigneesAction(allNames));\n    }\n\n    history.push(\"/teacher-assignment-view\");\n  };\n\n  //   REMOVE\n  const removeAssignee = (event) => {\n    const name = event.target.getAttribute(\"id\");\n    const allStuds = [...assignment.Assignees];\n    const filtered = allStuds.filter((stud) => stud !== name);\n\n    // Remove from DB\n    students_Collection\n      .doc(name)\n      .collection(\"AssignmentsInfo\")\n      .doc(assignment.id)\n      .delete()\n      .catch((err) => console.log(err));\n\n    const newAss = {\n      ...assignment,\n      Assignees: filtered,\n    };\n    dispatch(storeTeacherSingleAssignmentAction(newAss));\n  };\n\n  useEffect(() => {\n    if (!teacherAuthID) {\n      history.push(\"/teacherdash\");\n      return;\n    }\n  }, []);\n  return (\n    <div>\n      {/* Top Bar */}\n      <div>\n        <TopBar />\n      </div>\n\n      <div>\n        <div>\n          <h1>Edit</h1>\n          <button\n            class=\"btn-lime\"\n            onClick={() => history.push(\"teacher-assignment-view\")}\n          >\n            Back\n          </button>\n        </div>\n        <hr />\n\n        {/* Edit content here */}\n\n        <div>\n          <div>\n            <h3>Assignment Name: </h3>\n            <input id=\"tbAssName\" type=\"text\" defaultValue={assignment.Name} />\n          </div>\n          <div>\n            <h3>Due Date: </h3>\n            {assignment.Due ? (\n              <input\n                id={`daAssDue`}\n                type=\"date\"\n                defaultValue={InputDateFormatter(assignment.Due)}\n              />\n            ) : null}\n          </div>\n          <div>{handleAssignment()}</div>\n\n          {/* Assignees */}\n          <div>\n            <h3>Assignees:</h3>\n            {handleAssignees()}\n          </div>\n          <br />\n          <button class=\"btn-navy\" onClick={saveAllChanges}>\n            Save All Changes\n          </button>\n        </div>\n      </div>\n\n      {/* Footer */}\n      <div>\n        <DashFooter />\n      </div>\n    </div>\n  );\n}\n","/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Teachers/Statistics/StatisticsMain.js",[],"/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Courses/CoursesDeck.js",[],"/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/FirebaseDate.js",[],"/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Teachers/Profile/ProfileAboutEdit.js",["630"],"import React, { useEffect } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { useHistory } from \"react-router-dom\";\nimport {\n  toggleNewExperienceFormAction,\n  storeProfileExperienceDataAction,\n  storeProfileAboutDataAction,\n  toggleNewInstrumentFormAction,\n} from \"../../../redux/actions\";\nimport { teachers_Collection } from \"../../../utils/firebase\";\nimport firebase from \"../../../utils/firebase\";\n\nexport default function ProfileAboutEdit() {\n  const teacherAuthID = useSelector((state) => state.storeTeacherAuthIDReducer);\n  const history = useHistory();\n  const dispatch = useDispatch();\n\n  const about = useSelector((state) => state.storeProfileAboutDataReducer);\n  const exp = useSelector((state) => state.storeProfileExperienceDataReducer);\n\n  const toggleExpState = useSelector(\n    (state) => state.toggleNewExperienceFormReducer\n  );\n  const toggleInsState = useSelector(\n    (state) => state.toggleNewInstrumentFormReducer\n  );\n\n  const saveAllChanges = () => {\n    // About Section\n    const aboutText = document.querySelector(\"#taAboutDescText\").value;\n\n    // Experience Section\n    const newExperienceArray = [];\n\n    const expCount = exp.length;\n    for (let i = 0; i < expCount; i = i + 1) {\n      const tbInstitution = document.querySelector(`#tbExpInstText${i}`).value;\n      const tbDesc = document.querySelector(`#taExpDescText${i}`).value;\n      const daStarted = document.querySelector(`#dtStarted${i}`).value;\n      const daEnded = document.querySelector(`#dtEnded${i}`).value;\n\n      const startedSplit = daStarted.split(\"-\");\n      const endedSplit = daEnded.split(\"-\");\n\n      const startedDate = firebase.firestore.Timestamp.fromDate(\n        new Date(`${startedSplit[1]} ${startedSplit[2]}, ${startedSplit[0]}`)\n      );\n      const endedDate = firebase.firestore.Timestamp.fromDate(\n        new Date(`${endedSplit[1]} ${endedSplit[2]}, ${endedSplit[0]}`)\n      );\n\n      newExperienceArray.push({\n        id: exp[i].id,\n        Institution: tbInstitution,\n        Desc: tbDesc,\n        Start: startedDate,\n        End: endedDate,\n      });\n    }\n\n    // Personal\n    const email = document.querySelector(\"#tbEmailText\").value;\n    const location = document.querySelector(\"#tbLocationText\").value;\n\n    const insArray = [];\n    const insCount = about.Instruments.length;\n    for (let i = 0; i < insCount; i = i + 1) {\n      const tbInstrument = document.querySelector(`#tbInstruments${i}`).value;\n\n      insArray.push(tbInstrument);\n    }\n\n    // Save to DB\n    teachers_Collection\n      .doc(teacherAuthID)\n      .collection(\"Profile\")\n      .doc(\"About\")\n      .update({\n        About: aboutText,\n        Email: email,\n        Location: location,\n        Instruments: insArray,\n        Joined: about.Joined,\n      })\n      .catch((err) => console.log(err));\n\n    newExperienceArray.forEach((ex) => {\n      teachers_Collection\n        .doc(teacherAuthID)\n        .collection(\"Profile\")\n        .doc(\"Experience\")\n        .collection(\"ExpBlocks\")\n        .doc(ex.id)\n        .update({\n          Institution: ex.Institution,\n          Desc: ex.Desc,\n          Start: ex.Start,\n          End: ex.End,\n        })\n        .catch((err) => console.log(err));\n    });\n\n    // Dispatch\n    const tempAbout = {\n      About: aboutText,\n      Email: email,\n      Location: location,\n      Instruments: insArray,\n      Joined: about.Joined,\n    };\n\n    const tempExp = [...newExperienceArray];\n\n    dispatch(storeProfileAboutDataAction(tempAbout));\n    dispatch(storeProfileExperienceDataAction(tempExp));\n\n    history.push(\"/teacher-profile/about\");\n  };\n\n  const applyNewExperience = () => {\n    let rand1 = Math.random().toString(36).substring(3);\n    let rand2 = Math.random().toString(36).substring(3);\n    const expBlockID = `ExpBlock${rand1}${rand2}`;\n\n    const institution = document.querySelector(\"#tbInstText\").value;\n    const desc = document.querySelector(\"#tbDescText\").value;\n    const started = document.querySelector(\"#daStartDate\").value;\n    const ended = document.querySelector(\"#daEndDate\").value;\n\n    const startedSplit = started.split(\"-\");\n    const endedSplit = ended.split(\"-\");\n\n    const startedDate = firebase.firestore.Timestamp.fromDate(\n      new Date(`${startedSplit[1]} ${startedSplit[2]}, ${startedSplit[0]}`)\n    );\n    const endedDate = firebase.firestore.Timestamp.fromDate(\n      new Date(`${endedSplit[1]} ${endedSplit[2]}, ${endedSplit[0]}`)\n    );\n\n    // Save to database\n    teachers_Collection\n      .doc(teacherAuthID)\n      .collection(\"Profile\")\n      .doc(\"Experience\")\n      .collection(\"ExpBlocks\")\n      .doc(expBlockID)\n      .set({\n        Institution: institution,\n        Desc: desc,\n        Start: startedDate,\n        End: endedDate,\n      })\n      .catch((err) => console.log(err));\n\n    // dispatch new exp\n    const allExp = [...exp];\n\n    allExp.push({\n      id: expBlockID,\n      Institution: institution,\n      Desc: desc,\n      Start: startedDate,\n      End: endedDate,\n    });\n\n    console.log(allExp);\n\n    dispatch(storeProfileExperienceDataAction(allExp));\n    dispatch(toggleNewExperienceFormAction());\n  };\n\n  const removeExperience = (event) => {\n    const exID = event.target.getAttribute(\"id\");\n\n    teachers_Collection\n      .doc(teacherAuthID)\n      .collection(\"Profile\")\n      .doc(\"Experience\")\n      .collection(\"ExpBlocks\")\n      .doc(exID)\n      .delete()\n      .catch((err) => console.log(err));\n\n    const allExp = [...exp];\n\n    const filtered = allExp.filter((ex) => ex.id !== exID);\n\n    dispatch(storeProfileExperienceDataAction(filtered));\n  };\n\n  const removeInstrument = (event) => {\n    const instrument = event.target.getAttribute(\"id\");\n    const allInstruments = [...about.Instruments];\n\n    const newList = allInstruments.filter((ins) => ins !== instrument);\n\n    const newObj = {\n      ...about,\n      Instruments: newList,\n    };\n\n    // Remove from DB\n    teachers_Collection\n      .doc(teacherAuthID)\n      .collection(\"Profile\")\n      .doc(\"About\")\n      .update({\n        Instruments: firebase.firestore.FieldValue.arrayRemove(instrument),\n      })\n      .catch((err) => console.log(err));\n\n    dispatch(storeProfileAboutDataAction(newObj));\n  };\n\n  const addInstrument = () => {\n    const newIns = document.querySelector(\"#tbNewInsText\").value;\n\n    // Add to DB\n    teachers_Collection\n      .doc(teacherAuthID)\n      .collection(\"Profile\")\n      .doc(\"About\")\n      .update({\n        Instruments: firebase.firestore.FieldValue.arrayUnion(newIns),\n      })\n      .catch((err) => console.log(err));\n\n    // dispatch\n    const newInstruments = [...about.Instruments];\n    newInstruments.push(newIns);\n\n    const newObj = {\n      ...about,\n      Instruments: newInstruments,\n    };\n\n    dispatch(storeProfileAboutDataAction(newObj));\n    dispatch(toggleNewInstrumentFormAction());\n  };\n\n  // HANDLE\n  const handleCurrPage = () => {\n    let feedBtn = document.querySelector(\"#link-feed\");\n    feedBtn.classList.remove(\"navy-back\");\n\n    let aboutBtn = document.querySelector(\"#link-about\");\n    aboutBtn.classList.add(\"navy-back\");\n\n    let awardsBtn = document.querySelector(\"#link-awards\");\n    awardsBtn.classList.remove(\"navy-back\");\n\n    let galleryBtn = document.querySelector(\"#link-gallery\");\n    galleryBtn.classList.remove(\"navy-back\");\n\n    let reviewsBtn = document.querySelector(\"#link-reviews\");\n    reviewsBtn.classList.remove(\"navy-back\");\n  };\n\n  useEffect(() => {\n    if (!teacherAuthID) {\n      history.push(\"/teacherdash\");\n      return;\n    }\n\n    handleCurrPage();\n  }, []);\n  return (\n    <div className=\"post-edit-wrapper\">\n      <div>\n        <button\n          className=\"btn-back maroon-back\"\n          onClick={() => history.push(\"/teacher-profile/about\")}\n        >\n          Back\n        </button>\n      </div>\n\n      <div className=\"post-create\">\n        <div>\n          <h2>About</h2>\n          <textarea id=\"taAboutDescText\" defaultValue={about.About}></textarea>\n        </div>\n\n        <div>\n          <h2>Experience</h2>\n          {exp.map((ex, i) => {\n            const start = `${ex.Start.toDate().getFullYear()}-${\n              ex.Start.toDate().getMonth() + 1 < 10 ? \"0\" : \"\"\n            }${ex.Start.toDate().getMonth() + 1}-${\n              ex.Start.toDate().getDate() < 10 ? \"0\" : \"\"\n            }${ex.Start.toDate().getDate()}`;\n\n            const end = `${ex.End.toDate().getFullYear()}-${\n              ex.End.toDate().getMonth() + 1 < 10 ? \"0\" : \"\"\n            }${ex.End.toDate().getMonth() + 1}-${\n              ex.End.toDate().getDate() < 10 ? \"0\" : \"\"\n            }${ex.End.toDate().getDate()}`;\n\n            return (\n              <div key={i}>\n                <h4>Institution</h4>\n                <input\n                  id={`tbExpInstText${i}`}\n                  type=\"text\"\n                  defaultValue={ex.Institution}\n                />\n                <h4>Description</h4>\n                <textarea\n                  id={`taExpDescText${i}`}\n                  defaultValue={ex.Desc}\n                ></textarea>\n                <h4>Started</h4>\n                <input id={`dtStarted${i}`} type=\"date\" defaultValue={start} />\n                <h4>Ended</h4>\n                <input id={`dtEnded${i}`} type=\"date\" defaultValue={end} />\n                <button id={ex.id} onClick={removeExperience}>\n                  Remove\n                </button>\n                <hr />\n              </div>\n            );\n          })}\n\n          {toggleExpState ? (\n            <div>\n              <button\n                onClick={() => {\n                  dispatch(toggleNewExperienceFormAction());\n                }}\n              >\n                Cancel\n              </button>\n              {/* Form */}\n              <div>\n                <h3>Institution</h3>\n                <input id=\"tbInstText\" type=\"text\" placeholder=\"Institution\" />\n              </div>\n              <div>\n                <h3>Description</h3>\n                <textarea id=\"tbDescText\" placeholder=\"Description\"></textarea>\n              </div>\n              <div>\n                <h3>Started: </h3>\n                <input id=\"daStartDate\" type=\"date\" />\n              </div>\n              <div>\n                <h3>Ended: </h3>\n                <input id=\"daEndDate\" type=\"date\" />\n              </div>\n              <div>\n                <button onClick={applyNewExperience}>Apply</button>\n              </div>\n            </div>\n          ) : (\n            <button onClick={() => dispatch(toggleNewExperienceFormAction())}>\n              +\n            </button>\n          )}\n        </div>\n        <div>\n          <h2>Personal</h2>\n          <p>Email:</p>\n          <input id=\"tbEmailText\" type=\"text\" defaultValue={about.Email} />\n          <p>Location:</p>\n          <input\n            id=\"tbLocationText\"\n            type=\"text\"\n            defaultValue={about.Location}\n          />\n          <p>Instruments: </p>\n          {about.Instruments\n            ? about.Instruments.map((ins, i) => {\n                return (\n                  <div key={i}>\n                    <input\n                      id={`tbInstruments${i}`}\n                      type=\"text\"\n                      defaultValue={ins}\n                    />\n                    <button id={ins} onClick={removeInstrument}>\n                      -\n                    </button>\n                  </div>\n                );\n              })\n            : null}\n          {about.Joined ? (\n            <div>\n              {/* Toggle Instrument Add */}\n              {toggleInsState ? (\n                <div>\n                  <div>\n                    <button\n                      onClick={() => {\n                        dispatch(toggleNewInstrumentFormAction());\n                      }}\n                    >\n                      Cancel\n                    </button>\n                  </div>\n                  <h3>Instrument</h3>\n                  <input\n                    id=\"tbNewInsText\"\n                    type=\"text\"\n                    placeholder=\"Instrument\"\n                  />\n                  <div>\n                    <button onClick={addInstrument}>Apply</button>\n                  </div>\n                </div>\n              ) : (\n                <button\n                  onClick={() => {\n                    dispatch(toggleNewInstrumentFormAction());\n                  }}\n                >\n                  +\n                </button>\n              )}\n\n              <p>Joined: {about.Joined.toDate().toString().substr(4, 11)}</p>\n            </div>\n          ) : null}\n        </div>\n        <button onClick={saveAllChanges}>Save All Changes</button>\n      </div>\n    </div>\n  );\n}\n","/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Students/Courses/StudentCourseExercise.js",["631","632"],"import React, { useEffect } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { useHistory } from \"react-router-dom\";\nimport {\n  courses_Collection,\n  students_Collection,\n} from \"../../../utils/firebase\";\nimport { firebaseLooper } from \"../../../utils/tools\";\n\nimport Footer from \"../Footer\";\nimport RandomString from \"../../RandomString\";\nimport GetToday from \"../../GetToday\";\nimport { storeStudentNextQuizAction } from \"../../../redux/actions\";\n\nexport default function StudentCourseExercise() {\n  const studentAuthID = useSelector((state) => state.storeStudentAuthIDReducer);\n  const user = useSelector((state) => state.storeStudentUserDataReducer);\n  const history = useHistory();\n  const dispatch = useDispatch();\n\n  const currExer = useSelector(\n    (state) => state.storeStudentNextExerciseReducer\n  );\n  const course = useSelector((state) => state.storeStudentSingleCourseReducer);\n\n  //   HANDLE\n  const handleExercise = () => {\n    if (currExer.Type === \"textual\") {\n      return (\n        <div>\n          <div>\n            <p>{currExer.Text}</p>\n          </div>\n\n          <div>\n            <textarea id=\"taTextualResponse\" placeholder=\"Response\"></textarea>\n          </div>\n          <div>\n            <button onClick={navQuiz}>Finish</button>\n          </div>\n        </div>\n      );\n    }\n  };\n\n  // NAV\n  const navQuiz = () => {\n    // First, store their response to DB. No need to dispatch\n    const textRes = document.querySelector(\"#taTextualResponse\").value;\n\n    const rand1 = RandomString();\n    const rand2 = RandomString();\n    const exerResID = `ExerRes${rand1}${rand2}`;\n\n    students_Collection\n      .doc(studentAuthID)\n      .collection(\"Exercises\")\n      .doc(exerResID)\n      .set({\n        Course: course.Name,\n        Response: textRes,\n        Order: currExer.Order,\n        Name: currExer.Name,\n        Date: GetToday(),\n      })\n      .catch((err) => console.log(err));\n\n    // Store in CourseProgress\n    const rand3 = RandomString();\n    const rand4 = RandomString();\n    const progID = `Prog${rand3}${rand4}`;\n\n    // Update Course Progress\n    students_Collection\n      .doc(studentAuthID)\n      .collection(\"CourseProgress\")\n      .doc(progID)\n      .set({\n        CourseName: course.Name,\n        CompName: currExer.Name,\n        CompType: \"Exercise\",\n        Order: currExer.Order,\n        Date: GetToday(),\n      })\n      .catch((err) => console.log(err));\n\n    // Get Next Quiz\n    courses_Collection\n      .doc(course.id)\n      .collection(\"Quizzes\")\n      .get()\n      .then((snapshot) => {\n        const quizData = firebaseLooper(snapshot);\n        quizData.forEach((quiz) => {\n          if (quiz.Order === currExer.Order) {\n            courses_Collection\n              .doc(course.id)\n              .collection(\"Quizzes\")\n              .doc(quiz.id)\n              .collection(\"Components\")\n              .get()\n              .then((snapshot) => {\n                const compData = firebaseLooper(snapshot);\n\n                const quizObj = {\n                  ...quiz,\n                  Components: compData,\n                };\n\n                dispatch(storeStudentNextQuizAction(quizObj));\n              })\n              .catch((err) => console.log(err));\n          }\n        });\n      })\n      .catch((err) => console.log(err));\n\n    history.push(\"/student-course-quiz\");\n  };\n\n  useEffect(() => {\n    if (!studentAuthID) {\n      history.push(\"/studentdash\");\n      return;\n    }\n  }, []);\n  return (\n    <div>\n      <div>\n        <h1>{currExer.Name}</h1>\n      </div>\n\n      {/* Content */}\n      <div>{handleExercise()}</div>\n\n      {/* Footer */}\n      <div>\n        <Footer />\n      </div>\n    </div>\n  );\n}\n","/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Teachers/Assignments/AssignmentNew.js",["633"],"/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Students/Profile/ProfileAboutEdit.js",["634","635"],"import React, { useEffect } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { useHistory } from \"react-router-dom\";\n\nimport InputDateFormatter from \"../../InputDateFormatter\";\nimport FirebaseDate from \"../../FirebaseDate\";\nimport GetToday from \"../../GetToday\";\nimport RandomString from \"../../RandomString\";\nimport {\n  storeStudentAboutAction,\n  storeStudentExpAction,\n  toggleNewExpFormAction,\n  toggleNewInstrumentFormAction,\n} from \"../../../redux/actions\";\nimport { students_Collection } from \"../../../utils/firebase\";\n\nexport default function ProfileAboutEdit() {\n  const studentAuthID = useSelector((state) => state.storeStudentAuthIDReducer);\n  const user = useSelector((state) => state.storeStudentUserDataReducer);\n  const history = useHistory();\n  const dispatch = useDispatch();\n\n  const about = useSelector((state) => state.storeStudentAboutReducer);\n  const exps = useSelector((state) => state.storeStudentExpReducer);\n\n  const toggleNewExpForm = useSelector(\n    (state) => state.toggleNewExpFormReducer\n  );\n  const toggleNewInstrumentForm = useSelector(\n    (state) => state.toggleNewInstrumentFormReducer\n  );\n\n  // HANDLE\n  const handleEditExp = () => {\n    return exps.map((exp, i) => {\n      return (\n        <div>\n          <div>\n            <h3>Institution</h3>\n            <input\n              id={`tbInstEdit${i}`}\n              type=\"text\"\n              defaultValue={exp.Institution}\n            />\n          </div>\n          <div>\n            <h3>Description</h3>\n            <textarea id={`taDescEdit${i}`} defaultValue={exp.Desc} />\n          </div>\n          <div>\n            <h3>Started</h3>\n            <input\n              type=\"date\"\n              id={`daStart${i}`}\n              defaultValue={InputDateFormatter(exp.Start)}\n            ></input>\n          </div>\n\n          <div>\n            <h3>Ended</h3>\n            <input\n              type=\"date\"\n              id={`daEnd${i}`}\n              defaultValue={InputDateFormatter(exp.End)}\n            ></input>\n          </div>\n          <button id={exp.id} onClick={removeExp}>\n            Remove\n          </button>\n          <hr />\n        </div>\n      );\n    });\n  };\n  const handleInstruments = () => {\n    if (about.Instruments) {\n      return about.Instruments.map((ins, i) => {\n        return (\n          <div key={i}>\n            <input id={`tbInstrument${i}`} type=\"text\" defaultValue={ins} />\n            <button id={ins} onClick={removeInstrument}>\n              -\n            </button>\n          </div>\n        );\n      });\n    }\n  };\n  const handleNewExp = () => {\n    return (\n      <div>\n        <div>\n          <h3>Institution</h3>\n          <input id=\"tbNewInstitution\" type=\"text\" placeholder=\"Institution\" />\n        </div>\n        <div>\n          <h3>Description</h3>\n          <textarea id=\"tbNewDesc\" placeholder=\"Description\"></textarea>\n        </div>\n        <div>\n          <h3>Started</h3>\n          <input\n            type=\"date\"\n            id=\"daNewStarted\"\n            defaultValue={InputDateFormatter(GetToday())}\n          />\n        </div>\n        <div>\n          <h3>Ended</h3>\n          <input\n            type=\"date\"\n            id=\"daNewEnded\"\n            defaultValue={InputDateFormatter(GetToday())}\n          />\n        </div>\n\n        <button onClick={saveExp}>Apply</button>\n      </div>\n    );\n  };\n  const handleNewInstrument = () => {\n    return (\n      <div>\n        <input id=\"tbNewInstrument\" type=\"text\" placeholder=\"Instrument\" />\n        <button onClick={saveInstrument}>Apply</button>\n      </div>\n    );\n  };\n\n  //   POST\n  const saveExp = () => {\n    const institution = document.querySelector(\"#tbNewInstitution\").value;\n    const desc = document.querySelector(\"#tbNewDesc\").value;\n    const started = FirebaseDate(document.querySelector(\"#daNewStarted\").value);\n    const ended = FirebaseDate(document.querySelector(\"#daNewEnded\").value);\n\n    const rand1 = RandomString();\n    const rand2 = RandomString();\n    const expID = `Exp${rand1}${rand2}`;\n\n    students_Collection\n      .doc(studentAuthID)\n      .collection(\"Profile\")\n      .doc(\"Experience\")\n      .collection(\"ExpBlocks\")\n      .doc(expID)\n      .set({\n        Institution: institution,\n        Desc: desc,\n        Start: started,\n        End: ended,\n      })\n      .catch((err) => console.log(err));\n\n    //   Dispatch\n    const allExp = [...exps];\n    allExp.push({\n      id: expID,\n      Institution: institution,\n      Desc: desc,\n      Start: started,\n      End: ended,\n    });\n\n    dispatch(storeStudentExpAction(allExp));\n    dispatch(toggleNewExpFormAction());\n  };\n  const saveInstrument = () => {\n    const instrument = document.querySelector(\"#tbNewInstrument\").value;\n    const allInstruments = [...about.Instruments];\n    allInstruments.push(instrument);\n    //   Save to DB\n    students_Collection\n      .doc(studentAuthID)\n      .collection(\"Profile\")\n      .doc(\"About\")\n      .update({\n        Instruments: [...allInstruments],\n      })\n      .catch((err) => console.log(err));\n\n    //   Dispatch\n    const aboutObj = { ...about };\n    aboutObj.Instruments = [...allInstruments];\n\n    dispatch(storeStudentAboutAction(aboutObj));\n    dispatch(toggleNewInstrumentFormAction());\n  };\n  const saveAllChanges = () => {\n    const aboutText = document.querySelector(\"#taAboutText\").value;\n\n    const expCount = exps.length;\n    const instCount = about.Instruments.length;\n\n    const allExp = [];\n    const allInst = [];\n\n    for (let i = 0; i < expCount; i = i + 1) {\n      const expIns = document.querySelector(`#tbInstEdit${i}`).value;\n      const expDesc = document.querySelector(`#taDescEdit${i}`).value;\n      const expStart = document.querySelector(`#daStart${i}`).value;\n      const expEnd = document.querySelector(`#daEnd${i}`).value;\n\n      const tempObj = {\n        id: exps[i].id,\n        Institution: expIns,\n        Desc: expDesc,\n        Start: FirebaseDate(expStart),\n        End: FirebaseDate(expEnd),\n      };\n\n      allExp.push(tempObj);\n    }\n\n    for (let i = 0; i < instCount; i = i + 1) {\n      const ins = document.querySelector(`#tbInstrument${i}`).value;\n      allInst.push(ins);\n    }\n\n    const location = document.querySelector(\"#tbLocation\").value;\n\n    // Save to DB\n\n    // About\n    students_Collection\n      .doc(studentAuthID)\n      .collection(\"Profile\")\n      .doc(\"About\")\n      .update({\n        About: aboutText,\n        Location: location,\n        Instruments: [...allInst],\n      })\n      .catch((err) => console.log(err));\n\n    //   Experience\n    allExp.forEach((ex) => {\n      students_Collection\n        .doc(studentAuthID)\n        .collection(\"Profile\")\n        .doc(\"Experience\")\n        .collection(\"ExpBlocks\")\n        .doc(ex.id)\n        .update({\n          Institution: ex.Institution,\n          Desc: ex.Desc,\n          Start: ex.Start,\n          End: ex.End,\n        })\n        .catch((err) => console.log(err));\n    });\n\n    // Dispatch\n\n    // About\n    about.About = aboutText;\n    about.Instruments = [...allInst];\n    about.Location = location;\n\n    history.push(\"/student-profile/about\");\n  };\n\n  //   REMOVE\n  const removeExp = (event) => {\n    const expID = event.target.getAttribute(\"id\");\n\n    // Remove from DB\n    students_Collection\n      .doc(studentAuthID)\n      .collection(\"Profile\")\n      .doc(\"Experience\")\n      .collection(\"ExpBlocks\")\n      .doc(expID)\n      .delete()\n      .catch((err) => console.log(err));\n\n    //   Dispatch\n    const allExp = [...exps];\n    const filtered = allExp.filter((ex) => ex.id !== expID);\n\n    dispatch(storeStudentExpAction(filtered));\n  };\n  const removeInstrument = (event) => {\n    const instrument = event.target.getAttribute(\"id\");\n\n    const allInstruments = [...about.Instruments];\n    const filtered = allInstruments.filter((inst) => inst !== instrument);\n\n    // Remove from DB\n    students_Collection\n      .doc(studentAuthID)\n      .collection(\"Profile\")\n      .doc(\"About\")\n      .update({\n        Instruments: [...filtered],\n      })\n      .catch((err) => console.log(err));\n\n    //   Dispatch\n\n    const aboutObj = { ...about };\n    aboutObj.Instruments = [...filtered];\n\n    dispatch(storeStudentAboutAction(aboutObj));\n  };\n\n  useEffect(() => {\n    if (!studentAuthID) {\n      history.push(\"/studentdash\");\n      return;\n    }\n  }, []);\n  return (\n    <div>\n      {/* About */}\n      <div>\n        <h2>About</h2>\n        <textarea id=\"taAboutText\" defaultValue={about.About}></textarea>\n      </div>\n\n      {/* Experience */}\n      <div>\n        <h2>Experience</h2>\n        <div>{handleEditExp()}</div>\n        <div>{toggleNewExpForm ? handleNewExp() : null}</div>\n        <br />\n        <button onClick={() => dispatch(toggleNewExpFormAction())}>\n          {toggleNewExpForm ? \"Close\" : \"Add Experience\"}\n        </button>\n      </div>\n\n      {/* Persona; */}\n      <div>\n        <h2>Personal</h2>\n        <h3>Location:</h3>\n        <input type=\"text\" id=\"tbLocation\" defaultValue={about.Location} />\n        <h3>Instruments:</h3>\n        {/* instruments */}\n        {handleInstruments()}\n        <br />\n        {toggleNewInstrumentForm ? handleNewInstrument() : null}\n        <button onClick={() => dispatch(toggleNewInstrumentFormAction())}>\n          {toggleNewInstrumentForm ? \"Close\" : \"+\"}\n        </button>\n      </div>\n      <br />\n      <button onClick={saveAllChanges}>Save All Changes</button>\n    </div>\n  );\n}\n","/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Students/Assignments/StudentAssignmentsMain.js",["636","637","638","639","640","641"],"import React, { useEffect } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { useHistory } from \"react-router-dom\";\n\nimport TopBar from \"../TopBar\";\nimport Footer from \"../Footer\";\nimport {\n  students_Collection,\n  teachers_Collection,\n} from \"../../../utils/firebase\";\nimport {\n  storeStudentAssignmentsAction,\n  storeStudentSingleAssignmentAction,\n  storeStudentAssignmentsInfoAction,\n} from \"../../../redux/actions\";\nimport { firebaseLooper } from \"../../../utils/tools\";\n\nexport default function StudentAssignmentsMain() {\n  const studentAuthID = useSelector((state) => state.storeStudentAuthIDReducer);\n  const user = useSelector((state) => state.storeStudentUserDataReducer);\n  const history = useHistory();\n  const dispatch = useDispatch();\n\n  const assignments = useSelector(\n    (state) => state.storeStudentAssignmentsReducer\n  );\n  const assignmentsInfo = useSelector(\n    (state) => state.storeStudentAssignmentsInfoReducer\n  );\n\n  //   GET\n  const getAllAssignments = () => {\n    // Get list of assignments info\n    students_Collection\n      .doc(studentAuthID)\n      .collection(\"AssignmentsInfo\")\n      .get()\n      .then((snapshot) => {\n        const assignmentList = firebaseLooper(snapshot);\n        dispatch(storeStudentAssignmentsInfoAction(assignmentList));\n      })\n      .catch((err) => console.log(err));\n  };\n\n  //   HANDLE\n  const handleCompleteAssignmentList = () => {\n    return assignmentsInfo.map((assInfo, i) => {\n      if (assInfo.isComplete) {\n        return (\n          <div key={i}>\n            <h3>{assInfo.Name}</h3>\n            <p>Teacher: {assInfo.Teacher}</p>\n            <p style={{ color: \"green\" }}>Complete!</p>\n          </div>\n        );\n      }\n    });\n  };\n\n  const handleIncompleteAssignmentList = () => {\n    return assignmentsInfo.map((assInfo, i) => {\n      if (!assInfo.isComplete) {\n        return (\n          <div key={i}>\n            <h3>{assInfo.Name}</h3>\n            <p>{assInfo.Desc}</p>\n            <p>Teacher: {assInfo.Teacher}</p>\n            <button id={assInfo.AssID} onClick={navAssignmentView}>\n              View\n            </button>\n          </div>\n        );\n      }\n    });\n  };\n\n  //   NAV\n  const navAssignmentView = (event) => {\n    const assID = event.target.getAttribute(\"id\");\n\n    assignmentsInfo.forEach((ass) => {\n      if (ass.AssID === assID) {\n        teachers_Collection\n          .doc(ass.Teacher)\n          .collection(\"Assignments\")\n          .get()\n          .then((snapshot) => {\n            const assData = firebaseLooper(snapshot);\n            assData.forEach((ad) => {\n              if (ad.id === assID) {\n                dispatch(storeStudentSingleAssignmentAction(ad));\n              }\n            });\n          })\n          .catch((err) => console.log(err));\n      }\n    });\n\n    history.push(\"/student-assignment-view\");\n  };\n\n  useEffect(() => {\n    if (!studentAuthID) {\n      history.push(\"/studentdash\");\n      return;\n    }\n\n    getAllAssignments();\n  }, []);\n  return (\n    <div>\n      {/* Top Bar */}\n      <div>\n        <TopBar />\n      </div>\n\n      <div>\n        <h1>Assignments</h1>\n\n        <br />\n        <h3>Incomplete</h3>\n        {handleIncompleteAssignmentList()}\n        <hr />\n        <h3>Completed</h3>\n        {handleCompleteAssignmentList()}\n      </div>\n\n      {/* Footer */}\n      <div>\n        <Footer />\n      </div>\n    </div>\n  );\n}\n","/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Teachers/Events/EventsMain.js",["642","643","644"],"import React, { useEffect } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { useHistory } from \"react-router-dom\";\n\nimport TopBar from \"../Dash/TopBar\";\nimport DashFooter from \"../Dash/DashFooter\";\nimport GetToday from \"../../GetToday\";\n\nimport { teachers_Collection } from \"../../../utils/firebase\";\nimport {\n  storeTeacherEventsGeneralInfoAction,\n  storeTodayArrayAction,\n  storeMonthEventsAction,\n  storeSingleMonthEventAction,\n} from \"../../../redux/actions\";\nimport { firebaseLooper } from \"../../../utils/tools\";\n\nexport default function EventsMain() {\n  const teacherAuthID = useSelector((state) => state.storeTeacherAuthIDReducer);\n  const history = useHistory();\n  const dispatch = useDispatch();\n\n  const events = useSelector(\n    (state) => state.storeTeacherEventsGeneralInfoReducer\n  );\n\n  const todayArray = useSelector((state) => state.storeTodayArrayReducer);\n  const monthEvents = useSelector((state) => state.storeMonthEventsReducer);\n\n  // GET\n  const getAllEvents = () => {\n    teachers_Collection\n      .doc(teacherAuthID)\n      .collection(\"Events\")\n      .orderBy(\"Start\", \"asc\")\n      .get()\n      .then((snapshot) => {\n        const eventsData = firebaseLooper(snapshot);\n        dispatch(storeTeacherEventsGeneralInfoAction(eventsData));\n      })\n      .catch((err) => console.log(err));\n  };\n\n  // HANDLE\n  const handleEventList = () => {\n    return monthEvents.map((eve, i) => {\n      return (\n        <div key={i}>\n          <h3>{eve.Name}</h3>\n          <p>\n            Start:{\" \"}\n            {eve.Start ? eve.Start.toDate().toString().substr(4, 11) : null}\n          </p>\n          <p>\n            End: {eve.End ? eve.End.toDate().toString().substr(4, 11) : null}\n          </p>\n          <button id={eve.id} onClick={navEventView}>\n            View\n          </button>\n          <button id={eve.id} onClick={navEventEdit}>\n            Edit\n          </button>\n          <button id={eve.id} onClick={removeEvent}>\n            Remove\n          </button>\n        </div>\n      );\n    });\n  };\n\n  // EVENT STUFFS\n  const turnMonthToNum = (shortMonth) => {\n    switch (shortMonth) {\n      case \"Jan\":\n        return 1;\n      case \"Feb\":\n        return 2;\n      case \"Mar\":\n        return 3;\n      case \"Apr\":\n        return 4;\n      case \"May\":\n        return 5;\n      case \"Jun\":\n        return 6;\n      case \"Jul\":\n        return 7;\n      case \"Aug\":\n        return 8;\n      case \"Sep\":\n        return 9;\n      case \"Oct\":\n        return 10;\n      case \"Nov\":\n        return 11;\n      case \"Dec\":\n        return 12;\n      default:\n        return \"No Month Found.\";\n    }\n  };\n  const turnMonthToLong = (shortMonth) => {\n    switch (shortMonth) {\n      case \"Jan\":\n        return \"January\";\n      case \"Feb\":\n        return \"Feburary\";\n      case \"Mar\":\n        return \"March\";\n      case \"Apr\":\n        return \"April\";\n      case \"May\":\n        return \"May\";\n      case \"Jun\":\n        return \"June\";\n      case \"Jul\":\n        return \"July\";\n      case \"Aug\":\n        return \"August\";\n      case \"Sep\":\n        return \"September\";\n      case \"Oct\":\n        return \"October\";\n      case \"Nov\":\n        return \"November\";\n      case \"Dec\":\n        return \"December\";\n      default:\n        return \"No Month Found.\";\n    }\n  };\n  const turnNumToShort = (numMonth) => {\n    switch (numMonth) {\n      case 1:\n        return \"Jan\";\n      case 2:\n        return \"Feb\";\n      case 3:\n        return \"Mar\";\n      case 4:\n        return \"Apr\";\n      case 5:\n        return \"May\";\n      case 6:\n        return \"Jun\";\n      case 7:\n        return \"Jul\";\n      case 8:\n        return \"Aug\";\n      case 9:\n        return \"Sep\";\n      case 10:\n        return \"Oct\";\n      case 11:\n        return \"Nov\";\n      case 12:\n        return \"Dec\";\n      default:\n        return \"No Month Found.\";\n    }\n  };\n  const turnNumToLong = (numMonth) => {\n    switch (numMonth) {\n      case 1:\n        return \"January\";\n      case 2:\n        return \"February\";\n      case 3:\n        return \"March\";\n      case 4:\n        return \"April\";\n      case 5:\n        return \"May\";\n      case 6:\n        return \"June\";\n      case 7:\n        return \"July\";\n      case 8:\n        return \"August\";\n      case 9:\n        return \"September\";\n      case 10:\n        return \"October\";\n      case 11:\n        return \"November\";\n      case 12:\n        return \"December\";\n      default:\n        return \"No Month Found\";\n    }\n  };\n\n  const getEventDetails = () => {\n    const today = GetToday().toDate().toString().substr(4, 11).split(\" \");\n    const todayArr = [\n      turnMonthToNum(today[0]),\n      parseInt(today[1], 10),\n      parseInt(today[2], 10),\n    ];\n\n    dispatch(storeTodayArrayAction(todayArr));\n\n    const todayMonth = todayArray[0];\n    const todayYear = todayArray[2];\n\n    const currentEvents = [];\n    events.forEach((eve) => {\n      if (eve.Start) {\n        const startArr = eve.Start.toDate().toString().substr(4, 11).split(\" \");\n        const endArr = eve.End.toDate().toString().substr(4, 11).split(\" \");\n\n        const startMonth = turnMonthToNum(startArr[0]);\n        const startYear = parseInt(startArr[2], 10);\n\n        const endMonth = turnMonthToNum(endArr[0]);\n        const endYear = parseInt(endArr[2], 10);\n\n        if (startMonth === todayMonth) {\n          if (startYear === todayYear) {\n            currentEvents.push(eve);\n          }\n        } else if (endMonth === todayMonth) {\n          if (endYear === todayYear) {\n            currentEvents.push(eve);\n          }\n        }\n      }\n    });\n\n    dispatch(storeMonthEventsAction(currentEvents));\n  };\n\n  const goBackMonth = () => {\n    let month = todayArray[0];\n    let day = todayArray[1];\n    let year = todayArray[2];\n\n    if (month === 1) {\n      month = 12;\n      year = year - 1;\n    } else {\n      month = month - 1;\n    }\n\n    const newTodayArr = [month, day, year];\n\n    dispatch(storeTodayArrayAction(newTodayArr));\n\n    const todayMonth = month;\n    const todayYear = year;\n\n    const currentEvents = [];\n    events.forEach((eve) => {\n      if (eve.Start) {\n        const startArr = eve.Start.toDate().toString().substr(4, 11).split(\" \");\n        const endArr = eve.End.toDate().toString().substr(4, 11).split(\" \");\n\n        const startMonth = turnMonthToNum(startArr[0]);\n        const startYear = parseInt(startArr[2], 10);\n\n        const endMonth = turnMonthToNum(endArr[0]);\n        const endYear = parseInt(endArr[2], 10);\n\n        if (startMonth === todayMonth) {\n          if (startYear === todayYear) {\n            currentEvents.push(eve);\n          }\n        } else if (endMonth === todayMonth) {\n          if (endYear === todayYear) {\n            currentEvents.push(eve);\n          }\n        }\n      }\n    });\n\n    dispatch(storeMonthEventsAction(currentEvents));\n  };\n  const goForwMonth = () => {\n    let month = todayArray[0];\n    let day = todayArray[1];\n    let year = todayArray[2];\n\n    if (month === 12) {\n      month = 11;\n      year = year + 1;\n    } else {\n      month = month + 1;\n    }\n\n    const newTodayArr = [month, day, year];\n\n    dispatch(storeTodayArrayAction(newTodayArr));\n\n    const todayMonth = month;\n    const todayYear = year;\n\n    const currentEvents = [];\n    events.forEach((eve) => {\n      if (eve.Start) {\n        const startArr = eve.Start.toDate().toString().substr(4, 11).split(\" \");\n        const endArr = eve.End.toDate().toString().substr(4, 11).split(\" \");\n\n        const startMonth = turnMonthToNum(startArr[0]);\n        const startYear = parseInt(startArr[2], 10);\n\n        const endMonth = turnMonthToNum(endArr[0]);\n        const endYear = parseInt(endArr[2], 10);\n\n        if (startMonth === todayMonth) {\n          if (startYear === todayYear) {\n            currentEvents.push(eve);\n          }\n        } else if (endMonth === todayMonth) {\n          if (endYear === todayYear) {\n            currentEvents.push(eve);\n          }\n        }\n      }\n    });\n\n    dispatch(storeMonthEventsAction(currentEvents));\n  };\n\n  // REMOVE\n  const removeEvent = (event) => {\n    const eventID = event.target.getAttribute(\"id\");\n\n    // Remove from DB\n    teachers_Collection\n      .doc(teacherAuthID)\n      .collection(\"Events\")\n      .doc(eventID)\n      .delete()\n      .catch((err) => console.log(err));\n\n    // Dispatch\n\n    const allEvents = [...events];\n    const newEves = allEvents.filter((eee) => eee.id !== eventID);\n\n    const allMonthEvents = [...monthEvents];\n    const newMonthEves = allMonthEvents.filter((eee) => eee.id !== eventID);\n\n    dispatch(storeTeacherEventsGeneralInfoAction(newEves));\n    dispatch(storeMonthEventsAction(newMonthEves));\n  };\n\n  // NAV\n  const navEventView = (event) => {\n    const eventID = event.target.getAttribute(\"id\");\n\n    monthEvents.forEach((eve) => {\n      if (eve.id === eventID) {\n        dispatch(storeSingleMonthEventAction(eve));\n      }\n    });\n\n    history.push(\"/teacher-event-view\");\n  };\n  const navEventEdit = (event) => {\n    const eventID = event.target.getAttribute(\"id\");\n\n    monthEvents.forEach((eve) => {\n      if (eve.id === eventID) {\n        dispatch(storeSingleMonthEventAction(eve));\n      }\n    });\n\n    history.push(\"/teacher-event-edit\");\n  };\n  const navEventNew = () => {\n    history.push(\"/teacher-event-new\");\n  };\n\n  useEffect(() => {\n    if (!teacherAuthID) {\n      history.push(\"/teacherdash\");\n      return;\n    }\n\n    getAllEvents();\n    getEventDetails();\n  }, []);\n  return (\n    <div>\n      {/* Top Bar */}\n      <div>\n        <TopBar />\n      </div>\n\n      {/* Content */}\n      <div>\n        <h1>Events</h1>\n        <button className=\"btn-lime\" onClick={navEventNew}>\n          Create Event\n        </button>\n        <button onClick={() => getEventDetails()}>Rerender</button>\n        <div>\n          {/* Show current month */}\n          <h2>\n            {turnNumToLong(todayArray[0])}, {todayArray[2]}\n          </h2>\n          <button onClick={goBackMonth}>{`<`}</button>\n          <button onClick={goForwMonth}>{`>`}</button>\n        </div>\n\n        <div>{handleEventList()}</div>\n      </div>\n\n      {/* Footer */}\n      <div>\n        <DashFooter />\n      </div>\n    </div>\n  );\n}\n","/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Home/HomeCoursesDeck.js",[],"/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Teachers/Tutorials/TutorialsMain.js",[],"/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Students/TopBar.js",["645"],"import \"./TopBar.css\";\nimport { firebaseLooper } from \"../../utils/tools\";\nimport {\n  studentReqQueue_Collection,\n  students_Collection,\n  teachers_Collection,\n} from \"../../utils/firebase\";\nimport React, { useEffect } from \"react\";\nimport RandomString from \"../RandomString\";\nimport GetToday from \"../GetToday\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { useHistory } from \"react-router-dom\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport {\n  faCommentAlt,\n  faBell,\n  faSignOutAlt,\n  faUser,\n  faStar,\n  faExclamationCircle,\n  faTimes,\n  faPlusCircle,\n  faChalkboardTeacher,\n  faBookReader,\n} from \"@fortawesome/free-solid-svg-icons\";\nimport {\n  storeAccountTypeAction,\n  storeTeacherAuthIDAction,\n  isLoggedInAction,\n  storeStudentNotificationsAction,\n  toggleStudentNotificationsWindowAction,\n} from \"../../redux/actions\";\n\nexport default function TopBar() {\n  const user = useSelector((state) => state.storeStudentUserDataReducer);\n  const studentAuthID = useSelector((state) => state.storeStudentAuthIDReducer);\n  const history = useHistory();\n  const dispatch = useDispatch();\n\n  // States\n  const toggleNotifWin = useSelector(\n    (state) => state.toggleStudentNotificationsWindowReducer\n  );\n  const notifications = useSelector(\n    (state) => state.storeStudentNotificationsReducer\n  );\n\n  // GET\n  const getAllNotifications = () => {\n    students_Collection\n      .doc(studentAuthID)\n      .collection(\"Notifications\")\n      .orderBy(\"Date\", \"desc\")\n      .get()\n      .then((snapshot) => {\n        const notifData = firebaseLooper(snapshot);\n        dispatch(storeStudentNotificationsAction(notifData));\n      })\n      .catch((err) => console.log(err));\n  };\n\n  // HANDLE\n  const handleNotificationsList = () => {\n    return notifications.map((notif, i) => {\n      return (\n        <div className=\"notifPanel\" key={i}>\n          <div className=\"topPanel\">\n            <FontAwesomeIcon\n              className=\"iconNotif\"\n              icon={\n                notif.Icon === \"faBell\"\n                  ? faBell\n                  : notif.Icon === \"faUser\"\n                  ? faUser\n                  : notif.Icon === \"faStar\"\n                  ? faStar\n                  : notif.Icon === \"faExclamationCircle\"\n                  ? faExclamationCircle\n                  : null\n              }\n            />\n            <p className=\"notifText\">{notif.Text}</p>\n            <p className=\"notifDate\">\n              {notif.Date ? notif.Date.toDate().toString().substr(4, 11) : null}\n            </p>\n            <button className=\"notifDel\">\n              <FontAwesomeIcon className=\"notifDelIcon\" icon={faTimes} />\n            </button>\n          </div>\n          <div className=\"bottomPanel\">\n            {notif.Action === \"request\" ? (\n              <div className=\"btnsNotifReq\">\n                <button\n                  id={notif.id}\n                  onClick={onAcceptReqClick}\n                  className=\"btnReq reqAccept\"\n                >\n                  Accept\n                </button>\n                <button\n                  id={notif.id}\n                  onClick={onDeclineReqClick}\n                  className=\"btnReq reqDecline\"\n                >\n                  Decline\n                </button>\n              </div>\n            ) : notif.Action === \"navigate\" ? (\n              <div className=\"btnNotifNav\">\n                <button className=\"btnReq notifNav\">Go to Page</button>\n              </div>\n            ) : null}\n          </div>\n        </div>\n      );\n    });\n  };\n\n  // CLICK\n  const onAcceptReqClick = (event) => {\n    // Remove Notification\n    const notifID = event.target.getAttribute(\"id\");\n    students_Collection\n      .doc(studentAuthID)\n      .collection(\"Notifications\")\n      .doc(notifID)\n      .delete()\n      .catch((err) => console.log(err));\n\n    // Dispatch notif removal\n    const allNotifs = [...notifications];\n    const filtered = allNotifs.filter((n) => n.id !== notifID);\n\n    dispatch(storeStudentNotificationsAction(filtered));\n\n    // Remove Request\n    studentReqQueue_Collection\n      .where(\"StudentID\", \"==\", studentAuthID)\n      .get()\n      .then((snapshot) => {\n        const studReq = firebaseLooper(snapshot);\n        studReq.forEach((req) => {\n          // Send Student Data\n          teachers_Collection\n            .doc(req.TeacherID)\n            .collection(\"Students\")\n            .doc(studentAuthID)\n            .set({\n              FirstName: user.FirstName,\n              LastName: user.LastName,\n              Email: user.Email,\n            })\n            .catch((err) => console.log(err));\n\n          // Add Teacher to list\n          const rand1 = RandomString();\n          const rand2 = RandomString();\n          const teachID = `Teach${rand1}${rand2}`;\n          const nID = `Notif${rand1}${rand2}`;\n\n          students_Collection\n            .doc(studentAuthID)\n            .collection(\"Teachers\")\n            .doc(teachID)\n            .set({\n              FirstName: req.TFirstName,\n              LastName: req.TLastName,\n              TeacherID: req.TeacherID,\n            })\n            .catch((err) => console.log(err));\n\n          // Send teacher notification\n\n          teachers_Collection\n            .doc(req.TeacherID)\n            .collection(\"Notifications\")\n            .doc(nID)\n            .set({\n              Action: \"\",\n              Date: GetToday(),\n              Text: `${user.FirstName} ${user.LastName} has accepted your request.`,\n              Icon: \"faUser\",\n            })\n            .catch((err) => console.log(err));\n\n          // Remove from queue\n          studentReqQueue_Collection\n            .doc(req.id)\n            .delete()\n            .catch((err) => console.log(err));\n        });\n      })\n      .catch((err) => console.log(err));\n  };\n  const onDeclineReqClick = (event) => {\n    // Remove Notification\n    const notifID = event.target.getAttribute(\"id\");\n\n    students_Collection\n      .doc(studentAuthID)\n      .collection(\"Notifications\")\n      .doc(notifID)\n      .delete()\n      .catch((err) => console.log(err));\n\n    // Dispatch notif\n    const allNotifs = [...notifications];\n    const filtered = allNotifs.filter((n) => n.id !== notifID);\n\n    dispatch(storeStudentNotificationsAction(filtered));\n\n    // Remove from Requests\n    studentReqQueue_Collection\n      .where(\"StudentID\", \"==\", studentAuthID)\n      .get()\n      .then((snapshot) => {\n        const studReq = firebaseLooper(snapshot);\n        studReq.forEach((req) => {\n          // Send Notification\n          const rand1 = RandomString();\n          const rand2 = RandomString();\n          const nID = `Notif${rand1}${rand2}`;\n          teachers_Collection\n            .doc(req.TeacherID)\n            .collection(\"Notifications\")\n            .doc(nID)\n            .set({\n              Action: \"\",\n              Date: GetToday(),\n              Text: `${user.FirstName} ${user.LastName} has declined your request.`,\n              Icon: \"faUser\",\n            })\n            .catch((err) => console.log(err));\n\n          // Remove from queue\n          studentReqQueue_Collection\n            .doc(req.id)\n            .delete()\n            .catch((err) => console.log(err));\n        });\n      })\n      .catch((err) => console.log(err));\n  };\n\n  useEffect(() => {\n    if (!studentAuthID) {\n      history.push(\"/studentdash\");\n      return;\n    }\n\n    getAllNotifications();\n  }, []);\n  const onLogOut = () => {\n    dispatch(storeAccountTypeAction(\"\"));\n    dispatch(storeTeacherAuthIDAction(\"\"));\n    dispatch(isLoggedInAction());\n    history.push(\"/login\");\n  };\n\n  return (\n    <div className=\"topbar-wrapper\">\n      <div>\n        <button class=\"btn-topbar\">\n          <FontAwesomeIcon icon={faCommentAlt} />\n        </button>\n\n        <button class=\"btn-topbar\">\n          <FontAwesomeIcon icon={faPlusCircle} />\n        </button>\n        <button class=\"btn-topbar\">\n          <FontAwesomeIcon icon={faChalkboardTeacher} />\n        </button>\n        <button class=\"btn-topbar\">\n          <FontAwesomeIcon icon={faBookReader} />\n        </button>\n      </div>\n      <div id=\"search-input\">\n        <input id=\"tbSearch\" type=\"text\" placeholder=\"Search...\" />\n      </div>\n      <div>\n        <button\n          onClick={() => dispatch(toggleStudentNotificationsWindowAction())}\n          id=\"btnNotif\"\n          class=\"btn-topbar\"\n        >\n          <FontAwesomeIcon icon={faBell} />\n        </button>\n        {toggleNotifWin ? (\n          <div id=\"winNotifications\">{handleNotificationsList()}</div>\n        ) : null}\n      </div>\n      <div className=\"topbar-user\">\n        <p>\n          {user.FirstName} {user.LastName}\n        </p>\n        <p>{user.AccountType}</p>\n      </div>\n      <div>\n        <button onClick={onLogOut} class=\"btn-topbar red\">\n          <FontAwesomeIcon icon={faSignOutAlt} />\n        </button>\n      </div>\n    </div>\n  );\n}\n","/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Home.js",[],"/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Teachers/Dash/RecentInvoices.js",[],"/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Students/Courses/StudentCoursesMain.js",["646","647"],"import React, { useEffect } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { useHistory } from \"react-router-dom\";\n\nimport TopBar from \"../TopBar\";\nimport Footer from \"../Footer\";\nimport {\n  storeStudentSingleCourseAction,\n  flagStudentTeacherConnectionAction,\n  storeStudentTeacherListAction,\n  storeStudentCoursesAction,\n} from \"../../../redux/actions\";\nimport {\n  courses_Collection,\n  teachers_Collection,\n} from \"../../../utils/firebase\";\nimport { firebaseLooper } from \"../../../utils/tools\";\n\nexport default function StudentCoursesMain() {\n  const studentAuthID = useSelector((state) => state.storeStudentAuthIDReducer);\n  const user = useSelector((state) => state.storeStudentUserDataReducer);\n  const history = useHistory();\n  const dispatch = useDispatch();\n\n  // States\n  const studentTeacherConn = useSelector(\n    (state) => state.flagStudentTeacherConnectionReducer\n  );\n  const studentTeacherList = useSelector(\n    (state) => state.storeStudentTeacherListReducer\n  );\n\n  const courses = useSelector((state) => state.storeStudentCoursesReducer);\n\n  //   GET\n  const getStudentTeacherConnection = () => {\n    let teachers = [];\n    teachers_Collection\n      .get()\n      .then((snapshot) => {\n        const teacherList = firebaseLooper(snapshot);\n        teacherList.forEach((teach) => {\n          teachers_Collection\n            .doc(teach.id)\n            .collection(\"Students\")\n            .get()\n            .then((snapshot) => {\n              const studentList = firebaseLooper(snapshot);\n              studentList.forEach((stud) => {\n                if (stud.id === studentAuthID) {\n                  dispatch(flagStudentTeacherConnectionAction(true));\n                  teachers.push(teach);\n                  dispatch(storeStudentTeacherListAction(teachers));\n                }\n              });\n            })\n            .catch((err) => console.log(err));\n        });\n      })\n      .catch((err) => console.log(err));\n  };\n  const getAllCourses = () => {\n    if (studentTeacherConn) {\n      studentTeacherList.forEach((teach) => {\n        courses_Collection\n          .where(\"Creator\", \"==\", teach.id)\n          .get()\n          .then((snapshot) => {\n            const courses = firebaseLooper(snapshot);\n            dispatch(storeStudentCoursesAction(courses));\n          })\n          .catch((err) => console.log(err));\n      });\n    }\n  };\n\n  //   HANDLE\n  const handleCourseList = () => {\n    return courses.map((course, i) => {\n      return (\n        <div key={i}>\n          <h3>{course.Name}</h3>\n          <h4>Instructor: {course.Creator}</h4>\n          <button id={course.id} onClick={navCoursePreview}>\n            Enter Course\n          </button>\n        </div>\n      );\n    });\n  };\n\n  //   NAVIGATE\n  const navCoursePreview = (event) => {\n    const courseID = event.target.getAttribute(\"id\");\n\n    courses.forEach((course) => {\n      if (course.id === courseID) {\n        dispatch(storeStudentSingleCourseAction(course));\n      }\n    });\n\n    history.push(\"/student-course-preview\");\n  };\n\n  useEffect(() => {\n    if (!studentAuthID) {\n      history.push(\"/studentdash\");\n      return;\n    }\n\n    getStudentTeacherConnection();\n    getAllCourses();\n  }, []);\n  return (\n    <div>\n      {/* TopBar */}\n      <div>\n        <TopBar />\n      </div>\n\n      {/* Content */}\n      <div>\n        <div>\n          <h1>Courses</h1>\n        </div>\n\n        {/* Search */}\n        <div>\n          <input\n            id=\"tbCourseSearch\"\n            type=\"text\"\n            placeholder=\"Type Course Name/Keywords\"\n          />\n        </div>\n        <hr />\n        <button\n          onClick={() => {\n            getStudentTeacherConnection();\n            getAllCourses();\n          }}\n        >\n          Rerender\n        </button>\n        {/* Course List */}\n        <div>{handleCourseList()}</div>\n      </div>\n\n      {/* Footer */}\n      <div>\n        <Footer />\n      </div>\n    </div>\n  );\n}\n","/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Teachers/Assignments/AssignmentsMain.js",["648"],"/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Teachers/Dash/SimpleStats.js",[],"/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/MiscComponents/Notice.js",[],"/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Students/StudentDash.js",["649","650","651","652"],"import React, { useEffect } from \"react\";\n\nimport { useHistory } from \"react-router-dom\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport {\n  storeAccountTypeAction,\n  storeStudentAuthIDAction,\n  isLoggedInAction,\n  storeStudentUserDataAction,\n} from \"../../redux/actions\";\n\nimport TopBar from \"./TopBar\";\nimport Footer from \"./Footer\";\nimport \"./StudentDash.css\";\nimport { users_Collection } from \"../../utils/firebase\";\nimport { firebaseLooper } from \"../../utils/tools\";\n\nexport default function StudentDash() {\n  const studentAuthID = useSelector((state) => state.storeStudentAuthIDReducer);\n  const history = useHistory();\n  const dispatch = useDispatch();\n\n  const getStudentUserData = () => {\n    users_Collection\n      .get()\n      .then((snapshot) => {\n        const userData = firebaseLooper(snapshot);\n        userData.forEach((user) => {\n          if (user.AuthID === studentAuthID) {\n            dispatch(storeStudentUserDataAction(user));\n          }\n        });\n      })\n      .catch((err) => console.log(err));\n  };\n\n  useEffect(() => {\n    if (!studentAuthID) {\n      history.push(\"/login\");\n      return;\n    }\n\n    getStudentUserData();\n  }, []);\n\n  return (\n    <div>\n      {/* Top Bar */}\n      <div>\n        <TopBar />\n      </div>\n\n      <div className=\"content\">\n        <h1>Dashboard</h1>\n      </div>\n\n      {/* Footer */}\n      <div>\n        <Footer />\n      </div>\n    </div>\n  );\n}\n","/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Teachers/Connections/ConnectionsMain.js",["653","654"],"/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Teachers/Statistics/ForumStats.js",["655"],"import React, { useEffect } from \"react\";\n\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useHistory } from \"react-router-dom\";\n\nimport { statisticsObjectAction } from \"../../../redux/actions\";\n\nexport default function ForumStats() {\n  const history = useHistory();\n  const dispatch = useDispatch();\n\n  const teacherAuthID = useSelector((state) => state.storeTeacherAuthIDReducer);\n  const storageState = useSelector(\n    (state) => state.storeTeacherStatisticsGeneralInfoReducer\n  );\n  const storageObj = useSelector((state) => state.statisticsObjectReducer);\n\n  const getStorageObj = () => {\n    storageState.forEach((obj) => {\n      if (obj.id === \"ForumStats\") {\n        dispatch(statisticsObjectAction(obj));\n      }\n    });\n  };\n\n  useEffect(() => {\n    if (!teacherAuthID) {\n      history.push(\"/teacherdash\");\n    }\n    getStorageObj();\n  }, []);\n  return (\n    <div>\n      <h1>Forum Stats</h1>\n      <hr/>\n      <p># of Forum Discussions: {storageObj.Num}</p>\n    </div>\n  );\n}\n","/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Teachers/Profile/ProfileFeedView.js",["656","657","658","659","660"],"import React, { useEffect } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { useHistory } from \"react-router-dom\";\nimport { teachers_Collection } from \"../../../utils/firebase\";\nimport { firebaseLooper } from \"../../../utils/tools\";\nimport {\n  storeProfileFeedPostDataAction,\n  storeProfileFeedSinglePostDataAction,\n} from \"../../../redux/actions\";\n\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\n\nimport \"./Profile.css\";\nimport { faEllipsisV, faPen, faPlus } from \"@fortawesome/free-solid-svg-icons\";\n\nexport default function ProfileFeedView() {\n  const teacherAuthID = useSelector((state) => state.storeTeacherAuthIDReducer);\n  const history = useHistory();\n  const dispatch = useDispatch();\n\n  //   States\n  const posts = useSelector((state) => state.storeProfileFeedPostDataReducer);\n  const userDataState = useSelector((state) => state.userDataReducer);\n\n  // GET\n  const getProfileFeedData = () => {\n    const feed_Collection = teachers_Collection\n      .doc(teacherAuthID)\n      .collection(\"Profile\")\n      .doc(\"Feed\")\n      .collection(\"Posts\");\n    feed_Collection\n      .orderBy(\"Date\", \"desc\")\n      .get()\n      .then((snapshot) => {\n        const data = firebaseLooper(snapshot);\n        const feedPostArray = [];\n        data.forEach((d, i) => {\n          const comments_Collection = teachers_Collection\n            .doc(teacherAuthID)\n            .collection(\"Profile\")\n            .doc(\"Feed\")\n            .collection(\"Posts\")\n            .doc(d.id)\n            .collection(\"Comments\");\n          comments_Collection\n            .orderBy(\"Date\", \"desc\")\n            .get()\n            .then((snapshot) => {\n              const commentData = firebaseLooper(snapshot);\n              d = {\n                ...d,\n                commentData,\n              };\n              feedPostArray.push(d);\n              // Dispatch feedPostArray\n              if (i === data.length - 1) {\n                dispatch(storeProfileFeedPostDataAction(feedPostArray));\n              }\n            })\n            .catch((err) => console.log(err));\n        });\n      })\n      .catch((err) => console.log(err));\n  };\n\n  const storeSinglePost = (event) => {\n    const postID = event.target.getAttribute(\"id\");\n    posts.forEach((post) => {\n      if (post.id === postID) {\n        dispatch(storeProfileFeedSinglePostDataAction(post));\n        history.push(\"/teacher-profile/edit-feed\");\n      }\n    });\n  };\n\n  // HANDLE\n  const handleCurrPage = () => {\n    let feedBtn = document.querySelector(\"#link-feed\");\n    feedBtn.classList.add(\"navy-back\");\n\n    let aboutBtn = document.querySelector(\"#link-about\");\n    aboutBtn.classList.remove(\"navy-back\");\n\n    let awardsBtn = document.querySelector(\"#link-awards\");\n    awardsBtn.classList.remove(\"navy-back\");\n\n    let galleryBtn = document.querySelector(\"#link-gallery\");\n    galleryBtn.classList.remove(\"navy-back\");\n\n    let reviewsBtn = document.querySelector(\"#link-reviews\");\n    reviewsBtn.classList.remove(\"navy-back\");\n  };\n  const handlePostList = () => {\n    return posts.map((post, i) => {\n      return (\n        <div className=\"post-wrapper\" key={i}>\n          <div className=\"post-top-wrapper\">\n            <div className=\"post-name-split\">\n              <h3 className=\"post-name\">\n                {userDataState.FirstName} {userDataState.LastName}\n              </h3>\n              <p className=\"post-date\">\n                {post.Date ? post.Date.toDate().toString().substr(4, 11) : null}\n              </p>\n            </div>\n            <div>\n              <button\n                className=\"btn-edit\"\n                id={post.id}\n                onClick={storeSinglePost}\n              >\n                Edit\n              </button>\n            </div>\n          </div>\n\n          <div className=\"post-body\">\n            <p>{post.Text}</p>\n          </div>\n        </div>\n      );\n    });\n  };\n\n  useEffect(() => {\n    if (!teacherAuthID) {\n      history.push(\"/teacherdash\");\n      return;\n    }\n    getProfileFeedData();\n    handleCurrPage();\n  }, []);\n\n  return (\n    <div>\n      <button\n        className=\"btn-newPost\"\n        onClick={() => history.push(\"/teacher-profile/new-feed\")}\n      >\n        Create Post\n      </button>\n      <br />\n      <div>{handlePostList()}</div>\n    </div>\n  );\n}\n","/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Teachers/Messages/MessagesMain.js",["661"],"import React, { useEffect } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { useHistory } from \"react-router-dom\";\n\nimport TopBar from \"../Dash/TopBar\";\nimport DashFooter from \"../Dash/DashFooter\";\nimport {\n  teachers_Collection,\n  students_Collection,\n} from \"../../../utils/firebase\";\nimport {\n  storeTeacherMessagesGeneralInfoAction,\n  storeTeacherSingleThreadAction,\n  toggleTeacherNewMessageAction,\n  storeTeacherStudentGeneralInfoAction,\n} from \"../../../redux/actions\";\nimport { firebaseLooper } from \"../../../utils/tools\";\nimport RandomString from \"../../RandomString\";\n\nexport default function MessagesMain() {\n  const teacherAuthID = useSelector((state) => state.storeTeacherAuthIDReducer);\n  const history = useHistory();\n  const dispatch = useDispatch();\n\n  const toggleNewMessageForm = useSelector(\n    (state) => state.toggleTeacherNewMessageReducer\n  );\n\n  const messages = useSelector(\n    (state) => state.storeTeacherMessagesGeneralInfoReducer\n  );\n  const students = useSelector(\n    (state) => state.storeTeacherStudentGeneralInfoReducer\n  );\n\n  // GET\n  const getAllMessages = () => {\n    teachers_Collection\n      .doc(teacherAuthID)\n      .collection(\"Messages\")\n      .get()\n      .then((snapshot) => {\n        const threads = firebaseLooper(snapshot);\n        const threadCount = snapshot.size;\n        let tempArray = [];\n        threads.forEach((thread, i) => {\n          teachers_Collection\n            .doc(teacherAuthID)\n            .collection(\"Messages\")\n            .doc(thread.id)\n            .collection(\"MessageBlocks\")\n            .orderBy(\"Date\", \"asc\")\n            .get()\n            .then((snapshot) => {\n              const messageBlocks = firebaseLooper(snapshot);\n              thread = {\n                ...thread,\n                Messages: messageBlocks,\n              };\n              tempArray.push(thread);\n              if (i + 1 === threadCount) {\n                dispatch(storeTeacherMessagesGeneralInfoAction(tempArray));\n              }\n            })\n            .catch((err) => console.log(err));\n        });\n      })\n      .catch((err) => console.log(err));\n  };\n  const getAllStudentGeneralInfo = () => {\n    const student_Collection = teachers_Collection\n      .doc(teacherAuthID)\n      .collection(\"Students\");\n    student_Collection\n      .get()\n      .then((snapshot) => {\n        const studentData = firebaseLooper(snapshot);\n        const studCount = snapshot.size;\n        // You now have student IDs, now get their data from the student table\n        let studentArray = [];\n        let count = 0;\n\n        studentData.forEach((stud) => {\n          students_Collection\n            .where(\"StudentID\", \"==\", stud.id)\n            .get()\n            .then((snapshot2) => {\n              const studData = firebaseLooper(snapshot2);\n              studentArray.push(studData[0]);\n\n              if (studCount - 1 === count) {\n                dispatch(storeTeacherStudentGeneralInfoAction(studentArray));\n              }\n              count = count + 1;\n            })\n            .catch((err) => console.log(err));\n        });\n      })\n      .catch((err) => console.log(err));\n  };\n\n  // HANDLE\n  const handleThreadList = () => {\n    return messages.map((mess, i) => {\n      return (\n        <div\n          style={{\n            backgroundColor: \"rgba(0,0,0,0.05)\",\n            padding: \"0.1% 3%\",\n            borderRadius: \"5px\",\n            marginBottom: \"1%\",\n          }}\n          key={i}\n        >\n          <h3>{mess.Recipient}</h3>\n          <p>\n            {mess.Messages[mess.Messages.length - 1]\n              ? mess.Messages[mess.Messages.length - 1].Text\n              : \"Empty\"}\n          </p>\n          <button id={mess.id} onClick={navThreadView}>\n            View Thread\n          </button>\n          <button id={mess.id} onClick={removeThread} className=\"btn-salmon\">\n            Remove\n          </button>\n        </div>\n      );\n    });\n  };\n  const handleNewMessageForm = () => {\n    return (\n      <div>\n        <p>Choose Recipient:</p>\n        {students.map((stud, i) => {\n          return (\n            <button\n              key={i}\n              id={stud.id}\n              onClick={navNewThreadView}\n              className=\"btn-navy\"\n            >\n              {stud.FirstName} {stud.LastName}\n            </button>\n          );\n        })}\n      </div>\n    );\n  };\n\n  // NAV\n  const navThreadView = (event) => {\n    const threadID = event.target.getAttribute(\"id\");\n\n    messages.forEach((thread) => {\n      if (thread.id === threadID) {\n        dispatch(storeTeacherSingleThreadAction(thread));\n      }\n    });\n\n    history.push(\"/teacher-message-thread\");\n  };\n  const navNewThreadView = (event) => {\n    const studID = event.target.getAttribute(\"id\");\n    let found = false;\n    messages.forEach((thread) => {\n      if (thread.Recipient === studID) {\n        found = true;\n      }\n    });\n\n\n    if (found) {\n      messages.forEach((thread) => {\n        if (thread.Recipient === studID) {\n          dispatch(storeTeacherSingleThreadAction(thread));\n        }\n      });\n    } else {\n      const rand1 = RandomString();\n      const rand2 = RandomString();\n      const threadID = `Thread${rand1}${rand2}`;\n\n      teachers_Collection\n        .doc(teacherAuthID)\n        .collection(\"Messages\")\n        .doc(threadID)\n        .set({\n          Recipient: studID,\n        })\n        .catch((err) => console.log(err));\n\n      const tempObj = {\n        id: threadID,\n        Recipient: studID,\n      };\n\n      dispatch(storeTeacherSingleThreadAction(tempObj));\n    }\n    history.push(\"/teacher-message-thread\");\n  };\n\n  // REMOVE\n  const removeThread = (event) => {\n    const threadID = event.target.getAttribute(\"id\");\n\n    // Remove to DB\n    teachers_Collection\n      .doc(teacherAuthID)\n      .collection(\"Messages\")\n      .doc(threadID)\n      .collection(\"MessageBlocks\")\n      .get()\n      .then((snapshot) => {\n        const data = firebaseLooper(snapshot);\n        data.forEach((d) => {\n          teachers_Collection\n            .doc(teacherAuthID)\n            .collection(\"Messages\")\n            .doc(threadID)\n            .collection(\"MessageBlocks\")\n            .doc(d.id)\n            .delete()\n            .catch((err) => console.log(err));\n        });\n      })\n      .catch((err) => console.log(err));\n    teachers_Collection\n      .doc(teacherAuthID)\n      .collection(\"Messages\")\n      .doc(threadID)\n      .delete()\n      .catch((err) => console.log(err));\n\n    // Dispatch\n    const allMess = [...messages];\n    const filtered = allMess.filter((thread) => thread.id !== threadID);\n\n    dispatch(storeTeacherMessagesGeneralInfoAction(filtered));\n  };\n\n  useEffect(() => {\n    if (!teacherAuthID) {\n      history.push(\"/teacherdash\");\n      return;\n    }\n\n    getAllStudentGeneralInfo();\n    getAllMessages();\n  }, []);\n  return (\n    <div>\n      {/* Top Bar */}\n      <div>\n        <TopBar />\n      </div>\n\n      <div>\n        <h1>Messages</h1>\n        <div>\n          {/* New Message */}\n          <button onClick={() => dispatch(toggleTeacherNewMessageAction())}>\n            {toggleNewMessageForm ? \"Close\" : \"New Message\"}\n          </button>\n          {toggleNewMessageForm ? handleNewMessageForm() : null}\n        </div>\n        <br />\n        <div>\n          {/* Threads */}\n          {handleThreadList()}\n        </div>\n      </div>\n\n      {/* Footer */}\n      <div>\n        <DashFooter />\n      </div>\n    </div>\n  );\n}\n","/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Teachers/Groups/GroupMembersView.js",["662","663"],"import React, { useEffect } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { useHistory } from \"react-router-dom\";\nimport { storeGroupMembersListAction } from \"../../../redux/actions\";\nimport { groups_Collection } from \"../../../utils/firebase\";\nimport { firebaseLooper } from \"../../../utils/tools\";\n\nexport default function GroupMembersView() {\n  const teacherAuthID = useSelector((state) => state.storeTeacherAuthIDReducer);\n  const history = useHistory();\n  const dispatch = useDispatch();\n\n  const members = useSelector((state) => state.storeGroupMembersListReducer);\n  const group = useSelector((state) => state.storeSingleGroupReducer);\n\n  const getAllMembers = () => {\n    groups_Collection\n      .doc(group.id)\n      .collection(\"Members\")\n      .get()\n      .then((snapshot) => {\n        const memberData = firebaseLooper(snapshot);\n        dispatch(storeGroupMembersListAction(memberData));\n      })\n      .catch((err) => console.log(err));\n  };\n\n  const handleMemberList = () => {\n    return members.map((mem, i) => {\n      if (mem.Username) {\n        return (\n          <div key={i}>\n            {/* Profile Pic */}\n            <img src=\"\" alt=\"\" />\n\n            <p>{mem.Username}</p>\n            <p>{mem.Role}</p>\n          </div>\n        );\n      }\n    });\n  };\n\n  useEffect(() => {\n    if (!teacherAuthID) {\n      history.push(\"/teacherdash\");\n      return;\n    }\n\n    getAllMembers();\n  }, []);\n  return (\n    <div>\n      <div>{handleMemberList()}</div>\n    </div>\n  );\n}\n","/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Teachers/Dash/Earnings.js",[],"/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Plans.js",[],"/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Teachers/Courses/CoursesMain.js",["664","665","666","667"],"/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Teachers/Courses/WizardNewCourse.js",["668"],"import React, { useEffect } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { useHistory } from \"react-router-dom\";\nimport DashFooter from \"../Dash/DashFooter\";\nimport TopBar from \"../Dash/TopBar\";\nimport FileUpload, { programUpload } from \"../../FileUpload\";\nimport RandomString from \"../../RandomString\";\nimport { courses_Collection } from \"../../../utils/firebase\";\nimport {\n  storeTeacherAllCoursesAction,\n  storeTeacherSingleCourseAction,\n} from \"../../../redux/actions\";\n\nexport default function WizardNewCourse() {\n  const teacherAuthID = useSelector((state) => state.storeTeacherAuthIDReducer);\n  const history = useHistory();\n  const dispatch = useDispatch();\n\n  const courses = useSelector((state) => state.storeTeacherAllCoursesReducer);\n\n  // POST\n  const saveCourseDetails = () => {\n    const rand1 = RandomString();\n    const rand2 = RandomString();\n    const courseID = `Course${rand1}${rand2}`;\n\n    // Variables\n    const courseName = document.querySelector(\"#tbCourseName\").value;\n    const courseDesc = document.querySelector(\"#taCourseDesc\").value;\n    const courseThumb = programUpload();\n\n    // Save in DB\n    courses_Collection.doc(courseID).set({\n      Name: courseName,\n      Desc: courseDesc,\n      Thumbnail: courseThumb,\n    });\n\n    // Dispatch\n    const allCourses = [...courses];\n    allCourses.push({\n      id: courseID,\n      Name: courseName,\n      Desc: courseDesc,\n      Thumbnail: courseThumb,\n    });\n\n    dispatch(storeTeacherAllCoursesAction(allCourses));\n    dispatch(\n      storeTeacherSingleCourseAction({\n        id: courseID,\n        Name: courseName,\n        Desc: courseDesc,\n        Thumbnail: courseThumb,\n      })\n    );\n  };\n\n  //   NAV\n  const navCreateLesson = () => {\n    saveCourseDetails();\n    history.push(\"/teacher-new-lesson\");\n  };\n  const navSaveExit = () => {\n    saveCourseDetails();\n    history.push(\"/teacher-courses\");\n  };\n\n  useEffect(() => {\n    if (!teacherAuthID) {\n      history.push(\"/teacherdash\");\n      return;\n    }\n  }, []);\n  return (\n    <div>\n      {/* Top Bar */}\n      <div>\n        <TopBar />\n      </div>\n\n      <div className=\"content\">\n        <h1>New Course: Course Details</h1>\n\n        <div className=\"bodyWrapper\">\n          <div className=\"wizardPair\">\n            <h3 className=\"h3\">Course Name:</h3>\n            <input\n              className=\"tb\"\n              id=\"tbCourseName\"\n              type=\"text\"\n              placeholder=\"Course Name\"\n            />\n          </div>\n\n          <div className=\"wizardPair\">\n            <h3 className=\"h3\">Course Description:</h3>\n            <textarea\n              className=\"ta\"\n              id=\"taCourseDesc\"\n              placeholder=\"Course Description\"\n            ></textarea>\n          </div>\n\n          <div className=\"wizardPair\">\n            <h3 className=\"h3\">Course Thumbnail:</h3>\n            <FileUpload />\n          </div>\n\n          <div className=\"btnFlex\">\n            <button onClick={navSaveExit} className=\"btnFormSecondary\">\n              Save &amp; Exit\n            </button>\n            <button onClick={navCreateLesson} className=\"btnFormPrimary\">\n              Create Lesson {`>`}\n            </button>\n          </div>\n        </div>\n      </div>\n\n      {/* Footer */}\n      <div>\n        <DashFooter />\n      </div>\n    </div>\n  );\n}\n","/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/FileUpload.js",["669","670","671","672","673"],"/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Teachers/Courses/WizardNewLesson.js",["674","675"],"import React, { useEffect } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { useHistory } from \"react-router-dom\";\nimport TopBar from \"../Dash/TopBar\";\nimport DashFooter from \"../Dash/DashFooter\";\nimport FileUpload, { programUpload } from \"../../FileUpload\";\nimport { courses_Collection } from \"../../../utils/firebase\";\nimport RandomString from \"../../RandomString\";\n\nexport default function WizardNewLesson() {\n  const teacherAuthID = useSelector((state) => state.storeTeacherAuthIDReducer);\n  const history = useHistory();\n  const dispatch = useDispatch();\n\n  const course = useSelector((state) => state.storeTeacherSingleCourseReducer);\n\n  // POST\n  const saveLesson = () => {\n    const rand1 = RandomString();\n    const rand2 = RandomString();\n    const lessonID = `Lesson${rand1}${rand2}`;\n\n    // Variables\n    const lessonName = document.querySelector(\"#tbLessonName\").value;\n    const lessonDesc = document.querySelector(\"#taLessonDesc\").value;\n    const lessonVideo = programUpload();\n    const lessonText = document.querySelector(\"#taLessonText\").value;\n\n    // Save to DB\n    courses_Collection\n      .doc(course.id)\n      .collection(\"Lessons\")\n      .doc(lessonID)\n      .set({\n        Name: lessonName,\n        Desc: lessonDesc,\n        Video: lessonVideo,\n        Text: lessonText,\n      })\n      .catch((err) => console.log(err));\n  };\n\n  //   NAV\n  const navCreateQuiz = () => {\n    saveLesson();\n    history.push(\"/teacher-new-quiz\");\n  };\n  const navSaveExit = () => {\n    saveLesson();\n    history.push(\"/teacher-courses\");\n  };\n\n  useEffect(() => {\n    if (!teacherAuthID) {\n      history.push(\"/teacherdash\");\n      return;\n    }\n  }, []);\n  return (\n    <div>\n      {/* Top Bar */}\n      <div>\n        <TopBar />\n      </div>\n\n      <div className=\"content\">\n        <h1>New Course: Lesson Details</h1>\n\n        <div className=\"bodyWrapper\">\n          <div className=\"wizardPair\">\n            <h3 className=\"h3\">Lesson Name:</h3>\n            <input\n              className=\"tb\"\n              id=\"tbLessonName\"\n              type=\"text\"\n              placeholder=\"Lesson Name\"\n            />\n          </div>\n\n          <div className=\"wizardPair\">\n            <h3 className=\"h3\">Lesson Description:</h3>\n            <textarea\n              className=\"ta\"\n              id=\"taLessonDesc\"\n              placeholder=\"Lesson Description\"\n            ></textarea>\n          </div>\n\n          <div className=\"wizardPair\">\n            <h3 className=\"h3\">Lesson Video:</h3>\n            <FileUpload />\n          </div>\n\n          <div className=\"wizardPair\">\n            <h3 className=\"h3\">Lesson Text:</h3>\n            <p className=\"smallText\">\n              This section of the lesson will be available for the teacher to\n              include a text version of the video provided. This will be\n              displayed right underneath the video for the students to read as\n              amn alternative for watching the video.\n            </p>\n            <textarea\n              className=\"ta\"\n              id=\"taLessonText\"\n              placeholder=\"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed dolor risus, euismod accumsan laoreet in, luctus eu mauris. Mauris purus lorem, commodo ut ante et, scelerisque congue mauris. Quisque consectetur purus vel tellus vulputate malesuada. Fusce a nisi sit amet erat porta blandit. Cras ultricies malesuada ultrices. Quisque libero purus, finibus sed ante quis, tincidunt sodales ex. Nulla ut ligula quam.\"\n            ></textarea>\n          </div>\n\n          <div className=\"btnFlex\">\n            <button onClick={navSaveExit} className=\"btnFormSecondary\">\n              Save &amp; Exit\n            </button>\n            <button onClick={navCreateQuiz} className=\"btnFormPrimary\">\n              Create Quiz {`>`}\n            </button>\n          </div>\n        </div>\n      </div>\n\n      {/* Footer */}\n      <div>\n        <DashFooter />\n      </div>\n    </div>\n  );\n}\n","/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Teachers/Courses/WizardNewQuiz.js",["676","677","678"],"import React, { useEffect } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { useHistory } from \"react-router-dom\";\n\nimport TopBar from \"../Dash/TopBar\";\nimport DashFooter from \"../Dash/DashFooter\";\n\nimport { storeTeacherQuizComponentsAction } from \"../../../redux/actions\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faTimes } from \"@fortawesome/free-solid-svg-icons\";\nimport RandomString from \"../../RandomString\";\nimport firebase, { courses_Collection } from \"../../../utils/firebase\";\n\nexport default function WizardNewQuiz() {\n  const teacherAuthID = useSelector((state) => state.storeTeacherAuthIDReducer);\n  const history = useHistory();\n  const dispatch = useDispatch();\n\n  const course = useSelector((state) => state.storeTeacherSingleCourseReducer);\n\n  const components = useSelector(\n    (state) => state.storeTeacherQuizComponentsReducer\n  );\n\n  // HANDLE\n  const handleComponents = () => {\n    return components.map((comp, i) => {\n      if (comp.Type === \"multiple\") {\n        return (\n          <div className=\"comps purple-border\" key={i}>\n            <div style={{ display: \"flex\" }}>\n              <h2>Multiple Choice</h2>\n              <button onClick={onCompDel} id={comp.CompID} className=\"compDel\">\n                <FontAwesomeIcon className=\"compDelIcon\" icon={faTimes} />\n              </button>\n            </div>\n\n            <p className=\"compLabel\">Question:</p>\n            <input\n              className=\"tbComp question\"\n              id={`tbQuestion${i}`}\n              type=\"text\"\n              placeholder=\"Question\"\n            />\n\n            <p className=\"compLabel\">Options:</p>\n            <input\n              className=\"tbComp opt\"\n              id={`tbOption1-${i}`}\n              type=\"text\"\n              placeholder=\"Option 1\"\n            />\n            <input\n              className=\"tbComp opt\"\n              id={`tbOption2-${i}`}\n              type=\"text\"\n              placeholder=\"Option 2\"\n            />\n            <input\n              className=\"tbComp opt\"\n              id={`tbOption3-${i}`}\n              type=\"text\"\n              placeholder=\"Option 3\"\n            />\n            <input\n              className=\"tbComp opt\"\n              id={`tbOption4-${i}`}\n              type=\"text\"\n              placeholder=\"Option 4\"\n            />\n\n            <p className=\"compLabel\">Answer:</p>\n            <input\n              className=\"tbComp answer\"\n              id={`tbAnswer${i}`}\n              type=\"text\"\n              placeholder=\"Answer\"\n            />\n          </div>\n        );\n      } else if (comp.Type === \"short\") {\n        return (\n          <div className=\"comps red-border\" key={i}>\n            <div style={{ display: \"flex\" }}>\n              <h2>Short Answer</h2>\n              <button onClick={onCompDel} id={comp.CompID} className=\"compDel\">\n                <FontAwesomeIcon className=\"compDelIcon\" icon={faTimes} />\n              </button>\n            </div>\n            <p className=\"compLabel\">Prompt:</p>\n            <input\n              className=\"tbComp prompt\"\n              id={`tbShortPrompt${i}`}\n              type=\"text\"\n              placeholder=\"Prompt\"\n            />\n\n            <p className=\"compLabel\">Answer:</p>\n            <input\n              className=\"tbComp short\"\n              id={`tbShortAns${i}`}\n              type=\"text\"\n              placeholder=\"Answer\"\n            />\n          </div>\n        );\n      } else if (comp.Type === \"long\") {\n        return (\n          <div className=\"comps yellow-border\" key={i}>\n            <div style={{ display: \"flex\" }}>\n              <h2>Long Answer</h2>\n              <button onClick={onCompDel} id={comp.CompID} className=\"compDel\">\n                <FontAwesomeIcon className=\"compDelIcon\" icon={faTimes} />\n              </button>\n            </div>\n            <p className=\"compLabel\">Prompt:</p>\n            <input\n              className=\"tbComp prompt\"\n              id={`tbLongPrompt${i}`}\n              type=\"text\"\n              placeholder=\"Prompt\"\n            />\n\n            <h3 className=\"compLabel\">Answer:</h3>\n            <textarea\n              className=\"ta long\"\n              id={`taLongAns${i}`}\n              placeholder=\"Answer\"\n            ></textarea>\n          </div>\n        );\n      } else if (comp.Type === \"trueFalse\") {\n        return (\n          <div className=\"comps aqua-border\">\n            <div style={{ display: \"flex\" }}>\n              <h2>True or False</h2>\n              <button onClick={onCompDel} id={comp.CompID} className=\"compDel\">\n                <FontAwesomeIcon className=\"compDelIcon\" icon={faTimes} />\n              </button>\n            </div>\n\n            <p className=\"compLabel\">Prompt:</p>\n            <input\n              className=\"tbComp prompt\"\n              id={`tbTrueFalsePrompt${i}`}\n              type=\"text\"\n              placeholder=\"Prompt\"\n            />\n\n            <div className=\"ras\">\n              <div className=\"raGroup\">\n                <input\n                  className=\"ra\"\n                  type=\"radio\"\n                  id={`raTrue${i}`}\n                  name={`raTrueFalse${i}`}\n                  value=\"True\"\n                />\n                <label for=\"male\">True</label>\n              </div>\n              <div className=\"raGroup\">\n                <input\n                  className=\"ra\"\n                  type=\"radio\"\n                  id={`raFalse${i}`}\n                  name={`raTrueFalse${i}`}\n                  value=\"False\"\n                />\n                <label for=\"male\">False</label>\n              </div>\n            </div>\n            <br />\n          </div>\n        );\n      } else if (comp.Type === \"audio\") {\n        return (\n          <div className=\"comps orange-border\">\n            <div style={{ display: \"flex\" }}>\n              <h2>Audio</h2>\n              <button onClick={onCompDel} id={comp.CompID} className=\"compDel\">\n                <FontAwesomeIcon className=\"compDelIcon\" icon={faTimes} />\n              </button>\n            </div>\n\n            <div className=\"wizardPair\">\n              <h3 className=\"h3\">Question Audio:</h3>\n              <div>\n                <input id={`select${i}`} type=\"file\" />\n                <p className=\"smallDesc\">\n                  Enter an optional custom file name. Leaving the field blank\n                  will use the current file name.\n                </p>\n                <input\n                  id={`fileName${i}`}\n                  type=\"text\"\n                  placeholder=\"Type file name..\"\n                />\n              </div>\n            </div>\n            <br />\n            <p className=\"compLabel\">Question:</p>\n            <input\n              className=\"tbComp question\"\n              id={`tbQuestion${i}`}\n              type=\"text\"\n              placeholder=\"Question\"\n            />\n\n            <p className=\"compLabel\">Options:</p>\n            <input\n              className=\"tbComp opt\"\n              id={`tbOption1-${i}`}\n              type=\"text\"\n              placeholder=\"Option 1\"\n            />\n            <input\n              className=\"tbComp opt\"\n              id={`tbOption2-${i}`}\n              type=\"text\"\n              placeholder=\"Option 2\"\n            />\n            <input\n              className=\"tbComp opt\"\n              id={`tbOption3-${i}`}\n              type=\"text\"\n              placeholder=\"Option 3\"\n            />\n            <input\n              className=\"tbComp opt\"\n              id={`tbOption4-${i}`}\n              type=\"text\"\n              placeholder=\"Option 4\"\n            />\n\n            <p className=\"compLabel\">Answer:</p>\n            <input\n              className=\"tbComp answer\"\n              id={`tbAnswer${i}`}\n              type=\"text\"\n              placeholder=\"Answer\"\n            />\n          </div>\n        );\n      } else if (comp.Type === \"video\") {\n        return (\n          <div className=\"comps pink-border\">\n            <div style={{ display: \"flex\" }}>\n              <h2>Video</h2>\n              <button onClick={onCompDel} id={comp.CompID} className=\"compDel\">\n                <FontAwesomeIcon className=\"compDelIcon\" icon={faTimes} />\n              </button>\n            </div>\n\n            <div className=\"wizardPair\">\n              <h3 className=\"h3\">Question Video:</h3>\n              <div>\n                <input id={`select${i}`} type=\"file\" />\n                <p className=\"smallDesc\">\n                  Enter an optional custom file name. Leaving the field blank\n                  will use the current file name.\n                </p>\n                <input\n                  id={`fileName${i}`}\n                  type=\"text\"\n                  placeholder=\"Type file name..\"\n                />\n              </div>\n            </div>\n            <br />\n            <p className=\"compLabel\">Question:</p>\n            <input\n              className=\"tbComp question\"\n              id={`tbQuestion${i}`}\n              type=\"text\"\n              placeholder=\"Question\"\n            />\n\n            <p className=\"compLabel\">Options:</p>\n            <input\n              className=\"tbComp opt\"\n              id={`tbOption1-${i}`}\n              type=\"text\"\n              placeholder=\"Option 1\"\n            />\n            <input\n              className=\"tbComp opt\"\n              id={`tbOption2-${i}`}\n              type=\"text\"\n              placeholder=\"Option 2\"\n            />\n            <input\n              className=\"tbComp opt\"\n              id={`tbOption3-${i}`}\n              type=\"text\"\n              placeholder=\"Option 3\"\n            />\n            <input\n              className=\"tbComp opt\"\n              id={`tbOption4-${i}`}\n              type=\"text\"\n              placeholder=\"Option 4\"\n            />\n\n            <p className=\"compLabel\">Answer:</p>\n            <input\n              className=\"tbComp answer\"\n              id={`tbAnswer${i}`}\n              type=\"text\"\n              placeholder=\"Answer\"\n            />\n          </div>\n        );\n      } else if (comp.Type === \"image\") {\n        return (\n          <div className=\"comps green-border\">\n            <div style={{ display: \"flex\" }}>\n              <h2>Image</h2>\n              <button onClick={onCompDel} id={comp.CompID} className=\"compDel\">\n                <FontAwesomeIcon className=\"compDelIcon\" icon={faTimes} />\n              </button>\n            </div>\n\n            <div className=\"wizardPair\">\n              <h3 className=\"h3\">Question Image:</h3>\n              <div>\n                <input id={`select${i}`} type=\"file\" />\n                <p className=\"smallDesc\">\n                  Enter an optional custom file name. Leaving the field blank\n                  will use the current file name.\n                </p>\n                <input\n                  id={`fileName${i}`}\n                  type=\"text\"\n                  placeholder=\"Type file name..\"\n                />\n              </div>\n            </div>\n            <br />\n            <p className=\"compLabel\">Question:</p>\n            <input\n              className=\"tbComp question\"\n              id={`tbQuestion${i}`}\n              type=\"text\"\n              placeholder=\"Question\"\n            />\n\n            <p className=\"compLabel\">Options:</p>\n            <input\n              className=\"tbComp opt\"\n              id={`tbOption1-${i}`}\n              type=\"text\"\n              placeholder=\"Option 1\"\n            />\n            <input\n              className=\"tbComp opt\"\n              id={`tbOption2-${i}`}\n              type=\"text\"\n              placeholder=\"Option 2\"\n            />\n            <input\n              className=\"tbComp opt\"\n              id={`tbOption3-${i}`}\n              type=\"text\"\n              placeholder=\"Option 3\"\n            />\n            <input\n              className=\"tbComp opt\"\n              id={`tbOption4-${i}`}\n              type=\"text\"\n              placeholder=\"Option 4\"\n            />\n\n            <p className=\"compLabel\">Answer:</p>\n            <input\n              className=\"tbComp answer\"\n              id={`tbAnswer${i}`}\n              type=\"text\"\n              placeholder=\"Answer\"\n            />\n          </div>\n        );\n      }\n    });\n  };\n\n  // CLICK\n  const onCompDel = (event) => {\n    const compID = event.target.getAttribute(\"id\");\n\n    const allComps = [...components];\n    const filtered = allComps.filter((c) => c.CompID !== compID);\n\n    dispatch(storeTeacherQuizComponentsAction(filtered));\n  };\n  const onChooseComp = (event) => {\n    const choice = event.target.getAttribute(\"id\");\n    const rand1 = RandomString();\n    const rand2 = RandomString();\n    const compID = `Comp${rand1}${rand2}`;\n\n    if (choice === \"btnMultiple\") {\n      const allComps = [...components];\n      allComps.push({\n        Type: \"multiple\",\n        CompID: compID,\n      });\n\n      dispatch(storeTeacherQuizComponentsAction(allComps));\n    } else if (choice === \"btnShort\") {\n      const allComps = [...components];\n      allComps.push({\n        Type: \"short\",\n        CompID: compID,\n      });\n\n      dispatch(storeTeacherQuizComponentsAction(allComps));\n    } else if (choice === \"btnLong\") {\n      const allComps = [...components];\n      allComps.push({\n        Type: \"long\",\n        CompID: compID,\n      });\n\n      dispatch(storeTeacherQuizComponentsAction(allComps));\n    } else if (choice === \"btnTrueFalse\") {\n      const allComps = [...components];\n      allComps.push({\n        Type: \"trueFalse\",\n        CompID: compID,\n      });\n\n      dispatch(storeTeacherQuizComponentsAction(allComps));\n    } else if (choice === \"btnAudio\") {\n      const allComps = [...components];\n      allComps.push({\n        Type: \"audio\",\n        CompID: compID,\n      });\n\n      dispatch(storeTeacherQuizComponentsAction(allComps));\n    } else if (choice === \"btnVideo\") {\n      const allComps = [...components];\n      allComps.push({\n        Type: \"video\",\n        CompID: compID,\n      });\n\n      dispatch(storeTeacherQuizComponentsAction(allComps));\n    } else if (choice === \"btnImage\") {\n      const allComps = [...components];\n      allComps.push({\n        Type: \"image\",\n        CompID: compID,\n      });\n\n      dispatch(storeTeacherQuizComponentsAction(allComps));\n    }\n  };\n\n  // POST\n  const saveQuiz = () => {\n    const quizName = document.querySelector(\"#tbQuizName\").value;\n    const quizDesc = document.querySelector(\"#taQuizDesc\").value;\n\n    const allComponents = [];\n\n    // Fill up components array\n    components.forEach((comp, i) => {\n      if (comp.Type === \"multiple\") {\n        const question = document.querySelector(`#tbQuestion${i}`).value;\n        const options = [];\n        for (let a = 1; a <= 4; a = a + 1) {\n          const opt = document.querySelector(`#tbOption${a}-${i}`).value;\n          options.push(opt);\n        }\n        const answer = document.querySelector(`#tbAnswer${i}`).value;\n\n        const tempObj = {\n          Type: \"multiple\",\n          Question: question,\n          Options: options,\n          Answer: answer,\n        };\n\n        allComponents.push(tempObj);\n      } else if (comp.Type === \"short\") {\n        const prompt = document.querySelector(`#tbShortPrompt${i}`).value;\n        const answer = document.querySelector(`#tbShortAns${i}`).value;\n\n        const tempObj = {\n          Type: \"short\",\n          Prompt: prompt,\n          Answer: answer,\n        };\n\n        allComponents.push(tempObj);\n      } else if (comp.Type === \"long\") {\n        const prompt = document.querySelector(`#tbLongPrompt${i}`).value;\n        const answer = document.querySelector(`#taLongAns${i}`).value;\n\n        const tempObj = {\n          Type: \"long\",\n          Prompt: prompt,\n          Answer: answer,\n        };\n\n        allComponents.push(tempObj);\n      } else if (comp.Type === \"trueFalse\") {\n        const prompt = document.querySelector(`#tbTrueFalsePrompt${i}`).value;\n        const raTrue = document.querySelector(`#raTrue${i}`).checked;\n        const raFalse = document.querySelector(`#raFalse${i}`).checked;\n\n        let res = false;\n        if (raTrue) {\n          res = true;\n        }\n\n        const tempObj = {\n          Type: \"trueFalse\",\n          Prompt: prompt,\n          Answer: res,\n        };\n\n        allComponents.push(tempObj);\n      } else if (comp.Type === \"audio\") {\n        const audio = programUpload(i);\n\n        const question = document.querySelector(`#tbQuestion${i}`).value;\n        const options = [];\n        for (let a = 1; a <= 4; a = a + 1) {\n          const opt = document.querySelector(`#tbOption${a}-${i}`).value;\n          options.push(opt);\n        }\n        const answer = document.querySelector(`#tbAnswer${i}`).value;\n\n        const tempObj = {\n          Type: \"audio\",\n          Audio: audio,\n          Question: question,\n          Options: options,\n          Answer: answer,\n        };\n\n        allComponents.push(tempObj);\n      } else if (comp.Type === \"video\") {\n        const video = programUpload(i);\n\n        const question = document.querySelector(`#tbQuestion${i}`).value;\n        const options = [];\n        for (let a = 1; a <= 4; a = a + 1) {\n          const opt = document.querySelector(`#tbOption${a}-${i}`).value;\n          options.push(opt);\n        }\n        const answer = document.querySelector(`#tbAnswer${i}`).value;\n\n        const tempObj = {\n          Type: \"video\",\n          Video: video,\n          Question: question,\n          Options: options,\n          Answer: answer,\n        };\n\n        allComponents.push(tempObj);\n      } else if (comp.Type === \"image\") {\n        const imagePath = programUpload(i);\n\n        const question = document.querySelector(`#tbQuestion${i}`).value;\n        const options = [];\n        for (let a = 1; a <= 4; a = a + 1) {\n          const opt = document.querySelector(`#tbOption${a}-${i}`).value;\n          options.push(opt);\n        }\n        const answer = document.querySelector(`#tbAnswer${i}`).value;\n\n        const tempObj = {\n          Type: \"image\",\n          Image: imagePath,\n          Question: question,\n          Options: options,\n          Answer: answer,\n        };\n\n        allComponents.push(tempObj);\n      }\n    });\n\n    // Save in DB\n    const rand1 = RandomString();\n    const rand2 = RandomString();\n    const quizID = `Quiz${rand1}${rand2}`;\n\n    courses_Collection\n      .doc(course.id)\n      .collection(\"Quizzes\")\n      .doc(quizID)\n      .set({\n        Name: quizName,\n        Desc: quizDesc,\n      })\n      .catch((err) => console.log(err));\n\n    allComponents.forEach((comp) => {\n      const rand3 = RandomString();\n      const rand4 = RandomString();\n      const compID = `Comp${rand3}${rand4}`;\n\n      if (comp.Type === \"multiple\") {\n        courses_Collection\n          .doc(course.id)\n          .collection(\"Quizzes\")\n          .doc(quizID)\n          .collection(\"Components\")\n          .doc(compID)\n          .set({\n            Type: \"multiple\",\n            Question: comp.Question,\n            Options: comp.Options,\n            Answer: comp.Answer,\n          })\n          .catch((err) => console.log(err));\n      } else if (comp.Type === \"short\") {\n        courses_Collection\n          .doc(course.id)\n          .collection(\"Quizzes\")\n          .doc(quizID)\n          .collection(\"Components\")\n          .doc(compID)\n          .set({\n            Type: \"short\",\n            Prompt: comp.Prompt,\n            Answer: comp.Answer,\n          })\n          .catch((err) => console.log(err));\n      } else if (comp.Type === \"long\") {\n        courses_Collection\n          .doc(course.id)\n          .collection(\"Quizzes\")\n          .doc(quizID)\n          .collection(\"Components\")\n          .doc(compID)\n          .set({\n            Type: \"long\",\n            Prompt: comp.Prompt,\n            Answer: comp.Answer,\n          })\n          .catch((err) => console.log(err));\n      } else if (comp.Type === \"trueFalse\") {\n        courses_Collection\n          .doc(course.id)\n          .collection(\"Quizzes\")\n          .doc(quizID)\n          .collection(\"Components\")\n          .doc(compID)\n          .set({\n            Type: \"trueFalse\",\n            Prompt: comp.Prompt,\n            Answer: comp.Answer,\n          })\n          .catch((err) => console.log(err));\n      } else if (comp.Type === \"audio\") {\n        courses_Collection\n          .doc(course.id)\n          .collection(\"Quizzes\")\n          .doc(quizID)\n          .collection(\"Components\")\n          .doc(compID)\n          .set({\n            Type: \"audio\",\n            Audio: comp.Audio,\n            Question: comp.Question,\n            Options: comp.Options,\n            Answer: comp.Answer,\n          })\n          .catch((err) => console.log(err));\n      } else if (comp.Type === \"video\") {\n        courses_Collection\n          .doc(course.id)\n          .collection(\"Quizzes\")\n          .doc(quizID)\n          .collection(\"Components\")\n          .doc(compID)\n          .set({\n            Type: \"video\",\n            Video: comp.Video,\n            Question: comp.Question,\n            Options: comp.Options,\n            Answer: comp.Answer,\n          })\n          .catch((err) => console.log(err));\n      } else if (comp.Type === \"image\") {\n        courses_Collection\n          .doc(course.id)\n          .collection(\"Quizzes\")\n          .doc(quizID)\n          .collection(\"Components\")\n          .doc(compID)\n          .set({\n            Type: \"image\",\n            Image: comp.Image,\n            Question: comp.Question,\n            Options: comp.Options,\n            Answer: comp.Answer,\n          })\n          .catch((err) => console.log(err));\n      }\n    });\n  };\n\n  // PROGRAM\n  const programUpload = (idx) => {\n    const file = document.querySelector(`#select${idx}`).files[0];\n\n    if (file) {\n      let name = document.querySelector(`#fileName${idx}`).value;\n      if (name === \"\") {\n        name = file.name;\n      }\n      const metadata = {\n        contentType: file.type,\n      };\n\n      // Storage Ref\n      let ref;\n\n      if (file.type === \"video/mp4\") {\n        ref = firebase.storage().ref(\"Videos/\");\n        if (name !== file.name) {\n          name = name + \".mp4\";\n        }\n      } else if (file.type === \"audio/mpeg\") {\n        ref = firebase.storage().ref(\"Audio/\");\n        if (name !== file.name) {\n          name = name + \".mp3\";\n        }\n      } else if (file.type === \"image/jpeg\") {\n        ref = firebase.storage().ref(\"Images/\");\n        if (name !== file.name) {\n          name = name + \".jpg\";\n        }\n      } else if (file.type === \"image/png\") {\n        ref = firebase.storage().ref(\"Images/\");\n        if (name !== file.name) {\n          name = name + \".png\";\n        }\n      } else if (file.type === \"application/pdf\") {\n        ref = firebase.storage().ref(\"PDF/\");\n        if (name !== file.name) {\n          name = name + \".pdf\";\n        }\n      }\n\n      const task = ref.child(name).put(file, metadata);\n      task\n        .then((snapshot) => snapshot.ref.getDownloadURL())\n        .then((url) => {\n          console.log(url);\n        })\n        .catch(console.error);\n\n      return name;\n    }\n  };\n\n  //   NAV\n  const navCreateLesson = () => {\n    saveQuiz();\n    dispatch(storeTeacherQuizComponentsAction([]));\n    history.push(\"/teacher-new-lesson\");\n  };\n  const navSaveExit = () => {\n    saveQuiz();\n    dispatch(storeTeacherQuizComponentsAction([]));\n    history.push(\"/teacher-courses\");\n  };\n\n  useEffect(() => {\n    if (!teacherAuthID) {\n      history.push(\"/teacherdash\");\n      return;\n    }\n  }, []);\n  return (\n    <div>\n      {/* Top Bar */}\n      <div>\n        <TopBar />\n      </div>\n\n      <div className=\"content\">\n        <h1>New Course: Quiz Details</h1>\n\n        {/* Quiz Components Panel */}\n        <div className=\"compPanel\">\n          <h3>Quiz Components</h3>\n          <button onClick={onChooseComp} id=\"btnMultiple\" className=\"btnComp\">\n            Multiple Choice\n          </button>\n          <button onClick={onChooseComp} id=\"btnShort\" className=\"btnComp\">\n            Short Answer\n          </button>\n          <button onClick={onChooseComp} id=\"btnLong\" className=\"btnComp\">\n            Long Answer\n          </button>\n          <button onClick={onChooseComp} id=\"btnTrueFalse\" className=\"btnComp\">\n            True or False\n          </button>\n          <button onClick={onChooseComp} id=\"btnAudio\" className=\"btnComp\">\n            Audio\n          </button>\n          <button onClick={onChooseComp} id=\"btnVideo\" className=\"btnComp\">\n            Video\n          </button>\n          <button onClick={onChooseComp} id=\"btnImage\" className=\"btnComp\">\n            Image\n          </button>\n        </div>\n\n        {/* Quiz Content */}\n        <div className=\"bodyWrapper\">\n          <div className=\"wizardPair\">\n            <h3 className=\"h3\">Quiz Name:</h3>\n            <input\n              className=\"tb\"\n              id=\"tbQuizName\"\n              type=\"text\"\n              placeholder=\"Quiz Name\"\n            />\n          </div>\n\n          <div className=\"wizardPair\">\n            <h3 className=\"h3\">Quiz Description:</h3>\n            <textarea\n              className=\"ta\"\n              id=\"taQuizDesc\"\n              placeholder=\"Quiz Description\"\n            ></textarea>\n          </div>\n\n          <div>\n            {/* Add Components here */}\n            {handleComponents()}\n          </div>\n\n          <div className=\"btnFlex\">\n            <button onClick={navSaveExit} className=\"btnFormSecondary\">\n              Save &amp; Exit\n            </button>\n            <button onClick={navCreateLesson} className=\"btnFormPrimary\">\n              Create Lesson {`>`}\n            </button>\n          </div>\n        </div>\n\n        {/* END */}\n      </div>\n\n      {/* Footer */}\n      <div>\n        <DashFooter />\n      </div>\n    </div>\n  );\n}\n","/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Contact.js",[],"/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Teachers/Forums/ForumBlocks.js",[],"/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Teachers/Courses/CourseOverview.js",["679"],"/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Teachers/Statistics/CourseStats.js",["680"],"/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Teachers/Groups/GroupsMain.js",["681"],"import React, { useEffect } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { useHistory } from \"react-router-dom\";\n\nimport { groups_Collection } from \"../../../utils/firebase\";\nimport { firebaseLooper } from \"../../../utils/tools\";\n\nimport TopBar from \"../Dash/TopBar\";\nimport DashFooter from \"../Dash/DashFooter\";\nimport RandomString from \"../../RandomString\";\nimport GetToday from \"../../GetToday\";\nimport {\n  storeTeacherGroupGeneralInfoAction,\n  toggleNewGroupFormAction,\n  storeSingleGroupAction,\n} from \"../../../redux/actions\";\n\nexport default function GroupsMain() {\n  const teacherAuthID = useSelector((state) => state.storeTeacherAuthIDReducer);\n  const history = useHistory();\n  const dispatch = useDispatch();\n\n  // Toggles\n  const toggleNewGroupForm = useSelector(\n    (state) => state.toggleNewGroupFormReducer\n  );\n\n  // Data\n  const groups = useSelector(\n    (state) => state.storeTeacherGroupGeneralInfoReducer\n  );\n\n  const getAllGroups = () => {\n    groups_Collection\n      .get()\n      .then((snapshot) => {\n        const groupData = firebaseLooper(snapshot);\n        dispatch(storeTeacherGroupGeneralInfoAction(groupData));\n      })\n      .catch((err) => console.log(err));\n  };\n\n  const removeGroup = (event) => {\n    const groupID = event.target.getAttribute(\"id\");\n\n    // Remove from DB\n    groups_Collection\n      .doc(groupID)\n      .delete()\n      .catch((err) => console.log(err));\n\n      \n\n    // Dispatch\n    const allGroups = [...groups];\n    const filtered = allGroups.filter((group) => group.id !== groupID);\n\n    dispatch(storeTeacherGroupGeneralInfoAction(filtered));\n\n    groups_Collection\n      .doc(groupID)\n      .delete()\n      .catch((err) => console.log(err));\n  };\n\n  const OnGroupSearch = () => {\n    const searchInput = document.querySelector(\"#tbGroupSearch\").value;\n\n    if (searchInput !== \"\") {\n      let filtered = [];\n\n      groups_Collection\n        .get()\n        .then((snapshot) => {\n          const groupData = firebaseLooper(snapshot);\n          groupData.forEach((gr) => {\n            const groupName = gr.Name.toLowerCase();\n            if (groupName.includes(searchInput)) {\n              filtered.push(gr);\n            }\n          });\n          dispatch(storeTeacherGroupGeneralInfoAction(filtered));\n        })\n        .catch((err) => console.log(err));\n    } else {\n      groups_Collection\n        .get()\n        .then((snapshot) => {\n          const groupData = firebaseLooper(snapshot);\n\n          dispatch(storeTeacherGroupGeneralInfoAction(groupData));\n        })\n        .catch((err) => console.log(err));\n    }\n  };\n\n  const handleGroupList = () => {\n    return groups.map((group, i) => {\n      return (\n        <div key={i}>\n          <h3>{group.Name}</h3>\n          <p>Host: {group.Host}</p>\n          <p>Created: {group.Date.toDate().toString().substr(4, 11)}</p>\n          <button id={group.id} onClick={navigateGroupPage}>\n            View Page\n          </button>\n          <button id={group.id} onClick={removeGroup}>\n            Remove\n          </button>\n        </div>\n      );\n    });\n  };\n\n  const handleNewGroupForm = () => {\n    return (\n      <div>\n        <br />\n        <div>\n          <button\n            onClick={() => {\n              dispatch(toggleNewGroupFormAction());\n            }}\n          >\n            Close\n          </button>\n        </div>\n        <div>\n          <label>Group Name:</label>\n          <input id=\"tbGroupNameText\" type=\"text\" placeholder=\"Group Name\" />\n        </div>\n        <div>\n          <label>Description:</label>\n          <textarea id=\"taDescText\" placeholder=\"Description\"></textarea>\n        </div>\n        <div>\n          <p>Access:</p>\n          <input type=\"radio\" id=\"raPublic\" name=\"raAccess\" value=\"public\" />\n          <label for=\"raPublic\">Public</label>\n          <p>Choosing public access will allow anyone submit a request.</p>\n          <br />\n          <input type=\"radio\" id=\"raPrivate\" name=\"raAccess\" value=\"private\" />\n          <label for=\"raPrivate\">Private</label>\n          <p>\n            Choosing private access will require users to use a key to join the\n            group.\n          </p>\n        </div>\n        <div>\n          <button onClick={createGroup}>Create</button>\n        </div>\n      </div>\n    );\n  };\n\n  const navigateGroupPage = (event) => {\n    const groupID = event.target.getAttribute(\"id\");\n\n    groups.forEach((gr) => {\n      if (gr.id === groupID) {\n        dispatch(storeSingleGroupAction(gr));\n      }\n    });\n\n    history.push(\"/teacher-group-page\");\n  };\n\n  const createGroup = () => {\n    const groupName = document.querySelector(\"#tbGroupNameText\").value;\n    const groupDesc = document.querySelector(\"#taDescText\").value;\n    let groupAccess = \"\";\n    const raPublic = document.querySelector(\"#raPublic\");\n    const raPrivate = document.querySelector(\"#raPrivate\");\n    if (raPublic.checked) {\n      groupAccess = \"public\";\n    } else if (raPrivate) {\n      groupAccess = \"private\";\n    }\n\n    // Save to DB\n    const rand1 = RandomString();\n    const rand2 = RandomString();\n    const groupID = `Group${rand1}${rand2}`;\n    const memberID = `Member${rand1}${rand2}`;\n    const postID = `Post${rand1}${rand2}`;\n\n    groups_Collection\n      .doc(groupID)\n      .set({\n        Name: groupName,\n        Date: GetToday(),\n        Host: teacherAuthID,\n        Desc: groupDesc,\n        Access: groupAccess,\n      })\n      .catch((err) => console.log(err));\n\n    groups_Collection\n      .doc(groupID)\n      .collection(\"Members\")\n      .doc(memberID)\n      .set({\n        Username: teacherAuthID,\n        Role: \"host\",\n      })\n      .catch((err) => console.log(err));\n\n    groups_Collection\n      .doc(groupID)\n      .collection(\"Posts\")\n      .doc(postID)\n      .set({})\n      .catch((err) => console.log(err));\n\n    // Dispatch\n    const newGroupList = [...groups];\n    newGroupList.push({\n      Name: groupName,\n      Date: GetToday(),\n      Host: teacherAuthID,\n      Desc: groupDesc,\n      Access: groupAccess,\n    });\n    dispatch(storeTeacherGroupGeneralInfoAction(newGroupList));\n    if (toggleNewGroupForm) {\n      dispatch(toggleNewGroupFormAction());\n    }\n  };\n\n  useEffect(() => {\n    if (!teacherAuthID) {\n      history.push(\"/teacherdash\");\n      return;\n    }\n\n    getAllGroups();\n  }, []);\n  return (\n    <div>\n      {/* Top Bar */}\n      <div>\n        <TopBar />\n      </div>\n\n      {/* Main Content */}\n      <div>\n        <div>\n          <h1>Groups</h1>\n        </div>\n        <div>\n          <input\n            onChange={OnGroupSearch}\n            id=\"tbGroupSearch\"\n            type=\"text\"\n            placeholder=\"Search\"\n          />\n          <button\n            onClick={() => {\n              dispatch(toggleNewGroupFormAction());\n            }}\n          >\n            Create New Group\n          </button>\n        </div>\n        <div>{toggleNewGroupForm ? handleNewGroupForm() : null}</div>\n        <hr />\n        <div>{handleGroupList()}</div>\n      </div>\n\n      {/* Footer */}\n      <div>\n        <DashFooter />\n      </div>\n    </div>\n  );\n}\n",{"ruleId":"682","severity":1,"message":"683","line":22,"column":9,"nodeType":"684","messageId":"685","endLine":22,"endColumn":13},{"ruleId":"686","severity":1,"message":"687","line":41,"column":39,"nodeType":"688","messageId":"689","endLine":41,"endColumn":41},{"ruleId":"686","severity":1,"message":"687","line":112,"column":30,"nodeType":"688","messageId":"689","endLine":112,"endColumn":32},{"ruleId":"690","severity":1,"message":"691","line":332,"column":6,"nodeType":"692","endLine":332,"endColumn":8,"suggestions":"693"},{"ruleId":"694","replacedBy":"695"},{"ruleId":"696","replacedBy":"697"},{"ruleId":"690","severity":1,"message":"698","line":163,"column":6,"nodeType":"692","endLine":163,"endColumn":8,"suggestions":"699"},{"ruleId":"694","replacedBy":"700"},{"ruleId":"696","replacedBy":"701"},{"ruleId":"694","replacedBy":"702"},{"ruleId":"696","replacedBy":"703"},{"ruleId":"690","severity":1,"message":"704","line":37,"column":6,"nodeType":"692","endLine":37,"endColumn":8,"suggestions":"705"},{"ruleId":"694","replacedBy":"706"},{"ruleId":"696","replacedBy":"707"},{"ruleId":"694","replacedBy":"708"},{"ruleId":"696","replacedBy":"709"},{"ruleId":"694","replacedBy":"710"},{"ruleId":"696","replacedBy":"711"},{"ruleId":"690","severity":1,"message":"712","line":87,"column":6,"nodeType":"692","endLine":87,"endColumn":8,"suggestions":"713"},{"ruleId":"690","severity":1,"message":"704","line":97,"column":6,"nodeType":"692","endLine":97,"endColumn":8,"suggestions":"714"},{"ruleId":"694","replacedBy":"715"},{"ruleId":"696","replacedBy":"716"},{"ruleId":"690","severity":1,"message":"717","line":31,"column":6,"nodeType":"692","endLine":31,"endColumn":8,"suggestions":"718"},{"ruleId":"694","replacedBy":"719"},{"ruleId":"696","replacedBy":"720"},{"ruleId":"682","severity":1,"message":"683","line":13,"column":9,"nodeType":"684","messageId":"685","endLine":13,"endColumn":13},{"ruleId":"690","severity":1,"message":"721","line":90,"column":6,"nodeType":"692","endLine":90,"endColumn":8,"suggestions":"722"},{"ruleId":"694","replacedBy":"723"},{"ruleId":"696","replacedBy":"724"},{"ruleId":"690","severity":1,"message":"725","line":164,"column":6,"nodeType":"692","endLine":164,"endColumn":8,"suggestions":"726"},{"ruleId":"694","replacedBy":"727"},{"ruleId":"696","replacedBy":"728"},{"ruleId":"686","severity":1,"message":"687","line":319,"column":37,"nodeType":"688","messageId":"689","endLine":319,"endColumn":39},{"ruleId":"690","severity":1,"message":"729","line":436,"column":6,"nodeType":"692","endLine":436,"endColumn":8,"suggestions":"730"},{"ruleId":"682","severity":1,"message":"683","line":19,"column":9,"nodeType":"684","messageId":"685","endLine":19,"endColumn":13},{"ruleId":"690","severity":1,"message":"731","line":227,"column":6,"nodeType":"692","endLine":227,"endColumn":8,"suggestions":"732"},{"ruleId":"682","severity":1,"message":"733","line":28,"column":3,"nodeType":"684","messageId":"685","endLine":28,"endColumn":10},{"ruleId":"690","severity":1,"message":"734","line":275,"column":6,"nodeType":"692","endLine":275,"endColumn":8,"suggestions":"735"},{"ruleId":"690","severity":1,"message":"704","line":83,"column":6,"nodeType":"692","endLine":83,"endColumn":8,"suggestions":"736"},{"ruleId":"682","severity":1,"message":"737","line":14,"column":3,"nodeType":"684","messageId":"685","endLine":14,"endColumn":27},{"ruleId":"690","severity":1,"message":"704","line":170,"column":6,"nodeType":"692","endLine":170,"endColumn":8,"suggestions":"738"},{"ruleId":"682","severity":1,"message":"739","line":11,"column":9,"nodeType":"684","messageId":"685","endLine":11,"endColumn":17},{"ruleId":"690","severity":1,"message":"704","line":20,"column":6,"nodeType":"692","endLine":20,"endColumn":8,"suggestions":"740"},{"ruleId":"694","replacedBy":"741"},{"ruleId":"696","replacedBy":"742"},{"ruleId":"690","severity":1,"message":"743","line":47,"column":6,"nodeType":"692","endLine":47,"endColumn":8,"suggestions":"744"},{"ruleId":"694","replacedBy":"745"},{"ruleId":"696","replacedBy":"746"},{"ruleId":"682","severity":1,"message":"747","line":9,"column":10,"nodeType":"684","messageId":"685","endLine":9,"endColumn":27},{"ruleId":"682","severity":1,"message":"748","line":25,"column":9,"nodeType":"684","messageId":"685","endLine":25,"endColumn":19},{"ruleId":"690","severity":1,"message":"704","line":73,"column":6,"nodeType":"692","endLine":73,"endColumn":8,"suggestions":"749"},{"ruleId":"694","replacedBy":"750"},{"ruleId":"696","replacedBy":"751"},{"ruleId":"690","severity":1,"message":"704","line":43,"column":6,"nodeType":"692","endLine":43,"endColumn":8,"suggestions":"752"},{"ruleId":"690","severity":1,"message":"717","line":31,"column":6,"nodeType":"692","endLine":31,"endColumn":8,"suggestions":"753"},{"ruleId":"682","severity":1,"message":"683","line":19,"column":9,"nodeType":"684","messageId":"685","endLine":19,"endColumn":13},{"ruleId":"690","severity":1,"message":"691","line":394,"column":6,"nodeType":"692","endLine":394,"endColumn":8,"suggestions":"754"},{"ruleId":"694","replacedBy":"755"},{"ruleId":"696","replacedBy":"756"},{"ruleId":"682","severity":1,"message":"757","line":22,"column":9,"nodeType":"684","messageId":"685","endLine":22,"endColumn":24},{"ruleId":"682","severity":1,"message":"758","line":23,"column":9,"nodeType":"684","messageId":"685","endLine":23,"endColumn":25},{"ruleId":"690","severity":1,"message":"759","line":125,"column":6,"nodeType":"692","endLine":125,"endColumn":8,"suggestions":"760"},{"ruleId":"682","severity":1,"message":"761","line":13,"column":8,"nodeType":"684","messageId":"685","endLine":13,"endColumn":17},{"ruleId":"690","severity":1,"message":"762","line":113,"column":6,"nodeType":"692","endLine":113,"endColumn":8,"suggestions":"763"},{"ruleId":"690","severity":1,"message":"704","line":23,"column":6,"nodeType":"692","endLine":23,"endColumn":8,"suggestions":"764"},{"ruleId":"694","replacedBy":"765"},{"ruleId":"696","replacedBy":"766"},{"ruleId":"690","severity":1,"message":"704","line":99,"column":6,"nodeType":"692","endLine":99,"endColumn":8,"suggestions":"767"},{"ruleId":"682","severity":1,"message":"768","line":6,"column":8,"nodeType":"684","messageId":"685","endLine":6,"endColumn":16},{"ruleId":"690","severity":1,"message":"704","line":54,"column":6,"nodeType":"692","endLine":54,"endColumn":8,"suggestions":"769"},{"ruleId":"682","severity":1,"message":"683","line":13,"column":9,"nodeType":"684","messageId":"685","endLine":13,"endColumn":13},{"ruleId":"690","severity":1,"message":"770","line":79,"column":6,"nodeType":"692","endLine":79,"endColumn":8,"suggestions":"771"},{"ruleId":"682","severity":1,"message":"772","line":19,"column":3,"nodeType":"684","messageId":"685","endLine":19,"endColumn":38},{"ruleId":"682","severity":1,"message":"773","line":23,"column":3,"nodeType":"684","messageId":"685","endLine":23,"endColumn":25},{"ruleId":"682","severity":1,"message":"774","line":24,"column":3,"nodeType":"684","messageId":"685","endLine":24,"endColumn":19},{"ruleId":"682","severity":1,"message":"747","line":29,"column":3,"nodeType":"684","messageId":"685","endLine":29,"endColumn":20},{"ruleId":"682","severity":1,"message":"775","line":39,"column":9,"nodeType":"684","messageId":"685","endLine":39,"endColumn":14},{"ruleId":"690","severity":1,"message":"776","line":90,"column":6,"nodeType":"692","endLine":90,"endColumn":8,"suggestions":"777"},{"ruleId":"682","severity":1,"message":"683","line":20,"column":9,"nodeType":"684","messageId":"685","endLine":20,"endColumn":13},{"ruleId":"690","severity":1,"message":"691","line":216,"column":6,"nodeType":"692","endLine":216,"endColumn":8,"suggestions":"778"},{"ruleId":"690","severity":1,"message":"762","line":204,"column":6,"nodeType":"692","endLine":204,"endColumn":8,"suggestions":"779"},{"ruleId":"694","replacedBy":"780"},{"ruleId":"696","replacedBy":"781"},{"ruleId":"690","severity":1,"message":"704","line":144,"column":6,"nodeType":"692","endLine":144,"endColumn":8,"suggestions":"782"},{"ruleId":"690","severity":1,"message":"783","line":74,"column":6,"nodeType":"692","endLine":74,"endColumn":8,"suggestions":"784"},{"ruleId":"690","severity":1,"message":"704","line":239,"column":6,"nodeType":"692","endLine":239,"endColumn":8,"suggestions":"785"},{"ruleId":"694","replacedBy":"786"},{"ruleId":"696","replacedBy":"787"},{"ruleId":"682","severity":1,"message":"788","line":16,"column":3,"nodeType":"684","messageId":"685","endLine":16,"endColumn":16},{"ruleId":"682","severity":1,"message":"789","line":24,"column":3,"nodeType":"684","messageId":"685","endLine":24,"endColumn":43},{"ruleId":"690","severity":1,"message":"790","line":110,"column":6,"nodeType":"692","endLine":110,"endColumn":8,"suggestions":"791"},{"ruleId":"694","replacedBy":"792"},{"ruleId":"696","replacedBy":"793"},{"ruleId":"682","severity":1,"message":"794","line":81,"column":3,"nodeType":"684","messageId":"685","endLine":81,"endColumn":21},{"ruleId":"682","severity":1,"message":"795","line":89,"column":9,"nodeType":"684","messageId":"685","endLine":89,"endColumn":22},{"ruleId":"682","severity":1,"message":"739","line":19,"column":9,"nodeType":"684","messageId":"685","endLine":19,"endColumn":17},{"ruleId":"690","severity":1,"message":"691","line":27,"column":6,"nodeType":"692","endLine":27,"endColumn":8,"suggestions":"796"},{"ruleId":"682","severity":1,"message":"683","line":18,"column":9,"nodeType":"684","messageId":"685","endLine":18,"endColumn":13},{"ruleId":"690","severity":1,"message":"691","line":117,"column":6,"nodeType":"692","endLine":117,"endColumn":8,"suggestions":"797"},{"ruleId":"682","severity":1,"message":"798","line":13,"column":10,"nodeType":"684","messageId":"685","endLine":13,"endColumn":16},{"ruleId":"690","severity":1,"message":"704","line":71,"column":6,"nodeType":"692","endLine":71,"endColumn":8,"suggestions":"799"},{"ruleId":"682","severity":1,"message":"739","line":8,"column":9,"nodeType":"684","messageId":"685","endLine":8,"endColumn":17},{"ruleId":"690","severity":1,"message":"704","line":17,"column":6,"nodeType":"692","endLine":17,"endColumn":8,"suggestions":"800"},{"ruleId":"690","severity":1,"message":"717","line":31,"column":6,"nodeType":"692","endLine":31,"endColumn":8,"suggestions":"801"},{"ruleId":"690","severity":1,"message":"717","line":31,"column":6,"nodeType":"692","endLine":31,"endColumn":8,"suggestions":"802"},{"ruleId":"682","severity":1,"message":"683","line":9,"column":9,"nodeType":"684","messageId":"685","endLine":9,"endColumn":13},{"ruleId":"690","severity":1,"message":"691","line":49,"column":6,"nodeType":"692","endLine":49,"endColumn":8,"suggestions":"803"},{"ruleId":"682","severity":1,"message":"683","line":26,"column":9,"nodeType":"684","messageId":"685","endLine":26,"endColumn":13},{"ruleId":"690","severity":1,"message":"804","line":254,"column":6,"nodeType":"692","endLine":254,"endColumn":8,"suggestions":"805"},{"ruleId":"682","severity":1,"message":"806","line":9,"column":3,"nodeType":"684","messageId":"685","endLine":9,"endColumn":42},{"ruleId":"690","severity":1,"message":"704","line":131,"column":6,"nodeType":"692","endLine":131,"endColumn":8,"suggestions":"807"},{"ruleId":"690","severity":1,"message":"808","line":78,"column":6,"nodeType":"692","endLine":78,"endColumn":8,"suggestions":"809"},{"ruleId":"690","severity":1,"message":"810","line":142,"column":6,"nodeType":"692","endLine":142,"endColumn":8,"suggestions":"811"},{"ruleId":"682","severity":1,"message":"683","line":21,"column":9,"nodeType":"684","messageId":"685","endLine":21,"endColumn":13},{"ruleId":"690","severity":1,"message":"691","line":165,"column":6,"nodeType":"692","endLine":165,"endColumn":8,"suggestions":"812"},{"ruleId":"690","severity":1,"message":"704","line":200,"column":6,"nodeType":"692","endLine":200,"endColumn":8,"suggestions":"813"},{"ruleId":"690","severity":1,"message":"704","line":266,"column":6,"nodeType":"692","endLine":266,"endColumn":8,"suggestions":"814"},{"ruleId":"682","severity":1,"message":"683","line":17,"column":9,"nodeType":"684","messageId":"685","endLine":17,"endColumn":13},{"ruleId":"690","severity":1,"message":"691","line":126,"column":6,"nodeType":"692","endLine":126,"endColumn":8,"suggestions":"815"},{"ruleId":"690","severity":1,"message":"704","line":190,"column":6,"nodeType":"692","endLine":190,"endColumn":8,"suggestions":"816"},{"ruleId":"682","severity":1,"message":"683","line":19,"column":9,"nodeType":"684","messageId":"685","endLine":19,"endColumn":13},{"ruleId":"690","severity":1,"message":"691","line":312,"column":6,"nodeType":"692","endLine":312,"endColumn":8,"suggestions":"817"},{"ruleId":"682","severity":1,"message":"818","line":12,"column":3,"nodeType":"684","messageId":"685","endLine":12,"endColumn":32},{"ruleId":"682","severity":1,"message":"683","line":20,"column":9,"nodeType":"684","messageId":"685","endLine":20,"endColumn":13},{"ruleId":"682","severity":1,"message":"819","line":24,"column":9,"nodeType":"684","messageId":"685","endLine":24,"endColumn":20},{"ruleId":"686","severity":1,"message":"687","line":47,"column":45,"nodeType":"688","messageId":"689","endLine":47,"endColumn":47},{"ruleId":"686","severity":1,"message":"687","line":61,"column":45,"nodeType":"688","messageId":"689","endLine":61,"endColumn":47},{"ruleId":"690","severity":1,"message":"820","line":109,"column":6,"nodeType":"692","endLine":109,"endColumn":8,"suggestions":"821"},{"ruleId":"682","severity":1,"message":"822","line":102,"column":9,"nodeType":"684","messageId":"685","endLine":102,"endColumn":24},{"ruleId":"682","severity":1,"message":"823","line":132,"column":9,"nodeType":"684","messageId":"685","endLine":132,"endColumn":23},{"ruleId":"690","severity":1,"message":"824","line":383,"column":6,"nodeType":"692","endLine":383,"endColumn":8,"suggestions":"825"},{"ruleId":"690","severity":1,"message":"826","line":252,"column":6,"nodeType":"692","endLine":252,"endColumn":8,"suggestions":"827"},{"ruleId":"682","severity":1,"message":"683","line":21,"column":9,"nodeType":"684","messageId":"685","endLine":21,"endColumn":13},{"ruleId":"690","severity":1,"message":"828","line":113,"column":6,"nodeType":"692","endLine":113,"endColumn":8,"suggestions":"829"},{"ruleId":"690","severity":1,"message":"830","line":98,"column":6,"nodeType":"692","endLine":98,"endColumn":8,"suggestions":"831"},{"ruleId":"682","severity":1,"message":"773","line":6,"column":3,"nodeType":"684","messageId":"685","endLine":6,"endColumn":25},{"ruleId":"682","severity":1,"message":"832","line":7,"column":3,"nodeType":"684","messageId":"685","endLine":7,"endColumn":27},{"ruleId":"682","severity":1,"message":"774","line":8,"column":3,"nodeType":"684","messageId":"685","endLine":8,"endColumn":19},{"ruleId":"690","severity":1,"message":"833","line":44,"column":6,"nodeType":"692","endLine":44,"endColumn":8,"suggestions":"834"},{"ruleId":"682","severity":1,"message":"739","line":8,"column":9,"nodeType":"684","messageId":"685","endLine":8,"endColumn":17},{"ruleId":"690","severity":1,"message":"704","line":15,"column":6,"nodeType":"692","endLine":15,"endColumn":8,"suggestions":"835"},{"ruleId":"690","severity":1,"message":"717","line":31,"column":6,"nodeType":"692","endLine":31,"endColumn":8,"suggestions":"836"},{"ruleId":"682","severity":1,"message":"837","line":11,"column":10,"nodeType":"684","messageId":"685","endLine":11,"endColumn":25},{"ruleId":"682","severity":1,"message":"838","line":14,"column":10,"nodeType":"684","messageId":"685","endLine":14,"endColumn":21},{"ruleId":"682","severity":1,"message":"839","line":14,"column":23,"nodeType":"684","messageId":"685","endLine":14,"endColumn":28},{"ruleId":"682","severity":1,"message":"840","line":14,"column":30,"nodeType":"684","messageId":"685","endLine":14,"endColumn":36},{"ruleId":"690","severity":1,"message":"841","line":133,"column":6,"nodeType":"692","endLine":133,"endColumn":8,"suggestions":"842"},{"ruleId":"690","severity":1,"message":"843","line":250,"column":6,"nodeType":"692","endLine":250,"endColumn":8,"suggestions":"844"},{"ruleId":"686","severity":1,"message":"687","line":29,"column":33,"nodeType":"688","messageId":"689","endLine":29,"endColumn":35},{"ruleId":"690","severity":1,"message":"845","line":51,"column":6,"nodeType":"692","endLine":51,"endColumn":8,"suggestions":"846"},{"ruleId":"682","severity":1,"message":"837","line":14,"column":10,"nodeType":"684","messageId":"685","endLine":14,"endColumn":25},{"ruleId":"682","severity":1,"message":"733","line":15,"column":10,"nodeType":"684","messageId":"685","endLine":15,"endColumn":17},{"ruleId":"682","severity":1,"message":"847","line":69,"column":11,"nodeType":"684","messageId":"685","endLine":69,"endColumn":19},{"ruleId":"690","severity":1,"message":"848","line":79,"column":6,"nodeType":"692","endLine":79,"endColumn":8,"suggestions":"849"},{"ruleId":"690","severity":1,"message":"704","line":74,"column":6,"nodeType":"692","endLine":74,"endColumn":8,"suggestions":"850"},{"ruleId":"682","severity":1,"message":"851","line":1,"column":17,"nodeType":"684","messageId":"685","endLine":1,"endColumn":26},{"ruleId":"682","severity":1,"message":"852","line":2,"column":10,"nodeType":"684","messageId":"685","endLine":2,"endColumn":21},{"ruleId":"682","severity":1,"message":"853","line":2,"column":23,"nodeType":"684","messageId":"685","endLine":2,"endColumn":34},{"ruleId":"682","severity":1,"message":"854","line":3,"column":10,"nodeType":"684","messageId":"685","endLine":3,"endColumn":20},{"ruleId":"682","severity":1,"message":"855","line":6,"column":8,"nodeType":"684","messageId":"685","endLine":6,"endColumn":20},{"ruleId":"682","severity":1,"message":"739","line":13,"column":9,"nodeType":"684","messageId":"685","endLine":13,"endColumn":17},{"ruleId":"690","severity":1,"message":"704","line":58,"column":6,"nodeType":"692","endLine":58,"endColumn":8,"suggestions":"856"},{"ruleId":"686","severity":1,"message":"687","line":27,"column":37,"nodeType":"688","messageId":"689","endLine":27,"endColumn":39},{"ruleId":"682","severity":1,"message":"857","line":511,"column":15,"nodeType":"684","messageId":"685","endLine":511,"endColumn":22},{"ruleId":"690","severity":1,"message":"704","line":782,"column":6,"nodeType":"692","endLine":782,"endColumn":8,"suggestions":"858"},{"ruleId":"690","severity":1,"message":"859","line":120,"column":6,"nodeType":"692","endLine":120,"endColumn":8,"suggestions":"860"},{"ruleId":"690","severity":1,"message":"717","line":31,"column":6,"nodeType":"692","endLine":31,"endColumn":8,"suggestions":"861"},{"ruleId":"690","severity":1,"message":"862","line":237,"column":6,"nodeType":"692","endLine":237,"endColumn":8,"suggestions":"863"},"no-unused-vars","'user' is assigned a value but never used.","Identifier","unusedVar","array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'history' and 'studentAuthID'. Either include them or remove the dependency array.","ArrayExpression",["864"],"no-native-reassign",["865"],"no-negated-in-lhs",["866"],"React Hook useEffect has missing dependencies: 'getAllMilestones', 'history', and 'teacherAuthID'. Either include them or remove the dependency array.",["867"],["865"],["866"],["865"],["866"],"React Hook useEffect has missing dependencies: 'history' and 'teacherAuthID'. Either include them or remove the dependency array.",["868"],["865"],["866"],["865"],["866"],["865"],["866"],"React Hook useEffect has missing dependencies: 'getAllReviews', 'history', and 'teacherAuthID'. Either include them or remove the dependency array.",["869"],["870"],["865"],["866"],"React Hook useEffect has missing dependencies: 'getStorageObj', 'history', and 'teacherAuthID'. Either include them or remove the dependency array.",["871"],["865"],["866"],"React Hook useEffect has missing dependencies: 'getAllAwards', 'getAllCerts', 'history', and 'studentAuthID'. Either include them or remove the dependency array.",["872"],["865"],["866"],"React Hook useEffect has missing dependencies: 'getAllFeedPosts', 'history', and 'studentAuthID'. Either include them or remove the dependency array.",["873"],["865"],["866"],"React Hook useEffect has missing dependencies: 'getAllAssignments', 'getAllExercises', 'getAllLessons', 'getAllMilestones', 'getAllQuizzes', 'history', and 'teacherAuthID'. Either include them or remove the dependency array.",["874"],"React Hook useEffect has missing dependencies: 'getAllMessages', 'getAllTeachers', 'history', and 'studentAuthID'. Either include them or remove the dependency array.",["875"],"'faTimes' is defined but never used.","React Hook useEffect has missing dependencies: 'checkForExistingStudents', 'getAllStudents', 'history', and 'teacherAuthID'. Either include them or remove the dependency array.",["876"],["877"],"'toggleAssigneeFormAction' is defined but never used.",["878"],"'dispatch' is assigned a value but never used.",["879"],["865"],["866"],"React Hook useEffect has missing dependencies: 'getAllServices', 'history', 'invoice', and 'teacherAuthID'. Either include them or remove the dependency array.",["880"],["865"],["866"],"'groups_Collection' is defined but never used.","'groupState' is assigned a value but never used.",["881"],["865"],["866"],["882"],["883"],["884"],["865"],["866"],"'isLoggedInState' is assigned a value but never used.","'accountTypeState' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'checkJoined', 'checkRequested', 'history', and 'teacherAuthID'. Either include them or remove the dependency array.",["885"],"'firestore' is defined but never used.","React Hook useEffect has missing dependencies: 'getAllStudents', 'history', and 'teacherAuthID'. Either include them or remove the dependency array.",["886"],["887"],["865"],["866"],["888"],"'GetToday' is defined but never used.",["889"],"React Hook useEffect has missing dependencies: 'getAllStudentAbout', 'getAllStudentExp', 'history', and 'studentAuthID'. Either include them or remove the dependency array.",["890"],"'storeTeacherForumsGeneralInfoAction' is defined but never used.","'storeAccountTypeAction' is defined but never used.","'isLoggedInAction' is defined but never used.","'state' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'getAllSettingData', 'getAllStatisticData', 'getAllUserData', 'history', and 'teacherAuthID'. Either include them or remove the dependency array.",["891"],["892"],["893"],["865"],["866"],["894"],"React Hook useEffect has missing dependencies: 'getAllAwards', 'history', and 'teacherAuthID'. Either include them or remove the dependency array.",["895"],["896"],["865"],["866"],"'faTimesCircle' is defined but never used.","'storeTeacherAddStudentSearchResultAction' is defined but never used.","React Hook useEffect has missing dependencies: 'getAllNotifications', 'history', and 'teacherAuthID'. Either include them or remove the dependency array.",["897"],["865"],["866"],"'dashFullMenuAction' is defined but never used.","'dashMenuState' is assigned a value but never used.",["898"],["899"],"'create' is defined but never used.",["900"],["901"],["902"],["903"],["904"],"React Hook useEffect has missing dependencies: 'getAllCourseExercises', 'getAllCourseLessons', 'getAllCourseQuizzes', 'getStudentProgress', 'history', and 'studentAuthID'. Either include them or remove the dependency array.",["905"],"'storeTeacherMilestonesGeneralInfoAction' is defined but never used.",["906"],"React Hook useEffect has missing dependencies: 'getAllAboutData', 'getAllExperienceData', 'history', and 'teacherAuthID'. Either include them or remove the dependency array.",["907"],"React Hook useEffect has missing dependencies: 'getAllPosts', 'history', and 'teacherAuthID'. Either include them or remove the dependency array.",["908"],["909"],["910"],["911"],["912"],["913"],["914"],"'storeStudentAssignmentsAction' is defined but never used.","'assignments' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'getAllAssignments', 'history', and 'studentAuthID'. Either include them or remove the dependency array.",["915"],"'turnMonthToLong' is assigned a value but never used.","'turnNumToShort' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'getAllEvents', 'getEventDetails', 'history', and 'teacherAuthID'. Either include them or remove the dependency array.",["916"],"React Hook useEffect has missing dependencies: 'getAllNotifications', 'history', and 'studentAuthID'. Either include them or remove the dependency array.",["917"],"React Hook useEffect has missing dependencies: 'getAllCourses', 'getStudentTeacherConnection', 'history', and 'studentAuthID'. Either include them or remove the dependency array.",["918"],"React Hook useEffect has missing dependencies: 'getAllAssignments', 'history', and 'teacherAuthID'. Either include them or remove the dependency array.",["919"],"'storeStudentAuthIDAction' is defined but never used.","React Hook useEffect has missing dependencies: 'getStudentUserData', 'history', and 'studentAuthID'. Either include them or remove the dependency array.",["920"],["921"],["922"],"'FontAwesomeIcon' is defined but never used.","'faEllipsisV' is defined but never used.","'faPen' is defined but never used.","'faPlus' is defined but never used.","React Hook useEffect has missing dependencies: 'getProfileFeedData', 'history', and 'teacherAuthID'. Either include them or remove the dependency array.",["923"],"React Hook useEffect has missing dependencies: 'getAllMessages', 'getAllStudentGeneralInfo', 'history', and 'teacherAuthID'. Either include them or remove the dependency array.",["924"],"React Hook useEffect has missing dependencies: 'getAllMembers', 'history', and 'teacherAuthID'. Either include them or remove the dependency array.",["925"],"'courseID' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'getAllCourses', 'history', and 'teacherAuthID'. Either include them or remove the dependency array.",["926"],["927"],"'useEffect' is defined but never used.","'useSelector' is defined but never used.","'useDispatch' is defined but never used.","'useHistory' is defined but never used.","'RandomString' is defined but never used.",["928"],"'raFalse' is assigned a value but never used.",["929"],"React Hook useEffect has missing dependencies: 'getAllLessons', 'getAllQuizzes', 'history', and 'teacherAuthID'. Either include them or remove the dependency array.",["930"],["931"],"React Hook useEffect has missing dependencies: 'getAllGroups', 'history', and 'teacherAuthID'. Either include them or remove the dependency array.",["932"],{"desc":"933","fix":"934"},"no-global-assign","no-unsafe-negation",{"desc":"935","fix":"936"},{"desc":"937","fix":"938"},{"desc":"939","fix":"940"},{"desc":"937","fix":"941"},{"desc":"942","fix":"943"},{"desc":"944","fix":"945"},{"desc":"946","fix":"947"},{"desc":"948","fix":"949"},{"desc":"950","fix":"951"},{"desc":"952","fix":"953"},{"desc":"937","fix":"954"},{"desc":"937","fix":"955"},{"desc":"937","fix":"956"},{"desc":"957","fix":"958"},{"desc":"937","fix":"959"},{"desc":"937","fix":"960"},{"desc":"942","fix":"961"},{"desc":"933","fix":"962"},{"desc":"963","fix":"964"},{"desc":"965","fix":"966"},{"desc":"937","fix":"967"},{"desc":"937","fix":"968"},{"desc":"937","fix":"969"},{"desc":"970","fix":"971"},{"desc":"972","fix":"973"},{"desc":"933","fix":"974"},{"desc":"965","fix":"975"},{"desc":"937","fix":"976"},{"desc":"977","fix":"978"},{"desc":"937","fix":"979"},{"desc":"980","fix":"981"},{"desc":"933","fix":"982"},{"desc":"933","fix":"983"},{"desc":"937","fix":"984"},{"desc":"937","fix":"985"},{"desc":"942","fix":"986"},{"desc":"942","fix":"987"},{"desc":"933","fix":"988"},{"desc":"989","fix":"990"},{"desc":"937","fix":"991"},{"desc":"992","fix":"993"},{"desc":"994","fix":"995"},{"desc":"933","fix":"996"},{"desc":"937","fix":"997"},{"desc":"937","fix":"998"},{"desc":"933","fix":"999"},{"desc":"937","fix":"1000"},{"desc":"933","fix":"1001"},{"desc":"1002","fix":"1003"},{"desc":"1004","fix":"1005"},{"desc":"1006","fix":"1007"},{"desc":"1008","fix":"1009"},{"desc":"1010","fix":"1011"},{"desc":"1012","fix":"1013"},{"desc":"937","fix":"1014"},{"desc":"942","fix":"1015"},{"desc":"1016","fix":"1017"},{"desc":"1018","fix":"1019"},{"desc":"1020","fix":"1021"},{"desc":"1022","fix":"1023"},{"desc":"937","fix":"1024"},{"desc":"937","fix":"1025"},{"desc":"937","fix":"1026"},{"desc":"1027","fix":"1028"},{"desc":"942","fix":"1029"},{"desc":"1030","fix":"1031"},"Update the dependencies array to be: [history, studentAuthID]",{"range":"1032","text":"1033"},"Update the dependencies array to be: [getAllMilestones, history, teacherAuthID]",{"range":"1034","text":"1035"},"Update the dependencies array to be: [history, teacherAuthID]",{"range":"1036","text":"1037"},"Update the dependencies array to be: [getAllReviews, history, teacherAuthID]",{"range":"1038","text":"1039"},{"range":"1040","text":"1037"},"Update the dependencies array to be: [getStorageObj, history, teacherAuthID]",{"range":"1041","text":"1042"},"Update the dependencies array to be: [getAllAwards, getAllCerts, history, studentAuthID]",{"range":"1043","text":"1044"},"Update the dependencies array to be: [getAllFeedPosts, history, studentAuthID]",{"range":"1045","text":"1046"},"Update the dependencies array to be: [getAllAssignments, getAllExercises, getAllLessons, getAllMilestones, getAllQuizzes, history, teacherAuthID]",{"range":"1047","text":"1048"},"Update the dependencies array to be: [getAllMessages, getAllTeachers, history, studentAuthID]",{"range":"1049","text":"1050"},"Update the dependencies array to be: [checkForExistingStudents, getAllStudents, history, teacherAuthID]",{"range":"1051","text":"1052"},{"range":"1053","text":"1037"},{"range":"1054","text":"1037"},{"range":"1055","text":"1037"},"Update the dependencies array to be: [getAllServices, history, invoice, teacherAuthID]",{"range":"1056","text":"1057"},{"range":"1058","text":"1037"},{"range":"1059","text":"1037"},{"range":"1060","text":"1042"},{"range":"1061","text":"1033"},"Update the dependencies array to be: [checkJoined, checkRequested, history, teacherAuthID]",{"range":"1062","text":"1063"},"Update the dependencies array to be: [getAllStudents, history, teacherAuthID]",{"range":"1064","text":"1065"},{"range":"1066","text":"1037"},{"range":"1067","text":"1037"},{"range":"1068","text":"1037"},"Update the dependencies array to be: [getAllStudentAbout, getAllStudentExp, history, studentAuthID]",{"range":"1069","text":"1070"},"Update the dependencies array to be: [getAllSettingData, getAllStatisticData, getAllUserData, history, teacherAuthID]",{"range":"1071","text":"1072"},{"range":"1073","text":"1033"},{"range":"1074","text":"1065"},{"range":"1075","text":"1037"},"Update the dependencies array to be: [getAllAwards, history, teacherAuthID]",{"range":"1076","text":"1077"},{"range":"1078","text":"1037"},"Update the dependencies array to be: [getAllNotifications, history, teacherAuthID]",{"range":"1079","text":"1080"},{"range":"1081","text":"1033"},{"range":"1082","text":"1033"},{"range":"1083","text":"1037"},{"range":"1084","text":"1037"},{"range":"1085","text":"1042"},{"range":"1086","text":"1042"},{"range":"1087","text":"1033"},"Update the dependencies array to be: [getAllCourseExercises, getAllCourseLessons, getAllCourseQuizzes, getStudentProgress, history, studentAuthID]",{"range":"1088","text":"1089"},{"range":"1090","text":"1037"},"Update the dependencies array to be: [getAllAboutData, getAllExperienceData, history, teacherAuthID]",{"range":"1091","text":"1092"},"Update the dependencies array to be: [getAllPosts, history, teacherAuthID]",{"range":"1093","text":"1094"},{"range":"1095","text":"1033"},{"range":"1096","text":"1037"},{"range":"1097","text":"1037"},{"range":"1098","text":"1033"},{"range":"1099","text":"1037"},{"range":"1100","text":"1033"},"Update the dependencies array to be: [getAllAssignments, history, studentAuthID]",{"range":"1101","text":"1102"},"Update the dependencies array to be: [getAllEvents, getEventDetails, history, teacherAuthID]",{"range":"1103","text":"1104"},"Update the dependencies array to be: [getAllNotifications, history, studentAuthID]",{"range":"1105","text":"1106"},"Update the dependencies array to be: [getAllCourses, getStudentTeacherConnection, history, studentAuthID]",{"range":"1107","text":"1108"},"Update the dependencies array to be: [getAllAssignments, history, teacherAuthID]",{"range":"1109","text":"1110"},"Update the dependencies array to be: [getStudentUserData, history, studentAuthID]",{"range":"1111","text":"1112"},{"range":"1113","text":"1037"},{"range":"1114","text":"1042"},"Update the dependencies array to be: [getProfileFeedData, history, teacherAuthID]",{"range":"1115","text":"1116"},"Update the dependencies array to be: [getAllMessages, getAllStudentGeneralInfo, history, teacherAuthID]",{"range":"1117","text":"1118"},"Update the dependencies array to be: [getAllMembers, history, teacherAuthID]",{"range":"1119","text":"1120"},"Update the dependencies array to be: [getAllCourses, history, teacherAuthID]",{"range":"1121","text":"1122"},{"range":"1123","text":"1037"},{"range":"1124","text":"1037"},{"range":"1125","text":"1037"},"Update the dependencies array to be: [getAllLessons, getAllQuizzes, history, teacherAuthID]",{"range":"1126","text":"1127"},{"range":"1128","text":"1042"},"Update the dependencies array to be: [getAllGroups, history, teacherAuthID]",{"range":"1129","text":"1130"},[9562,9564],"[history, studentAuthID]",[4334,4336],"[getAllMilestones, history, teacherAuthID]",[1032,1034],"[history, teacherAuthID]",[2634,2636],"[getAllReviews, history, teacherAuthID]",[2561,2563],[868,870],"[getStorageObj, history, teacherAuthID]",[2430,2432],"[getAllAwards, getAllCerts, history, studentAuthID]",[4122,4124],"[getAllFeedPosts, history, studentAuthID]",[13128,13130],"[getAllAssignments, getAllExercises, getAllLessons, getAllMilestones, getAllQuizzes, history, teacherAuthID]",[6119,6121],"[getAllMessages, getAllTeachers, history, studentAuthID]",[7978,7980],"[checkForExistingStudents, getAllStudents, history, teacherAuthID]",[2246,2248],[4580,4582],[597,599],[1424,1426],"[getAllServices, history, invoice, teacherAuthID]",[2358,2360],[1144,1146],[868,870],[10642,10644],[3631,3633],"[checkJoined, checkRequested, history, teacherAuthID]",[2991,2993],"[getAllStudents, history, teacherAuthID]",[624,626],[2713,2715],[1489,1491],[2228,2230],"[getAllStudentAbout, getAllStudentExp, history, studentAuthID]",[2697,2699],"[getAllSettingData, getAllStatisticData, getAllUserData, history, teacherAuthID]",[6416,6418],[5319,5321],[4043,4045],[2206,2208],"[getAllAwards, history, teacherAuthID]",[6782,6784],[3251,3253],"[getAllNotifications, history, teacherAuthID]",[1053,1055],[3274,3276],[2103,2105],[516,518],[872,874],[868,870],[1405,1407],[7993,7995],"[getAllCourseExercises, getAllCourseLessons, getAllCourseQuizzes, getStudentProgress, history, studentAuthID]",[3226,3228],[2394,2396],"[getAllAboutData, getAllExperienceData, history, teacherAuthID]",[3652,3654],"[getAllPosts, history, teacherAuthID]",[4283,4285],[5462,5464],[7542,7544],[3466,3468],[6091,6093],[8306,8308],[2987,2989],"[getAllAssignments, history, studentAuthID]",[9401,9403],"[getAllEvents, getEventDetails, history, teacherAuthID]",[7424,7426],"[getAllNotifications, history, studentAuthID]",[3219,3221],"[getAllCourses, getStudentTeacherConnection, history, studentAuthID]",[2931,2933],"[getAllAssignments, history, teacherAuthID]",[1176,1178],"[getStudentUserData, history, studentAuthID]",[445,447],[868,870],[4057,4059],"[getProfileFeedData, history, teacherAuthID]",[6839,6841],"[getAllMessages, getAllStudentGeneralInfo, history, teacherAuthID]",[1437,1439],"[getAllMembers, history, teacherAuthID]",[2262,2264],"[getAllCourses, history, teacherAuthID]",[2029,2031],[1688,1690],[23414,23416],[3448,3450],"[getAllLessons, getAllQuizzes, history, teacherAuthID]",[870,872],[6305,6307],"[getAllGroups, history, teacherAuthID]"]