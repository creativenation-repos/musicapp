[{"/Users/jesusjimenez/Creative/MusicProject/musicapp/src/redux/reducers.js":"1","/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Teachers/Milestones/MilestonesMain.js":"2","/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Teachers/FileManager/FileManagerMain.js":"3","/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Teachers/Invoices/InvoicesMain.js":"4","/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Teachers/Support/SupportMain.js":"5","/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Footer.js":"6","/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Plans/PlanPanel.js":"7","/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/InputDateFormatter.js":"8","/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Courses/CoursesCard.js":"9","/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Teachers/Profile/ProfileReviewsView.js":"10","/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Teachers/Profile/ProfileFeedCreate.js":"11","/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Teachers/Statistics/GroupStats.js":"12","/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Teachers/Forums/ForumSinglePostBlock.js":"13","/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Teachers/Students/StudentOverview.js":"14","/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Courses.js":"15","/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Students/Messages/StudentMessagesMain.js":"16","/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Teachers/Students/StudentsMain.js":"17","/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Teachers/Invoices/InvoiceView.js":"18","/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Teachers/Forums/ForumsMain.js":"19","/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/RandomString.js":"20","/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Teachers/Dash/Achievement.js":"21","/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Teachers/Dash/DashFooter.js":"22","/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Teachers/Profile/ProfileGallery.js":"23","/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Teachers/Groups/GroupAboutEdit.js":"24","/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Teachers/Statistics/EventStats.js":"25","/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Home/HomeCoursesCard.js":"26","/Users/jesusjimenez/Creative/MusicProject/musicapp/src/redux/actions.js":"27","/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Login.js":"28","/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Teachers/Groups/GroupsPage.js":"29","/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Teachers/Articles/ArticlesMain.js":"30","/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Teachers/Settings/SettingsMain.js":"31","/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Students/Footer.js":"32","/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Teachers/Dash/AnnouncementBox.js":"33","/Users/jesusjimenez/Creative/MusicProject/musicapp/src/utils/tools.js":"34","/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Teachers/Profile/ProfileFeedEdit.js":"35","/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Teachers/Invoices/InvoiceBlock.js":"36","/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Teachers/Groups/GroupFeedEdit.js":"37","/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/TeacherDash.js":"38","/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Teachers/Assignments/AssignmentView.js":"39","/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/GetToday.js":"40","/Users/jesusjimenez/Creative/MusicProject/musicapp/src/utils/firebase.js":"41","/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Teachers/Profile/ProfileAwardsView.js":"42","/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Teachers/Profile/ProfileAwardsEdit.js":"43","/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Teachers/Dash/TopBar.js":"44","/Users/jesusjimenez/Creative/MusicProject/musicapp/src/App.js":"45","/Users/jesusjimenez/Creative/MusicProject/musicapp/src/index.js":"46","/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Students/Profile/StudentProfileMain.js":"47","/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Students/Messages/StudentMessageThreadView.js":"48","/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Teachers/Groups/GroupAboutView.js":"49","/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Teachers/Statistics/StudentStats.js":"50","/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Teachers/Statistics/StorageStats.js":"51","/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Teachers/Profile/ProfileAboutView.js":"52","/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Teachers/Dash/RecentActivity.js":"53","/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Teachers/Dash/UpcomingEvents.js":"54","/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Teachers/Articles/ArticleBlock.js":"55","/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Teachers/Groups/GroupFeedView.js":"56","/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Teachers/Assignments/AssignmentEdit.js":"57","/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Teachers/Statistics/StatisticsMain.js":"58","/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Courses/CoursesDeck.js":"59","/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/FirebaseDate.js":"60","/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Teachers/Profile/ProfileAboutEdit.js":"61","/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Teachers/Assignments/AssignmentNew.js":"62","/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Teachers/Events/EventsMain.js":"63","/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Home/HomeCoursesDeck.js":"64","/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Teachers/Tutorials/TutorialsMain.js":"65","/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Students/TopBar.js":"66","/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Home.js":"67","/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Teachers/Dash/RecentInvoices.js":"68","/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Students/Courses/StudentCoursesMain.js":"69","/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Teachers/Assignments/AssignmentsMain.js":"70","/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Teachers/Dash/SimpleStats.js":"71","/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/MiscComponents/Notice.js":"72","/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Students/StudentDash.js":"73","/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Teachers/Connections/ConnectionsMain.js":"74","/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Teachers/Statistics/ForumStats.js":"75","/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Teachers/Profile/ProfileFeedView.js":"76","/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Teachers/Messages/MessagesMain.js":"77","/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Teachers/Groups/GroupMembersView.js":"78","/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Teachers/Dash/Earnings.js":"79","/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Plans.js":"80","/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Teachers/Courses/CoursesMain.js":"81","/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Teachers/Courses/WizardNewCourse.js":"82","/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/FileUpload.js":"83","/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Teachers/Courses/WizardNewLesson.js":"84","/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Teachers/Courses/WizardNewQuiz.js":"85","/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Contact.js":"86","/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Teachers/Forums/ForumBlocks.js":"87","/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Teachers/Courses/CourseOverview.js":"88","/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Teachers/Statistics/CourseStats.js":"89","/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Teachers/Groups/GroupsMain.js":"90","/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Teachers/Courses/WizardEditLesson.js":"91","/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Teachers/Courses/WizardEditQuiz.js":"92","/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Teachers/Forums/ForumSingleBlock.js":"93","/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Students/Courses/StudentCourseOverview.js":"94","/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Students/Courses/StudentCourseLesson.js":"95","/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Students/Courses/StudentCourseQuiz.js":"96","/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Students/Courses/StudentCourseQuizResults.js":"97","/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Teachers/Profile/ProfileMain.js":"98","/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Students/Connections/StudentConnectionsMain.js":"99","/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Students/Profile/StudentProfileFeedView.js":"100","/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Students/Profile/StudentProfileFeedEdit.js":"101","/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Students/Profile/StudentProfileFeedCreate.js":"102","/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Students/Profile/StudentProfileAboutView.js":"103","/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Students/Profile/StudentProfileAboutEdit.js":"104","/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Students/Profile/StudentProfileAwardsView.js":"105","/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Students/Profile/StudentProfileAwardsEdit.js":"106","/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Students/Profile/StudentProfileReviewsView.js":"107","/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Students/Profile/StudentProfileReviewsEdit.js":"108","/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Students/Profile/StudentProfileReviewsCreate.js":"109","/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Teachers/Milestones/MilestonesView.js":"110","/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Teachers/Milestones/MilestonesEdit.js":"111","/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Teachers/Milestones/MilestonesCreate.js":"112","/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Teachers/Messages/MessagesCreate.js":"113","/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Teachers/Messages/MessagesView.js":"114","/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Teachers/Events/EventsView.js":"115","/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Teachers/Events/EventsCreate.js":"116","/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Teachers/Events/EventsEdit.js":"117","/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Students/Assignments/StudentAssignmentsMain.js":"118","/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Students/Assignments/StudentAssignmentsView.js":"119","/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Students/Milestones/StudentMilestonesMain.js":"120","/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Students/Milestones/StudentMilestoneView.js":"121"},{"size":52236,"mtime":1622419102612,"results":"122","hashOfConfig":"123"},{"size":3944,"mtime":1621366004212,"results":"124","hashOfConfig":"123"},{"size":381,"mtime":1611098584000,"results":"125","hashOfConfig":"123"},{"size":1939,"mtime":1612304304000,"results":"126","hashOfConfig":"123"},{"size":372,"mtime":1611098940000,"results":"127","hashOfConfig":"123"},{"size":546,"mtime":1610060462000,"results":"128","hashOfConfig":"123"},{"size":516,"mtime":1610149688000,"results":"129","hashOfConfig":"123"},{"size":330,"mtime":1613170976000,"results":"130","hashOfConfig":"123"},{"size":532,"mtime":1610137072000,"results":"131","hashOfConfig":"123"},{"size":2342,"mtime":1620942124298,"results":"132","hashOfConfig":"123"},{"size":4655,"mtime":1620759642780,"results":"133","hashOfConfig":"123"},{"size":994,"mtime":1611252184000,"results":"134","hashOfConfig":"123"},{"size":887,"mtime":1612127232000,"results":"135","hashOfConfig":"123"},{"size":14962,"mtime":1619064845259,"results":"136","hashOfConfig":"123"},{"size":1420,"mtime":1612132370000,"results":"137","hashOfConfig":"123"},{"size":6706,"mtime":1617233350000,"results":"138","hashOfConfig":"123"},{"size":8699,"mtime":1622480325075,"results":"139","hashOfConfig":"123"},{"size":3473,"mtime":1612306040000,"results":"140","hashOfConfig":"123"},{"size":3424,"mtime":1612222558000,"results":"141","hashOfConfig":"123"},{"size":106,"mtime":1613175542000,"results":"142","hashOfConfig":"123"},{"size":220,"mtime":1610317768000,"results":"143","hashOfConfig":"123"},{"size":330,"mtime":1617706170000,"results":"144","hashOfConfig":"123"},{"size":158,"mtime":1611255536000,"results":"145","hashOfConfig":"123"},{"size":1500,"mtime":1614100694000,"results":"146","hashOfConfig":"123"},{"size":994,"mtime":1611252302000,"results":"147","hashOfConfig":"123"},{"size":443,"mtime":1610059478000,"results":"148","hashOfConfig":"123"},{"size":27070,"mtime":1622419107742,"results":"149","hashOfConfig":"123"},{"size":6638,"mtime":1621787393549,"results":"150","hashOfConfig":"123"},{"size":5106,"mtime":1614103304000,"results":"151","hashOfConfig":"123"},{"size":1204,"mtime":1611792358000,"results":"152","hashOfConfig":"123"},{"size":374,"mtime":1611098776000,"results":"153","hashOfConfig":"123"},{"size":261,"mtime":1619107169603,"results":"154","hashOfConfig":"123"},{"size":229,"mtime":1610317410000,"results":"155","hashOfConfig":"123"},{"size":197,"mtime":1612831364000,"results":"156","hashOfConfig":"123"},{"size":5138,"mtime":1620760006947,"results":"157","hashOfConfig":"123"},{"size":468,"mtime":1612301776000,"results":"158","hashOfConfig":"123"},{"size":1842,"mtime":1614099488000,"results":"159","hashOfConfig":"123"},{"size":3770,"mtime":1619580122789,"results":"160","hashOfConfig":"123"},{"size":8216,"mtime":1621115073350,"results":"161","hashOfConfig":"123"},{"size":142,"mtime":1617401924000,"results":"162","hashOfConfig":"123"},{"size":1533,"mtime":1620668512923,"results":"163","hashOfConfig":"123"},{"size":4413,"mtime":1620944934019,"results":"164","hashOfConfig":"123"},{"size":14436,"mtime":1620932693044,"results":"165","hashOfConfig":"123"},{"size":11564,"mtime":1620759579468,"results":"166","hashOfConfig":"123"},{"size":37777,"mtime":1622418735727,"results":"167","hashOfConfig":"123"},{"size":356,"mtime":1610057812000,"results":"168","hashOfConfig":"123"},{"size":4592,"mtime":1621010033254,"results":"169","hashOfConfig":"123"},{"size":3902,"mtime":1617232042000,"results":"170","hashOfConfig":"123"},{"size":788,"mtime":1614100210000,"results":"171","hashOfConfig":"123"},{"size":1009,"mtime":1611184392000,"results":"172","hashOfConfig":"123"},{"size":1033,"mtime":1611165286000,"results":"173","hashOfConfig":"123"},{"size":4992,"mtime":1620795582375,"results":"174","hashOfConfig":"123"},{"size":227,"mtime":1610317616000,"results":"175","hashOfConfig":"123"},{"size":227,"mtime":1610317810000,"results":"176","hashOfConfig":"123"},{"size":318,"mtime":1611792400000,"results":"177","hashOfConfig":"123"},{"size":3994,"mtime":1613943452000,"results":"178","hashOfConfig":"123"},{"size":7759,"mtime":1621116662447,"results":"179","hashOfConfig":"123"},{"size":1810,"mtime":1611162374000,"results":"180","hashOfConfig":"123"},{"size":402,"mtime":1610137228000,"results":"181","hashOfConfig":"123"},{"size":279,"mtime":1615666200000,"results":"182","hashOfConfig":"123"},{"size":14703,"mtime":1620800307284,"results":"183","hashOfConfig":"123"},{"size":9365,"mtime":1621117899342,"results":"184","hashOfConfig":"123"},{"size":8090,"mtime":1621785409986,"results":"185","hashOfConfig":"123"},{"size":841,"mtime":1610059896000,"results":"186","hashOfConfig":"123"},{"size":376,"mtime":1611098846000,"results":"187","hashOfConfig":"123"},{"size":17907,"mtime":1622390795264,"results":"188","hashOfConfig":"123"},{"size":3710,"mtime":1615312832000,"results":"189","hashOfConfig":"123"},{"size":227,"mtime":1610317656000,"results":"190","hashOfConfig":"123"},{"size":4462,"mtime":1620495025454,"results":"191","hashOfConfig":"123"},{"size":4317,"mtime":1621034200627,"results":"192","hashOfConfig":"123"},{"size":221,"mtime":1610317554000,"results":"193","hashOfConfig":"123"},{"size":426,"mtime":1617121720000,"results":"194","hashOfConfig":"123"},{"size":1426,"mtime":1621787360437,"results":"195","hashOfConfig":"123"},{"size":12070,"mtime":1621233269601,"results":"196","hashOfConfig":"123"},{"size":1005,"mtime":1611252314000,"results":"197","hashOfConfig":"123"},{"size":4534,"mtime":1620933944286,"results":"198","hashOfConfig":"123"},{"size":6756,"mtime":1621634679565,"results":"199","hashOfConfig":"123"},{"size":1519,"mtime":1614101380000,"results":"200","hashOfConfig":"123"},{"size":214,"mtime":1610317724000,"results":"201","hashOfConfig":"123"},{"size":3165,"mtime":1610172378000,"results":"202","hashOfConfig":"123"},{"size":7055,"mtime":1621369963214,"results":"203","hashOfConfig":"123"},{"size":3333,"mtime":1619243796871,"results":"204","hashOfConfig":"123"},{"size":1960,"mtime":1619284140545,"results":"205","hashOfConfig":"123"},{"size":4538,"mtime":1619575780279,"results":"206","hashOfConfig":"123"},{"size":29046,"mtime":1619576051979,"results":"207","hashOfConfig":"123"},{"size":1878,"mtime":1610173754000,"results":"208","hashOfConfig":"123"},{"size":249,"mtime":1612221170000,"results":"209","hashOfConfig":"123"},{"size":14617,"mtime":1619581357451,"results":"210","hashOfConfig":"123"},{"size":999,"mtime":1611252310000,"results":"211","hashOfConfig":"123"},{"size":7076,"mtime":1614556054000,"results":"212","hashOfConfig":"123"},{"size":4197,"mtime":1619503660836,"results":"213","hashOfConfig":"123"},{"size":51100,"mtime":1619559577371,"results":"214","hashOfConfig":"123"},{"size":668,"mtime":1612127014000,"results":"215","hashOfConfig":"123"},{"size":9673,"mtime":1622518651450,"results":"216","hashOfConfig":"123"},{"size":3348,"mtime":1622517556546,"results":"217","hashOfConfig":"123"},{"size":19075,"mtime":1622481770803,"results":"218","hashOfConfig":"123"},{"size":2293,"mtime":1620489433805,"results":"219","hashOfConfig":"123"},{"size":4306,"mtime":1620795644525,"results":"220","hashOfConfig":"123"},{"size":11489,"mtime":1620757380417,"results":"221","hashOfConfig":"123"},{"size":4305,"mtime":1621010923668,"results":"222","hashOfConfig":"123"},{"size":5183,"mtime":1620759107941,"results":"223","hashOfConfig":"123"},{"size":4739,"mtime":1620754875338,"results":"224","hashOfConfig":"123"},{"size":4950,"mtime":1620943615216,"results":"225","hashOfConfig":"123"},{"size":14917,"mtime":1620943547818,"results":"226","hashOfConfig":"123"},{"size":4687,"mtime":1620944855357,"results":"227","hashOfConfig":"123"},{"size":14490,"mtime":1620944996818,"results":"228","hashOfConfig":"123"},{"size":3709,"mtime":1621011166795,"results":"229","hashOfConfig":"123"},{"size":3624,"mtime":1621011157059,"results":"230","hashOfConfig":"123"},{"size":3668,"mtime":1621011143744,"results":"231","hashOfConfig":"123"},{"size":8912,"mtime":1622418199435,"results":"232","hashOfConfig":"123"},{"size":5528,"mtime":1621362862114,"results":"233","hashOfConfig":"123"},{"size":2682,"mtime":1621366116407,"results":"234","hashOfConfig":"123"},{"size":5914,"mtime":1621638389861,"results":"235","hashOfConfig":"123"},{"size":6494,"mtime":1621637048184,"results":"236","hashOfConfig":"123"},{"size":2333,"mtime":1621724019831,"results":"237","hashOfConfig":"123"},{"size":7671,"mtime":1621723497832,"results":"238","hashOfConfig":"123"},{"size":8458,"mtime":1621724617008,"results":"239","hashOfConfig":"123"},{"size":4642,"mtime":1622323743930,"results":"240","hashOfConfig":"123"},{"size":8766,"mtime":1622323644331,"results":"241","hashOfConfig":"123"},{"size":4519,"mtime":1622420798616,"results":"242","hashOfConfig":"123"},{"size":2974,"mtime":1622420854578,"results":"243","hashOfConfig":"123"},{"filePath":"244","messages":"245","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1fkqrla",{"filePath":"246","messages":"247","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"248","usedDeprecatedRules":"249"},{"filePath":"250","messages":"251","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"252"},{"filePath":"253","messages":"254","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"255","usedDeprecatedRules":"256"},{"filePath":"257","messages":"258","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"259"},{"filePath":"260","messages":"261","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"262"},{"filePath":"263","messages":"264","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"265"},{"filePath":"266","messages":"267","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"268"},{"filePath":"269","messages":"270","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"271"},{"filePath":"272","messages":"273","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"274","usedDeprecatedRules":"275"},{"filePath":"276","messages":"277","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"278","usedDeprecatedRules":"279"},{"filePath":"280","messages":"281","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"282","usedDeprecatedRules":"283"},{"filePath":"284","messages":"285","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"268"},{"filePath":"286","messages":"287","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"288","usedDeprecatedRules":"289"},{"filePath":"290","messages":"291","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"289"},{"filePath":"292","messages":"293","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"294","usedDeprecatedRules":"256"},{"filePath":"295","messages":"296","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"297","usedDeprecatedRules":"262"},{"filePath":"298","messages":"299","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"300","usedDeprecatedRules":"301"},{"filePath":"302","messages":"303","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"304","usedDeprecatedRules":"279"},{"filePath":"305","messages":"306","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"307"},{"filePath":"308","messages":"309","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"279"},{"filePath":"310","messages":"311","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"312"},{"filePath":"313","messages":"314","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"268"},{"filePath":"315","messages":"316","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"317","usedDeprecatedRules":"289"},{"filePath":"318","messages":"319","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"320","usedDeprecatedRules":"321"},{"filePath":"322","messages":"323","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"324"},{"filePath":"325","messages":"326","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"327","messages":"328","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"329","usedDeprecatedRules":"279"},{"filePath":"330","messages":"331","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"332","usedDeprecatedRules":"275"},{"filePath":"333","messages":"334","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"335","usedDeprecatedRules":"262"},{"filePath":"336","messages":"337","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"289"},{"filePath":"338","messages":"339","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"279"},{"filePath":"340","messages":"341","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"256"},{"filePath":"342","messages":"343","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"279"},{"filePath":"344","messages":"345","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"346","usedDeprecatedRules":"265"},{"filePath":"347","messages":"348","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"289"},{"filePath":"349","messages":"350","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"351","usedDeprecatedRules":"352"},{"filePath":"353","messages":"354","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"355","usedDeprecatedRules":"356"},{"filePath":"357","messages":"358","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"359","usedDeprecatedRules":"301"},{"filePath":"360","messages":"361","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"259"},{"filePath":"362","messages":"363","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"259"},{"filePath":"364","messages":"365","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"366","usedDeprecatedRules":"262"},{"filePath":"367","messages":"368","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"369","usedDeprecatedRules":"301"},{"filePath":"370","messages":"371","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"372","usedDeprecatedRules":"262"},{"filePath":"373","messages":"374","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"375","messages":"376","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"279"},{"filePath":"377","messages":"378","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"379","usedDeprecatedRules":"262"},{"filePath":"380","messages":"381","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"382","usedDeprecatedRules":"289"},{"filePath":"383","messages":"384","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"385","usedDeprecatedRules":"386"},{"filePath":"387","messages":"388","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"389","usedDeprecatedRules":"259"},{"filePath":"390","messages":"391","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"392","usedDeprecatedRules":"393"},{"filePath":"394","messages":"395","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"396","usedDeprecatedRules":"279"},{"filePath":"397","messages":"398","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"399"},{"filePath":"400","messages":"401","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"262"},{"filePath":"402","messages":"403","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"279"},{"filePath":"404","messages":"405","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"406","usedDeprecatedRules":"256"},{"filePath":"407","messages":"408","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"409","usedDeprecatedRules":"249"},{"filePath":"410","messages":"411","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"289"},{"filePath":"412","messages":"413","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"275"},{"filePath":"414","messages":"415","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"279"},{"filePath":"416","messages":"417","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"418","usedDeprecatedRules":"312"},{"filePath":"419","messages":"420","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"421","usedDeprecatedRules":"279"},{"filePath":"422","messages":"423","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"424","usedDeprecatedRules":"259"},{"filePath":"425","messages":"426","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"427"},{"filePath":"428","messages":"429","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"279"},{"filePath":"430","messages":"431","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"432","messages":"433","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"275"},{"filePath":"434","messages":"435","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"436"},{"filePath":"437","messages":"438","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"439","usedDeprecatedRules":"259"},{"filePath":"440","messages":"441","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"442","usedDeprecatedRules":"352"},{"filePath":"443","messages":"444","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"271"},{"filePath":"445","messages":"446","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"436"},{"filePath":"447","messages":"448","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"449","usedDeprecatedRules":"268"},{"filePath":"450","messages":"451","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"452","usedDeprecatedRules":"279"},{"filePath":"453","messages":"454","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"455","usedDeprecatedRules":"456"},{"filePath":"457","messages":"458","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"459","usedDeprecatedRules":"256"},{"filePath":"460","messages":"461","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"462","usedDeprecatedRules":"262"},{"filePath":"463","messages":"464","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"465","usedDeprecatedRules":"279"},{"filePath":"466","messages":"467","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"268"},{"filePath":"468","messages":"469","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"427"},{"filePath":"470","messages":"471","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"472","usedDeprecatedRules":"262"},{"filePath":"473","messages":"474","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"475","usedDeprecatedRules":"476"},{"filePath":"477","messages":"478","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"479","usedDeprecatedRules":"456"},{"filePath":"480","messages":"481","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"482","usedDeprecatedRules":"259"},{"filePath":"483","messages":"484","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"485","usedDeprecatedRules":"289"},{"filePath":"486","messages":"487","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"262"},{"filePath":"488","messages":"489","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"352"},{"filePath":"490","messages":"491","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"492","usedDeprecatedRules":"427"},{"filePath":"493","messages":"494","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"495","usedDeprecatedRules":"262"},{"filePath":"496","messages":"497","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"498","usedDeprecatedRules":"256"},{"filePath":"499","messages":"500","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"501","usedDeprecatedRules":"262"},{"filePath":"502","messages":"503","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"504","usedDeprecatedRules":"352"},{"filePath":"505","messages":"506","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"289"},{"filePath":"507","messages":"508","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"509","messages":"510","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"511","messages":"512","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"513","messages":"514","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"515","usedDeprecatedRules":"279"},{"filePath":"516","messages":"517","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"518","usedDeprecatedRules":"456"},{"filePath":"519","messages":"520","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"521","usedDeprecatedRules":"275"},{"filePath":"522","messages":"523","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"524","usedDeprecatedRules":"525"},{"filePath":"526","messages":"527","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"528","usedDeprecatedRules":"529"},{"filePath":"530","messages":"531","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"532","usedDeprecatedRules":"256"},{"filePath":"533","messages":"534","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"535","usedDeprecatedRules":"262"},{"filePath":"536","messages":"537","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"538","usedDeprecatedRules":"275"},{"filePath":"539","messages":"540","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"541","usedDeprecatedRules":"289"},{"filePath":"542","messages":"543","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"544","usedDeprecatedRules":"262"},{"filePath":"545","messages":"546","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"547","usedDeprecatedRules":"279"},{"filePath":"548","messages":"549","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"550","usedDeprecatedRules":"356"},{"filePath":"551","messages":"552","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"553","usedDeprecatedRules":"321"},{"filePath":"554","messages":"555","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"556","messages":"557","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"558","usedDeprecatedRules":"476"},{"filePath":"559","messages":"560","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"561","usedDeprecatedRules":"259"},{"filePath":"562","messages":"563","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"564","usedDeprecatedRules":"352"},{"filePath":"565","messages":"566","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"567","usedDeprecatedRules":"427"},{"filePath":"568","messages":"569","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"570","usedDeprecatedRules":"268"},{"filePath":"571","messages":"572","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"573","usedDeprecatedRules":"265"},{"filePath":"574","messages":"575","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"576","usedDeprecatedRules":"262"},{"filePath":"577","messages":"578","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"579","messages":"580","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"581","usedDeprecatedRules":"259"},{"filePath":"582","messages":"583","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"584","messages":"585","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"586","usedDeprecatedRules":"352"},"/Users/jesusjimenez/Creative/MusicProject/musicapp/src/redux/reducers.js",[],"/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Teachers/Milestones/MilestonesMain.js",["587","588"],"import React, { useEffect } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { useHistory } from \"react-router-dom\";\nimport {\n  storeTeacherMilestonesGeneralInfoAction,\n  storeTeacherSingleMilestoneSetAction,\n} from \"../../../redux/actions\";\nimport { teachers_Collection } from \"../../../utils/firebase\";\nimport DashFooter from \"../Dash/DashFooter\";\nimport TopBar from \"../Dash/TopBar\";\nimport \"./Milestones.css\";\n\nimport { firebaseLooper } from \"../../../utils/tools\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faMinus, faTimesCircle } from \"@fortawesome/free-solid-svg-icons\";\n\nexport default function MilestonesMain() {\n  const teacherAuthID = useSelector((state) => state.storeTeacherAuthIDReducer);\n  const history = useHistory();\n  const dispatch = useDispatch();\n\n  const milestones = useSelector(\n    (state) => state.storeTeacherMilestonesGeneralInfoReducer\n  );\n\n  // GET\n  const getMilestones = () => {\n    teachers_Collection\n      .doc(teacherAuthID)\n      .collection(\"Milestones\")\n      .get()\n      .then((snapshot) => {\n        const mileData = firebaseLooper(snapshot);\n\n        dispatch(storeTeacherMilestonesGeneralInfoAction(mileData));\n      })\n      .catch((err) => console.log(err));\n  };\n\n  // HANDLE\n  const handleMilestoneList = () => {\n    return milestones.map((mile, i) => {\n      return (\n        <div className=\"milestone-block\" key={i}>\n          <p className=\"mile-name\">{mile.Name}</p>\n          <div style={{ marginLeft: \"auto\", marginRight: \"10px\" }}>\n            <button\n              id={mile.id}\n              onClick={navMilestoneView}\n              className=\"mile-view\"\n            >\n              View\n            </button>\n            <button id={mile.id} onClick={removeSet} className=\"mile-remove\">\n              <FontAwesomeIcon icon={faMinus} />\n            </button>\n          </div>\n        </div>\n      );\n    });\n  };\n\n  // NAV\n  const navMilestoneView = (event) => {\n    const mileID = event.target.getAttribute(\"id\");\n\n    milestones.forEach((mile) => {\n      if (mile.id === mileID) {\n        dispatch(storeTeacherSingleMilestoneSetAction(mile));\n      }\n    });\n\n    history.push(\"/teacher-milestone-view\");\n  };\n\n  // REMOVE\n  const removeSet = (event) => {\n    const setID = event.target.getAttribute(\"id\");\n\n    // // Remove from DB\n    teachers_Collection\n      .doc(teacherAuthID)\n      .collection(\"Milestones\")\n      .doc(setID)\n      .collection(\"MilestoneTasks\")\n      .get()\n      .then((snapshot) => {\n        const tasksData = firebaseLooper(snapshot);\n        tasksData.forEach((t) => {\n          teachers_Collection\n            .doc(teacherAuthID)\n            .collection(\"Milestones\")\n            .doc(setID)\n            .collection(\"MilestoneTasks\")\n            .doc(t.id)\n            .delete()\n            .catch((err) => console.log(err));\n        });\n      })\n      .catch((err) => console.log(err));\n\n    teachers_Collection\n      .doc(teacherAuthID)\n      .collection(\"Milestones\")\n      .doc(setID)\n      .delete()\n      .catch((err) => console.log(err));\n\n    // DIspatch\n    const allSets = [...milestones];\n    const filtered = allSets.filter((s) => s.id !== setID);\n    console.log(filtered);\n\n    dispatch(storeTeacherMilestonesGeneralInfoAction(filtered));\n  };\n\n  useEffect(() => {\n    if (!teacherAuthID) {\n      history.push(\"/teacherdash\");\n      return;\n    }\n\n    getMilestones();\n  }, []);\n  return (\n    <div>\n      {/* Top Bar */}\n      <div>\n        <TopBar />\n      </div>\n\n      <div className=\"content\">\n        <h1>Milestones</h1>\n        <button\n          onClick={() => history.push(\"/teacher-milestone-create\")}\n          className=\"btnCreate\"\n        >\n          Create New Milestone Set\n        </button>\n\n        <div className=\"white-background\">{handleMilestoneList()}</div>\n      </div>\n\n      {/* Footer */}\n      <div>\n        <DashFooter />\n      </div>\n    </div>\n  );\n}\n",["589","590"],"/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Teachers/FileManager/FileManagerMain.js",[],["591","592"],"/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Teachers/Invoices/InvoicesMain.js",["593"],"import React, { useEffect } from \"react\";\n\nimport TopBar from \"../Dash/TopBar\";\nimport InvoiceBlock from \"./InvoiceBlock\";\nimport DashFooter from \"../Dash/DashFooter\";\n\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { useHistory } from \"react-router-dom\";\nimport {storeSingleInvoiceAction} from '../../../redux/actions';\n\n\nexport default function InvoicesMain() {\n  const teacherAuthID = useSelector((state) => state.storeTeacherAuthIDReducer);\n  const history = useHistory();\n  const dispatch = useDispatch()\n\n  const invoiceState = useSelector(\n    (state) => state.storeTeacherInvoicesGeneralInfoReducer\n  );\n\n  const viewSingleInvoice = (event) => {\n    const invoiceNo = event.target.getAttribute('id');\n    invoiceState.forEach(inv => {\n      if (inv.No === invoiceNo) {\n        dispatch(storeSingleInvoiceAction(inv));\n        history.push('/teacher-invoice-view');\n        return;\n      }\n    })\n  }\n\n  useEffect(() => {\n    if (!teacherAuthID) {\n      history.push(\"/teacherdash\");\n      return;\n    }\n  }, []);\n  return (\n    <div>\n      {/* Top Bar */}\n      <div>\n        <TopBar />\n      </div>\n\n      {/* Content */}\n      <div>\n        <div>\n          <input id=\"tbInvoiceSearch\" type=\"text\" placeholder=\"Search\" />\n          <button>Create New Invoice</button>\n        </div>\n\n        <div>\n          {invoiceState.map((inv, i) => {\n            return (\n              <div>\n                <InvoiceBlock\n                  key={i}\n                  no={inv.No}\n                  status={inv.Status}\n                  balance={inv.Balance}\n                  name={inv.Name}\n                  created={inv.Created}\n                  due={inv.Due}\n                />\n                <button id={inv.No} onClick={viewSingleInvoice}>View</button>\n              </div>\n            );\n          })}\n        </div>\n      </div>\n\n      {/* Footer */}\n      <div>\n        <DashFooter />\n      </div>\n    </div>\n  );\n}\n",["594","595"],"/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Teachers/Support/SupportMain.js",[],["596","597"],"/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Footer.js",[],["598","599"],"/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Plans/PlanPanel.js",[],["600","601"],"/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/InputDateFormatter.js",[],["602","603"],"/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Courses/CoursesCard.js",[],["604","605"],"/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Teachers/Profile/ProfileReviewsView.js",["606","607","608","609"],"import { faStar } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport React, { useEffect } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { useHistory } from \"react-router-dom\";\nimport { storeTeacherAllReviewsAction } from \"../../../redux/actions\";\n\nimport {\n  students_Collection,\n  teachers_Collection,\n} from \"../../../utils/firebase\";\nimport { firebaseLooper } from \"../../../utils/tools\";\n\nexport default function ProfileReviewsView() {\n  const teacherAuthID = useSelector((state) => state.storeTeacherAuthIDReducer);\n  const history = useHistory();\n  const dispatch = useDispatch();\n\n  const user = useSelector((state) => state.userDataReducer);\n  const meData = useSelector((state) => state.storeTeacherMeDataReducer);\n\n  const reviews = useSelector((state) => state.storeTeacherAllReviewsReducer);\n\n  // GET\n  const getAllReviews = () => {\n    let reviews_Collection;\n\n    if (user.AccountType === \"Student\") {\n      reviews_Collection = students_Collection\n        .doc(user.AuthID)\n        .collection(\"Profile\")\n        .doc(\"Reviews\")\n        .collection(\"ReviewBlocks\");\n    } else if (user.AccountType === \"Teacher\") {\n      reviews_Collection = teachers_Collection\n        .doc(user.AuthID)\n        .collection(\"Profile\")\n        .doc(\"Reviews\")\n        .collection(\"ReviewBlocks\");\n    }\n\n    reviews_Collection\n      .orderBy(\"Date\", \"desc\")\n      .get()\n      .then((snapshot) => {\n        const reviewsData = firebaseLooper(snapshot);\n        dispatch(storeTeacherAllReviewsAction(reviewsData));\n      })\n      .catch((err) => console.log(err));\n  };\n\n  // HANDLE\n  const handleAllReviews = () => {\n    return reviews.map((rev, i) => {\n      return (\n        <div className=\"rev-block\" key={i}>\n          <p className=\"rev-rating\">{rev.Rating}.0</p>\n          <p className=\"rev-reviewer\">{rev.Reviewer}</p>\n          <p className=\"rev-date\">\n            {rev.Date ? rev.Date.toDate().toString().substr(4, 11) : null}\n          </p>\n          <p className=\"rev-review\">{rev.Review}</p>\n        </div>\n      );\n    });\n  };\n\n  useEffect(() => {\n    if (!teacherAuthID) {\n      history.push(\"/teacherdash\");\n      return;\n    }\n\n    getAllReviews();\n  }, []);\n  return <div className=\"white-background\">{handleAllReviews()}</div>;\n}\n",["610","611"],"/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Teachers/Profile/ProfileFeedCreate.js",["612"],"import React, { useEffect } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { useHistory } from \"react-router-dom\";\nimport { storeProfileFeedPostDataAction } from \"../../../redux/actions\";\nimport {\n  students_Collection,\n  teachers_Collection,\n  users_Collection,\n} from \"../../../utils/firebase\";\nimport { firebaseLooper } from \"../../../utils/tools\";\nimport GetToday from \"../../GetToday\";\nimport RandomString from \"../../RandomString\";\n\nimport \"./Profile.css\";\n\nexport default function ProfileFeedCreate() {\n  const teacherAuthID = useSelector((state) => state.storeTeacherAuthIDReducer);\n  const history = useHistory();\n  const dispatch = useDispatch();\n\n  const allPostsState = useSelector(\n    (state) => state.storeProfileFeedPostDataReducer\n  );\n  const profileUser = useSelector((state) => state.userDataReducer);\n\n  // POST\n  const savePost = () => {\n    const postText = document.querySelector(\"#tbPostText\").value;\n    const rand1 = RandomString();\n    const rand2 = RandomString();\n    const postID = `Post${rand1}${rand2}`;\n\n    // Search for Connection\n    users_Collection\n      .where(\"AuthID\", \"==\", teacherAuthID)\n      .get()\n      .then((snapshot) => {\n        const myData = firebaseLooper(snapshot);\n        myData.forEach((me) => {\n          // I have my info, now search for the user's\n\n          const fullName = `${me.FirstName} ${me.LastName}`;\n\n          users_Collection\n            .where(\"AuthID\", \"==\", profileUser.AuthID)\n            .get()\n            .then((snapshot) => {\n              const userData = firebaseLooper(snapshot);\n              userData.forEach((u) => {\n                if (u.AccountType === \"Student\") {\n                  students_Collection\n                    .doc(u.AuthID)\n                    .collection(\"Profile\")\n                    .doc(\"Feed\")\n                    .collection(\"Posts\")\n                    .doc(postID)\n                    .set({\n                      Text: postText,\n                      Poster: fullName,\n                      Date: GetToday(),\n                      Likes: 0,\n                    })\n                    .catch((err) => console.log(err));\n                } else if (u.AccountType === \"Teacher\") {\n                  teachers_Collection\n                    .doc(u.AuthID)\n                    .collection(\"Profile\")\n                    .doc(\"Feed\")\n                    .collection(\"Posts\")\n                    .doc(postID)\n                    .set({\n                      Text: postText,\n                      Poster: fullName,\n                      Date: GetToday(),\n                      Likes: 0,\n                    })\n                    .catch((err) => console.log(err));\n                }\n\n                // Dispatch\n                const allPosts = [...allPostsState];\n                allPosts.push({\n                  id: postID,\n                  Text: postText,\n                  Poster: fullName,\n                  Date: GetToday(),\n                  Likes: 0,\n                });\n                allPosts.sort((a, b) => b.Date - a.Date);\n                dispatch(storeProfileFeedPostDataAction(allPosts));\n              });\n            })\n            .catch((err) => console.log(err));\n        });\n      })\n      .catch((err) => console.log(err));\n\n    history.push(\"/teacher-profile/feed\");\n  };\n\n  // HANDLE\n  const handleCurrPage = () => {\n    let feedBtn = document.querySelector(\"#link-feed\");\n    feedBtn.classList.add(\"navy-back\");\n\n    let aboutBtn = document.querySelector(\"#link-about\");\n    aboutBtn.classList.remove(\"navy-back\");\n\n    let awardsBtn = document.querySelector(\"#link-awards\");\n    awardsBtn.classList.remove(\"navy-back\");\n\n    let galleryBtn = document.querySelector(\"#link-gallery\");\n    galleryBtn.classList.remove(\"navy-back\");\n\n    let reviewsBtn = document.querySelector(\"#link-reviews\");\n    reviewsBtn.classList.remove(\"navy-back\");\n  };\n\n  useEffect(() => {\n    if (!teacherAuthID) {\n      history.push(\"/teacherdash\");\n      return;\n    }\n\n    handleCurrPage();\n  }, []);\n  return (\n    <div className=\"post-form-wrapper\">\n      <button\n        className=\"btn-back\"\n        onClick={() => history.push(\"/teacher-profile/feed\")}\n      >\n        Back\n      </button>\n      <div className=\"post-create\">\n        <h2 className=\"post-create-head\">Create a Post</h2>\n\n        <textarea\n          className=\"ta\"\n          id=\"tbPostText\"\n          placeholder=\"Enter post here...\"\n        ></textarea>\n        <div className=\"btn-wrapper\">\n          <button className=\"btn-dark btn-post\" onClick={savePost}>\n            Post\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n}\n",["613","614"],"/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Teachers/Statistics/GroupStats.js",["615"],"import React, { useEffect } from \"react\";\n\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useHistory } from \"react-router-dom\";\n\nimport { statisticsObjectAction } from \"../../../redux/actions\";\n\nexport default function GroupStats() {\n  const history = useHistory();\n  const dispatch = useDispatch();\n\n  const teacherAuthID = useSelector((state) => state.storeTeacherAuthIDReducer);\n  const storageState = useSelector(\n    (state) => state.storeTeacherStatisticsGeneralInfoReducer\n  );\n  const storageObj = useSelector((state) => state.statisticsObjectReducer);\n\n  const getStorageObj = () => {\n    storageState.forEach((obj) => {\n      if (obj.id === \"GroupStats\") {\n        dispatch(statisticsObjectAction(obj));\n      }\n    });\n  };\n\n  useEffect(() => {\n    if (!teacherAuthID) {\n      history.push(\"/teacherdash\");\n    }\n    getStorageObj();\n  }, []);\n  return (\n    <div>\n      <h1>Group Stats</h1>\n      <hr/>\n      <p># of Groups: {storageObj.Num}</p>\n    </div>\n  );\n}\n",["616","617"],"/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Teachers/Forums/ForumSinglePostBlock.js",[],"/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Teachers/Students/StudentOverview.js",["618","619"],"import React, { useEffect } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { useHistory } from \"react-router-dom\";\n\nimport TopBar from \"../Dash/TopBar\";\nimport DashFooter from \"../Dash/DashFooter\";\n\nimport \"./Students.css\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faGraduationCap } from \"@fortawesome/free-solid-svg-icons\";\nimport {\n  students_Collection,\n  teachers_Collection,\n} from \"../../../utils/firebase\";\nimport { firebaseLooper } from \"../../../utils/tools\";\nimport {\n  storeTeacherSingleStudentExersAction,\n  storeTeacherSingleStudentLessonsAction,\n  storeTeacherSingleStudentQuizzesAction,\n  storeTeacherSingleStudentAssAction,\n  storeTeacherSingleStudentMilestonesAction,\n  toggleTeacherSingleStudentCompAction,\n} from \"../../../redux/actions\";\n\nexport default function StudentOverview() {\n  const teacherAuthID = useSelector((state) => state.storeTeacherAuthIDReducer);\n  const history = useHistory();\n  const dispatch = useDispatch();\n\n  const student = useSelector(\n    (state) => state.storeTeacherSingleStudentReducer\n  );\n  const compType = useSelector(\n    (state) => state.toggleTeacherSingleStudentCompReducer\n  );\n  const lessons = useSelector(\n    (state) => state.storeTeacherSingleStudentLessonsReducer\n  );\n  const exers = useSelector(\n    (state) => state.storeTeacherSingleStudentExersReducer\n  );\n  const quizzes = useSelector(\n    (state) => state.storeTeacherSingleStudentQuizzesReducer\n  );\n  const assignments = useSelector(\n    (state) => state.storeTeacherSingleStudentAssReducer\n  );\n  const milestones = useSelector(\n    (state) => state.storeTeacherSingleStudentMilestonesReducer\n  );\n\n  // GET\n  const getAllLessons = () => {\n    students_Collection\n      .doc(student.id)\n      .collection(\"CourseProgress\")\n      .get()\n      .then((snapshot) => {\n        const lessons = firebaseLooper(snapshot);\n        let lessonArr = [];\n        lessons.forEach((less) => {\n          if (less.CompType === \"Lesson\") {\n            lessonArr.push(less);\n          }\n        });\n        dispatch(storeTeacherSingleStudentLessonsAction(lessonArr));\n      })\n      .catch((err) => console.log(err));\n  };\n  const getAllExercises = () => {\n    students_Collection\n      .doc(student.id)\n      .collection(\"Exercises\")\n      .get()\n      .then((snapshot) => {\n        const exerData = firebaseLooper(snapshot);\n        exerData.sort((a, b) => (a.Course > b.Course ? 1 : -1));\n        dispatch(storeTeacherSingleStudentExersAction(exerData));\n      })\n      .catch((err) => console.log(err));\n  };\n  const getAllQuizzes = () => {\n    students_Collection\n      .doc(student.id)\n      .collection(\"Quizzes\")\n      .get()\n      .then((snapshot) => {\n        const quizData = firebaseLooper(snapshot);\n        const quizCount = snapshot.size;\n        let allQuizzes = [];\n        quizData.forEach((q, i) => {\n          students_Collection\n            .doc(student.id)\n            .collection(\"Quizzes\")\n            .doc(q.id)\n            .collection(\"Results\")\n            .get()\n            .then((snapshot) => {\n              const quizResults = firebaseLooper(snapshot);\n              q = {\n                ...q,\n                Results: quizResults,\n              };\n              allQuizzes.push(q);\n              if (i + 1 === quizCount) {\n                dispatch(storeTeacherSingleStudentQuizzesAction(allQuizzes));\n              }\n            })\n            .catch((err) => console.log(err));\n        });\n      })\n      .catch((err) => console.log(err));\n  };\n  const getAllAssignments = () => {\n    students_Collection\n      .doc(student.id)\n      .collection(\"AssignmentsInfo\")\n      .get()\n      .then((snapshot) => {\n        const assData = firebaseLooper(snapshot);\n        dispatch(storeTeacherSingleStudentAssAction(assData));\n      })\n      .catch((err) => console.log(err));\n  };\n  const getAllMilestones = () => {\n    if (student.id) {\n      teachers_Collection\n        .doc(teacherAuthID)\n        .collection(\"Milestones\")\n        .where(\"AssignedTo\", \"array-contains\", student.id)\n        .get()\n        .then((snapshot) => {\n          const milestoneData = firebaseLooper(snapshot);\n          const mileCount = snapshot.size;\n          let mileArr = [];\n          milestoneData.forEach((ms, i) => {\n            teachers_Collection\n              .doc(teacherAuthID)\n              .collection(\"Milestones\")\n              .doc(ms.id)\n              .collection(\"MilestoneTasks\")\n              .get()\n              .then((snapshot) => {\n                const msTasks = firebaseLooper(snapshot);\n                ms = { ...ms, Tasks: msTasks };\n                mileArr.push(ms);\n                if (i + 1 === mileCount) {\n                  dispatch(storeTeacherSingleStudentMilestonesAction(mileArr));\n                }\n              })\n              .catch((err) => console.log(err));\n          });\n        })\n        .catch((err) => console.log(err));\n    }\n  };\n\n  //   HANDLE\n  const handleCompType = () => {\n    if (compType === \"lessons\") {\n      return <div>{handleLessonBlock()}</div>;\n    } else if (compType === \"exercises\") {\n      return <div>{handleExersBlock()}</div>;\n    } else if (compType === \"quizzes\") {\n      return <div>{handleQuizzesBlock()}</div>;\n    } else if (compType === \"assignments\") {\n      return <div>{handleAssBlock()}</div>;\n    } else if (compType === \"milestones\") {\n      return <div>{handleMilestoneBlock()}</div>;\n    } else if (compType === \"all\") {\n      return (\n        <div>\n          <div>{handleLessonBlock()}</div>\n          <div>{handleExersBlock()}</div>\n          <div>{handleQuizzesBlock()}</div>\n          <div>{handleAssBlock()}</div>\n          <div>{handleMilestoneBlock()}</div>\n        </div>\n      );\n    }\n  };\n\n  const handleStudentPersonal = () => {\n    return (\n      <div className=\"student-block\">\n        <h2 className=\"block-head\">\n          {student.FirstName} {student.LastName}\n        </h2>\n        <p className=\"small-text\">{student.Email}</p>\n        <div className=\"overall-grade\">\n          {/* icon */}\n          <FontAwesomeIcon className=\"icon-grade\" icon={faGraduationCap} />\n          <p>{student.OverallGrade ? student.OverallGrade : null}%</p>\n        </div>\n      </div>\n    );\n  };\n  const handleLessonBlock = () => {\n    return (\n      <div className=\"student-block\">\n        <h2 className=\"block-head\">Lessons</h2>\n        <table className=\"comp-table\">\n          <tr className=\"comp-table-row\">\n            <th>Course</th>\n            <th>Lesson</th>\n            <th>Completion Time</th>\n          </tr>\n          {handleLessonList()}\n        </table>\n      </div>\n    );\n  };\n  const handleLessonList = () => {\n    return lessons.map((less, i) => {\n      return (\n        <tr key={i} className=\"comp-table-row\">\n          <td className=\"list-head\">{less.CourseName}</td>\n          <td className=\"list-head\">{less.CompName}</td>\n          <td className=\"list-head\">30 MIN</td>\n        </tr>\n      );\n    });\n  };\n  const handleExersBlock = () => {\n    return (\n      <div className=\"student-block\">\n        <h2 className=\"block-head\">Exercises</h2>\n        <table className=\"comp-table\">\n          <tr className=\"comp-table-row\">\n            <th>Course</th>\n            <th>Exercise</th>\n            <th>Completion Time</th>\n            <th>Response</th>\n          </tr>\n          {handleExerList()}\n        </table>\n      </div>\n    );\n  };\n  const handleExerList = () => {\n    return exers.map((exer, i) => {\n      return (\n        <tr key={i} className=\"comp-table-row\">\n          <td className=\"list-head\">{exer.Course}</td>\n          <td className=\"list-head\">{exer.Name}</td>\n          <td className=\"list-head\">35 MIN</td>\n          <td className=\"list-head\">{exer.Response}</td>\n        </tr>\n      );\n    });\n  };\n  const handleQuizzesBlock = () => {\n    return (\n      <div className=\"student-block\">\n        <h2 className=\"block-head\">Quizzes</h2>\n        {handleQuizzesList()}\n      </div>\n    );\n  };\n  const handleQuizzesList = () => {\n    return quizzes.map((quiz, i) => {\n      return (\n        <div key={i}>\n          <h2 className=\"quiz-head\">{quiz.Name}</h2>\n          <table className=\"comp-table\">\n            <tr className=\"comp-table-row\">\n              <th>Student Answer</th>\n              <th>Correct Answer</th>\n              <th>Result</th>\n            </tr>\n            {handleQuizResults(quiz.Results)}\n          </table>\n        </div>\n      );\n    });\n  };\n  const handleQuizResults = (results) => {\n    return results.map((res, i) => {\n      return (\n        <tr className=\"comp-table-row\" key={i}>\n          <td className=\"list-head\">{res.Given}</td>\n          <td className=\"list-head\">{res.Answer}</td>\n          <td\n            style={\n              res.Result === \"Correct\"\n                ? { color: \"green\" }\n                : res.Result === \"Incorrect\"\n                ? { color: \"red\" }\n                : { color: \"rgba(0,0,0,0.3\" }\n            }\n            className=\"list-head\"\n          >\n            {res.Result}\n          </td>\n        </tr>\n      );\n    });\n  };\n  const handleAssBlock = () => {\n    return (\n      <div className=\"student-block\">\n        <h2 className=\"block-head\">Assignments</h2>\n        <table className=\"comp-table\">\n          <tr className=\"comp-table-row\">\n            <th>Name</th>\n            <th>Completion Date</th>\n            <th>Description</th>\n            <th>Response</th>\n            <th>Rating</th>\n            <th>Concerns</th>\n            <th>Time</th>\n          </tr>\n          {handleAssList()}\n        </table>\n      </div>\n    );\n  };\n  const handleAssList = () => {\n    return assignments.map((ass, i) => {\n      if (ass.Rating) {\n        return (\n          <tr key={i} className=\"comp-table-row\">\n            <td className=\"list-head\">{ass.Name}</td>\n            <td className=\"list-head\">\n              {ass.CompletionDate\n                ? ass.CompletionDate.toDate().toString().substr(4, 11)\n                : null}\n            </td>\n            <td className=\"list-head\">{ass.Desc}</td>\n            <td className=\"list-head\">N/A</td>\n            <td className=\"list-head\">{ass.Rating}</td>\n            <td className=\"list-head\">{ass.Concerns}</td>\n            <td className=\"list-head\">{ass.Time}</td>\n          </tr>\n        );\n      } else {\n        // Textual Assignment\n        <tr key={i} className=\"comp-table-row\">\n          <td className=\"list-head\">{ass.Name}</td>\n          <td className=\"list-head\">\n            {ass.CompletionDate\n              ? ass.CompletionDate.toDate().toString().substr(4, 11)\n              : \"N/A\"}\n          </td>\n          <td className=\"list-head\">{ass.Desc}</td>\n          <td className=\"list-head\">{ass.Response}</td>\n          <td className=\"list-head\">N/A</td>\n          <td className=\"list-head\">N/A</td>\n          <td className=\"list-head\">{ass.Time}</td>\n        </tr>;\n      }\n    });\n  };\n  const handleMilestoneBlock = () => {\n    return (\n      <div className=\"student-block\">\n        <h2 className=\"block-head\">Milestones</h2>\n        <table className=\"comp-table\">\n          <tr className=\"comp-table-row\">\n            <th>Segment Name</th>\n            <th>Task Name</th>\n            <th>Description</th>\n            <th>Complete</th>\n          </tr>\n          {handleMilestoneList()}\n        </table>\n      </div>\n    );\n  };\n  const handleMilestoneList = () => {\n    return milestones.map((ms, i) => {\n      return handleMilestoneTasks(i);\n    });\n  };\n  const handleMilestoneTasks = (milestoneIdx) => {\n    return milestones[milestoneIdx].Tasks.map((task, i) => {\n      return (\n        <tr key={i} className=\"comp-table-row\">\n          <td className=\"list-head\">{milestones[milestoneIdx].Name}</td>\n          <td className=\"list-head\">{task.Task}</td>\n          <td className=\"list-head\">{task.Desc}</td>\n          <td className=\"list-head\">\n            <input\n              id={`${milestones[milestoneIdx].id}-${task.id}`}\n              onChange={onMilestoneChange}\n              type=\"checkbox\"\n            />\n          </td>\n        </tr>\n      );\n    });\n  };\n\n  // POST\n  const onMilestoneChange = (event) => {\n    const cbID = event.target.getAttribute(\"id\");\n    const idArr = event.target.getAttribute(\"id\").split(\"-\");\n    // Change the isComplete to true and mark it as complete in their milestones page.\n    const segID = idArr[0];\n    const taskID = idArr[1];\n\n    const cbStatus = document.querySelector(`#${cbID}`).checked;\n\n    // Mark as complete in DB\n    students_Collection\n      .doc(student.id)\n      .collection(\"Milestones\")\n      .doc(segID)\n      .collection(\"MilestoneTasks\")\n      .doc(taskID)\n      .update({\n        isComplete: cbStatus,\n      })\n      .catch((err) => console.log(err));\n  };\n\n  const rerender = () => {\n    getAllLessons();\n    getAllExercises();\n    getAllQuizzes();\n    getAllAssignments();\n    getAllMilestones();\n  };\n\n  useEffect(() => {\n    if (!teacherAuthID) {\n      history.push(\"/teacherdash\");\n      return;\n    }\n\n    getAllLessons();\n    getAllExercises();\n    getAllQuizzes();\n    getAllAssignments();\n    getAllMilestones();\n  }, []);\n  return (\n    <div>\n      {/* Top Bar */}\n      <div>\n        <TopBar />\n      </div>\n\n      {/* Content */}\n      <div className=\"content\">\n      <h1>Student Overview</h1>\n        <button style={{ display: \"none\" }} onClick={rerender()}>\n          Rerender\n        </button>\n        {/* Personal */}\n        {handleStudentPersonal()}\n        <button\n          id=\"btnLessons\"\n          className=\"btn-comp\"\n          onClick={() =>\n            dispatch(toggleTeacherSingleStudentCompAction(\"lessons\"))\n          }\n        >\n          Lessons\n        </button>\n        <button\n          id=\"btnExers\"\n          className=\"btn-comp\"\n          onClick={() =>\n            dispatch(toggleTeacherSingleStudentCompAction(\"exercises\"))\n          }\n        >\n          Exercises\n        </button>\n        <button\n          id=\"btnQuizzes\"\n          className=\"btn-comp\"\n          onClick={() =>\n            dispatch(toggleTeacherSingleStudentCompAction(\"quizzes\"))\n          }\n        >\n          Quizzes\n        </button>\n        <button\n          id=\"btnAss\"\n          className=\"btn-comp\"\n          onClick={() =>\n            dispatch(toggleTeacherSingleStudentCompAction(\"assignments\"))\n          }\n        >\n          Assignments\n        </button>\n        <button\n          id=\"btnMiles\"\n          className=\"btn-comp\"\n          onClick={() =>\n            dispatch(toggleTeacherSingleStudentCompAction(\"milestones\"))\n          }\n        >\n          Milestones\n        </button>\n        <button\n          id=\"btnAll\"\n          className=\"btn-comp\"\n          onClick={() => dispatch(toggleTeacherSingleStudentCompAction(\"all\"))}\n        >\n          All\n        </button>\n\n        {/* Comps */}\n        <div>{handleCompType()}</div>\n      </div>\n\n      {/* Footer */}\n      <div>\n        <DashFooter />\n      </div>\n    </div>\n  );\n}\n",["620","621"],"/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Courses.js",[],"/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Students/Messages/StudentMessagesMain.js",["622","623"],"import React, { useEffect } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { useHistory } from \"react-router-dom\";\n\nimport TopBar from \"../TopBar\";\nimport Footer from \"../Footer\";\nimport RandomString from \"../../RandomString\";\nimport { students_Collection } from \"../../../utils/firebase\";\nimport {\n  storeStudentMessagesAction,\n  storeStudentSingleThreadAction,\n  toggleStudentNewMessageAction,\n  storeStudentTeachersListAction,\n} from \"../../../redux/actions\";\nimport { firebaseLooper } from \"../../../utils/tools\";\n\nexport default function StudentMessagesMain() {\n  const studentAuthID = useSelector((state) => state.storeStudentAuthIDReducer);\n  const user = useSelector((state) => state.storeStudentUserDataReducer);\n  const history = useHistory();\n  const dispatch = useDispatch();\n\n  const toggleNewMessageForm = useSelector(\n    (state) => state.toggleStudentNewMessageReducer\n  );\n\n  const messages = useSelector((state) => state.storeStudentMessagesReducer);\n  const teachers = useSelector(\n    (state) => state.storeStudentTeachersListReducer\n  );\n\n  //   GET\n  const getAllMessages = () => {\n    students_Collection\n      .doc(studentAuthID)\n      .collection(\"Messages\")\n      .get()\n      .then((snapshot) => {\n        const messData = firebaseLooper(snapshot);\n        const messCount = snapshot.size;\n        let tempArray = [];\n\n        messData.forEach((mess, i) => {\n          students_Collection\n            .doc(studentAuthID)\n            .collection(\"Messages\")\n            .doc(mess.id)\n            .collection(\"MessageBlocks\")\n            .orderBy(\"Date\", \"asc\")\n            .get()\n            .then((snapshot) => {\n              const messageBlocks = firebaseLooper(snapshot);\n\n              const temp = {\n                ...mess,\n                Messages: messageBlocks,\n              };\n              tempArray.push(temp);\n              if (i + 1 === messCount) {\n                dispatch(storeStudentMessagesAction(tempArray));\n              }\n            })\n            .catch((err) => console.log(err));\n        });\n      })\n      .catch((err) => console.log(err));\n  };\n  const getAllTeachers = () => {\n    students_Collection\n      .doc(studentAuthID)\n      .collection(\"Teachers\")\n      .get()\n      .then((snapshot) => {\n        const teachersList = firebaseLooper(snapshot);\n        dispatch(storeStudentTeachersListAction(teachersList));\n      })\n      .catch((err) => console.log(err));\n  };\n\n  //   HANDLE\n  const handleThreadList = () => {\n    return messages.map((mess, i) => {\n      return (\n        <div\n          style={{\n            backgroundColor: \"rgba(0,0,0,0.05)\",\n            padding: \"0.1% 3%\",\n            borderRadius: \"5px\",\n            marginBottom: \"1%\",\n          }}\n          key={i}\n        >\n          <h3>{mess.Recipient}</h3>\n          <p>\n            {mess.Messages[mess.Messages.length - 1]\n              ? mess.Messages[mess.Messages.length - 1].Text\n              : \"Empty\"}\n          </p>\n          <button id={mess.id} onClick={navThreadView}>\n            View Thread\n          </button>\n          <button id={mess.id} onClick={removeThread} className=\"btn-salmon\">\n            Remove\n          </button>\n        </div>\n      );\n    });\n  };\n  const handleNewMessageForm = () => {\n    return (\n      <div>\n        <p>Choose Recipient:</p>\n        {teachers.map((teach, i) => {\n          return (\n            <button\n              key={i}\n              id={teach.TeacherID}\n              onClick={navNewThreadView}\n              className=\"btn-navy\"\n            >\n              {teach.FirstName} {teach.LastName}\n            </button>\n          );\n        })}\n      </div>\n    );\n  };\n\n  // NAV\n  const navThreadView = (event) => {\n    const threadID = event.target.getAttribute(\"id\");\n\n    messages.forEach((thread) => {\n      if (thread.id === threadID) {\n        dispatch(storeStudentSingleThreadAction(thread));\n      }\n    });\n\n    history.push(\"/student-message-thread\");\n  };\n  const navNewThreadView = (event) => {\n    const connID = event.target.getAttribute(\"id\");\n    let found = false;\n    messages.forEach((thread) => {\n      if (thread.Recipient === connID) {\n        found = true;\n      }\n    });\n\n    if (found) {\n      messages.forEach((thread) => {\n        if (thread.Recipient === connID) {\n          dispatch(storeStudentSingleThreadAction(thread));\n        }\n      });\n    } else {\n      const rand1 = RandomString();\n      const rand2 = RandomString();\n      const threadID = `Thread${rand1}${rand2}`;\n\n      students_Collection\n        .doc(studentAuthID)\n        .collection(\"Messages\")\n        .doc(threadID)\n        .set({\n          Recipient: connID,\n        })\n        .catch((err) => console.log(err));\n\n      const tempObj = {\n        id: threadID,\n        Recipient: connID,\n      };\n\n      dispatch(storeStudentSingleThreadAction(tempObj));\n    }\n    history.push(\"/student-message-thread\");\n  };\n\n  // REMOVE\n  const removeThread = (event) => {\n    const threadID = event.target.getAttribute(\"id\");\n\n    // Remove to DB\n    students_Collection\n      .doc(studentAuthID)\n      .collection(\"Messages\")\n      .doc(threadID)\n      .collection(\"MessageBlocks\")\n      .get()\n      .then((snapshot) => {\n        const data = firebaseLooper(snapshot);\n        data.forEach((d) => {\n          students_Collection\n            .doc(studentAuthID)\n            .collection(\"Messages\")\n            .doc(threadID)\n            .collection(\"MessageBlocks\")\n            .doc(d.id)\n            .delete()\n            .catch((err) => console.log(err));\n        });\n      })\n      .catch((err) => console.log(err));\n    students_Collection\n      .doc(studentAuthID)\n      .collection(\"Messages\")\n      .doc(threadID)\n      .delete()\n      .catch((err) => console.log(err));\n\n    // Dispatch\n    const allMess = [...messages];\n    const filtered = allMess.filter((thread) => thread.id !== threadID);\n\n    dispatch(storeStudentMessagesAction(filtered));\n  };\n\n  useEffect(() => {\n    if (!studentAuthID) {\n      history.push(\"/studentdash\");\n      return;\n    }\n\n    getAllMessages();\n    getAllTeachers();\n  }, []);\n  return (\n    <div>\n      {/* Top Bar */}\n      <div>\n        <TopBar />\n      </div>\n\n      {/* Content */}\n      <div>\n        <h1>Messages</h1>\n        <div>\n          {/* New Message */}\n          <button onClick={() => dispatch(toggleStudentNewMessageAction())}>\n            {toggleNewMessageForm ? \"Close\" : \"New Message\"}\n          </button>\n          {toggleNewMessageForm ? handleNewMessageForm() : null}\n        </div>\n        <br />\n        <div>{handleThreadList()}</div>\n      </div>\n\n      {/* Footer */}\n      <div>\n        <Footer />\n      </div>\n    </div>\n  );\n}\n","/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Teachers/Students/StudentsMain.js",["624","625","626"],"import React, { useEffect } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { useHistory } from \"react-router-dom\";\n\nimport \"./Students.css\";\n\nimport TopBar from \"../Dash/TopBar\";\nimport DashFooter from \"../Dash/DashFooter\";\nimport RandomString from \"../../RandomString\";\nimport GetToday from \"../../GetToday\";\nimport {\n  students_Collection,\n  teachers_Collection,\n  studentReqQueue_Collection,\n} from \"../../../utils/firebase\";\nimport { firebaseLooper } from \"../../../utils/tools\";\nimport {\n  storeTeacherStudentGeneralInfoAction,\n  storeTeacherSingleStudentAction,\n  storeTeacherQueueRequestsAction,\n  storeTeacherExistingStudentsAction,\n  toggleTeacherAddStudentFormAction,\n  storeTeacherAddStudentSearchResultAction,\n} from \"../../../redux/actions\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport {\n  faMinus,\n  faSearch,\n  faTimes,\n  faTimesCircle,\n} from \"@fortawesome/free-solid-svg-icons\";\n\nexport default function StudentsMain() {\n  const user = useSelector((state) => state.userDataReducer);\n  const teacherAuthID = useSelector((state) => state.storeTeacherAuthIDReducer);\n  const history = useHistory();\n  const dispatch = useDispatch();\n\n  // TOGGLE\n  const toggleAddStudentForm = useSelector(\n    (state) => state.toggleTeacherAddStudentFormReducer\n  );\n\n  const students = useSelector(\n    (state) => state.storeTeacherStudentGeneralInfoReducer\n  );\n\n  const existingStuds = useSelector(\n    (state) => state.storeTeacherExistingStudentsReducer\n  );\n  const queueRequests = useSelector(\n    (state) => state.storeTeacherQueueRequestsReducer\n  );\n  const searchRes = useSelector(\n    (state) => state.storeTeacherAddStudentSearchResultReducer\n  );\n\n  // GET\n  const getAllStudents = () => {\n    teachers_Collection\n      .doc(teacherAuthID)\n      .collection(\"Students\")\n      .get()\n      .then((snapshot) => {\n        const studentList = firebaseLooper(snapshot);\n        dispatch(storeTeacherStudentGeneralInfoAction(studentList));\n      })\n      .catch((err) => console.log(err));\n  };\n  const checkForExistingStudents = () => {\n    teachers_Collection\n      .doc(teacherAuthID)\n      .collection(\"Students\")\n      .get()\n      .then((snapshot) => {\n        const studentData = firebaseLooper(snapshot);\n        const studentArr = [];\n        studentData.forEach((stud) => {\n          studentArr.push(stud.id);\n        });\n        dispatch(storeTeacherExistingStudentsAction(studentArr));\n\n        studentReqQueue_Collection\n          .get()\n          .then((snapshot) => {\n            const queueData = firebaseLooper(snapshot);\n            const queueArr = [];\n            queueData.forEach((que) => {\n              queueArr.push(que.StudentID);\n            });\n\n            dispatch(storeTeacherQueueRequestsAction(queueArr));\n          })\n          .catch((err) => console.log(err));\n      })\n      .catch((err) => console.log(err));\n  };\n\n  // HANDLE\n  const handleStudentList = () => {\n    return students.map((stud, i) => {\n      return (\n        <div className=\"studListBlock\" key={i}>\n          <h3 className=\"studListComp studName\">\n            {stud.FirstName} {stud.LastName}\n          </h3>\n          <p className=\"studListComp studID\">{stud.id}</p>\n          <p className=\"studListComp studEmail\">{stud.Email}</p>\n          <div className=\"rightSide\" style={{ display: \"flex\" }}>\n            <button\n              className=\"btnStudList btnStudOver\"\n              onClick={navStudentOverview}\n              id={stud.id}\n            >\n              Overview\n            </button>\n            <button className=\"btnStudList btnStudRemove\">\n              <FontAwesomeIcon icon={faMinus} />\n            </button>\n          </div>\n        </div>\n      );\n    });\n  };\n  const handleAddStudentForm = () => {\n    return (\n      <div className=\"addStudForm\">\n        <p className=\"addStudDesc\">Search using student username.</p>\n        <div className=\"flex\">\n          <input id=\"tbStudSearch\" type=\"text\" placeholder=\"Search\" />\n          <button className=\"btnAddStudForm\" onClick={onAddStudentClick}>\n            <FontAwesomeIcon icon={faSearch} />\n          </button>\n        </div>\n        <div>\n          {/* Student search thing */}\n          {searchRes ? handleSearchResult() : null}\n        </div>\n      </div>\n    );\n  };\n  const handleSearchResult = () => {\n    return (\n      <div className=\"searchResWrapper\">\n        <p className=\"reqBox\">\n          {searchRes.FirstName} {searchRes.LastName}\n        </p>\n        <p className=\"reqBox\">{searchRes.StudentID}</p>\n        {searchRes.StudentID !== \"\" ? (\n          <button className=\"btnSendReq\" onClick={sendRequest}>\n            Send Request\n          </button>\n        ) : null}\n      </div>\n    );\n  };\n\n  // CLICK\n  const onAddStudentClick = () => {\n    const studRes = document.querySelector(\"#tbStudSearch\").value;\n    const allExistingStuds = existingStuds.concat(queueRequests);\n\n    if (allExistingStuds.includes(studRes)) {\n      // Exists\n      const student = {\n        FirstName: \"Student is not available for request.\",\n        LastName: \"\",\n        StudentID: \"\",\n      };\n      dispatch(storeTeacherAddStudentSearchResultAction(student));\n    } else {\n      // Does not exist\n\n      // Search for student in DB\n      students_Collection\n        .get()\n        .then((snapshot) => {\n          const studentList = firebaseLooper(snapshot);\n          studentList.forEach((stud) => {\n            if (studRes === stud.id) {\n              dispatch(storeTeacherAddStudentSearchResultAction(stud));\n            }\n          });\n          if (!searchRes) {\n            const student = {\n              FirstName: \"Student ID does not exist\",\n              LastName: \"\",\n              StudentID: \"\",\n            };\n            dispatch(storeTeacherAddStudentSearchResultAction(student));\n          }\n        })\n        .catch((err) => console.log(err));\n    }\n  };\n  const sendRequest = () => {\n    // Send Request here\n    const rand1 = RandomString();\n    const rand2 = RandomString();\n\n    const reqID = `Req${rand1}${rand2}`;\n    const notifID = `Notif${rand1}${rand2}`;\n\n    studentReqQueue_Collection\n      .doc(reqID)\n      .set({\n        StudentID: searchRes.StudentID,\n        TeacherID: teacherAuthID,\n        TFirstName: user.FirstName,\n        TLastName: user.LastName,\n      })\n      .catch((err) => console.log(err));\n\n    students_Collection\n      .doc(searchRes.StudentID)\n      .collection(\"Notifications\")\n      .doc(notifID)\n      .set({\n        Action: \"studrequest\",\n        Date: GetToday(),\n        Icon: \"faUser\",\n        Text: `You have received a request from ${user.FirstName} ${user.LastName} as your instructor.`,\n      })\n      .catch((err) => console.log(err));\n\n    document.querySelector(\"#tbStudSearch\").value = \"\";\n\n    const student = {\n      FirstName: \"Request has been sent.\",\n      LastName: \"\",\n      StudentID: \"\",\n    };\n    dispatch(storeTeacherAddStudentSearchResultAction(student));\n\n    // Dispatch\n    const allReqs = [...queueRequests];\n    allReqs.push({\n      StudentID: searchRes.StudentID,\n      TeacherID: teacherAuthID,\n      TFirstName: user.FirstName,\n      TLastName: user.LastName,\n    });\n    dispatch(storeTeacherQueueRequestsAction(allReqs));\n  };\n\n  // NAV\n  const navStudentOverview = (event) => {\n    const studID = event.target.getAttribute(\"id\");\n\n    students.forEach((stud) => {\n      if (stud.id === studID) {\n        students_Collection\n          .where(\"StudentID\", \"==\", stud.id)\n          .get()\n          .then((snapshot) => {\n            const student = firebaseLooper(snapshot);\n            student.forEach((s) => {\n              dispatch(storeTeacherSingleStudentAction(s));\n            });\n          })\n          .catch((err) => console.log(err));\n      }\n    });\n\n    history.push(\"/teacher-student-overview\");\n  };\n\n  useEffect(() => {\n    if (!teacherAuthID) {\n      history.push(\"/teacherdash\");\n      return;\n    }\n\n    getAllStudents();\n    checkForExistingStudents();\n  }, []);\n  return (\n    <div>\n      {/* Top Bar */}\n      <div>\n        <TopBar />\n      </div>\n\n      {/* Content */}\n      <div className=\"content\">\n        <div>\n          <h1>Students</h1>\n          <button\n            className=\"btnAddStud\"\n            onClick={() => dispatch(toggleTeacherAddStudentFormAction())}\n          >\n            {toggleAddStudentForm ? \"Close\" : \"Add New Student\"}\n          </button>\n          {toggleAddStudentForm ? handleAddStudentForm() : null}\n        </div>\n\n        {/* Student List */}\n        <div className=\"studListWrapper\">{handleStudentList()}</div>\n      </div>\n\n      {/* Footer */}\n      <div>\n        <DashFooter />\n      </div>\n    </div>\n  );\n}\n","/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Teachers/Invoices/InvoiceView.js",["627"],"import React, { useEffect } from \"react\";\n\nimport TopBar from \"../Dash/TopBar\";\nimport DashFooter from \"../Dash/DashFooter\";\n\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { useHistory } from \"react-router-dom\";\nimport { teachers_Collection } from \"../../../utils/firebase\";\nimport { firebaseLooper } from \"../../../utils/tools\";\nimport { storeInvoiceServicesAction } from \"../../../redux/actions\";\n\nexport default function InvoiceView() {\n  const teacherAuthID = useSelector((state) => state.storeTeacherAuthIDReducer);\n  const history = useHistory();\n  const dispatch = useDispatch();\n\n  const invoice = useSelector((state) => state.storeSingleInvoiceReducer);\n\n  const getAllServices = () => {\n    const invoiceID = invoice.id;\n    const services_Collection = teachers_Collection\n      .doc(teacherAuthID)\n      .collection(\"Invoices\")\n      .doc(invoiceID)\n      .collection(\"Services\");\n\n    services_Collection\n      .get()\n      .then((snapshot) => {\n        const data = firebaseLooper(snapshot);\n        dispatch(storeInvoiceServicesAction(data));\n      })\n      .catch((err) => console.log(err));\n  };\n\n  const services = useSelector((state) => state.storeInvoiceServicesReducer);\n\n  useEffect(() => {\n    if (!teacherAuthID) {\n      history.push(\"/teacherdash\");\n      return;\n    } else if (!invoice) {\n        history.push('/teacher-invoices');\n        return;\n    }\n    getAllServices();\n  }, []);\n\n  return (\n    <div>\n      {/* Top Bar */}\n      <div>\n        <TopBar />\n      </div>\n\n      <div>\n        <div>\n          <button\n            onClick={() => {\n              history.push(\"/teacher-invoices\");\n            }}\n          >\n            View All Invoices\n          </button>\n        </div>\n\n        {/* Invoice Template */}\n        <div>\n          {/* Top */}\n          <div>\n            <h3>Invoice #{invoice.No}</h3>\n            <p>\n              Date Issued: {invoice.Created.toDate().toString().substr(4, 11)}\n            </p>\n            <p>Date Due: {invoice.Due.toDate().toString().substr(4, 11)}</p>\n          </div>\n          <hr />\n          {/* Contact Details */}\n          <div>\n            <h4>Invoice To:</h4>\n            <p>{invoice.Name}</p>\n            <p>{invoice.Address}</p>\n            <p>\n              {invoice.City}, {invoice.State} {invoice.Zip}\n            </p>\n            <p>{invoice.Email}</p>\n          </div>\n          <hr/>\n          {/* Services Details */}\n          <div>\n            <table>\n              <tr>\n                <th>Services</th>\n                <th>Rate</th>\n                <th>Hours</th>\n                <th>Price</th>\n              </tr>\n              {services.map((serv, i) => {\n                return (\n                  <div key={i}>\n                    <tr>\n                      <td>{serv.Name}</td>\n                      <td>${serv.Rate}</td>\n                      <td>{serv.Hours} HRS</td>\n                      <td>${serv.FullPrice}</td>\n                    </tr>\n                  </div>\n                );\n              })}\n            </table>\n          </div>\n          <hr/>\n          {/* Message */}\n          <div>\n              <p>{invoice.Message}</p>\n          </div>\n        </div>\n\n        {/* Invoice Actions */}\n        <div>\n            <button>Send Invoice</button>\n            <button>Print</button>\n            <button>Edit</button>\n        </div>\n      </div>\n\n      {/* Footer */}\n      <div>\n        <DashFooter />\n      </div>\n    </div>\n  );\n}\n",["628","629"],"/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Teachers/Forums/ForumsMain.js",["630","631","632"],"import React, { useEffect } from \"react\";\n\nimport TopBar from \"../Dash/TopBar\";\nimport ForumBlocks from \"./ForumBlocks\";\nimport DashFooter from \"../Dash/DashFooter\";\n\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { useHistory } from \"react-router-dom\";\nimport { groups_Collection, forums_Collection } from \"../../../utils/firebase\";\nimport { firebaseLooper } from \"../../../utils/tools\";\nimport { storeSingleForumAction } from \"../../../redux/actions\";\nimport ForumSingleBlock from \"./ForumSingleBlock\";\n\nexport default function ForumsMain() {\n  const teacherAuthID = useSelector((state) => state.storeTeacherAuthIDReducer);\n  const history = useHistory();\n  const dispatch = useDispatch();\n  const forumState = useSelector(\n    (state) => state.storeTeacherForumsGeneralInfoReducer\n  );\n  const singleForumState = useSelector(\n    (state) => state.storeSingleForumReducer\n  );\n\n  const groupState = useSelector(\n    (state) => state.storeTeacherGroupGeneralInfoReducer\n  );\n\n  const getSingleForum = (event) => {\n    const id = event.target.getAttribute(\"id\");\n    let singleForum = {};\n    forumState.forEach((f) => {\n      if (f.id === id) {\n        const posts_Collection = forums_Collection.doc(id).collection(\"Posts\");\n        posts_Collection\n          .get()\n          .then((snapshot) => {\n            const postData = firebaseLooper(snapshot);\n            const newPosts = [];\n            postData.forEach((pd) => {\n              const comments_Collection = forums_Collection\n                .doc(id)\n                .collection(\"Posts\")\n                .doc(pd.id)\n                .collection(\"Comments\");\n              comments_Collection\n                .get()\n                .then((snapshot) => {\n                  const commentData = firebaseLooper(snapshot);\n                  newPosts.push({\n                    ...pd,\n                    commentData,\n                  });\n                  singleForum = {\n                    ...f,\n                    newPosts,\n                  };\n                  dispatch(storeSingleForumAction(singleForum));\n                })\n                .catch((err) => console.log(err));\n            });\n          })\n          .catch((err) => console.log(err));\n      }\n    });\n  };\n\n  useEffect(() => {\n    if (!teacherAuthID) {\n      history.push(\"/teacherdash\");\n      return;\n    }\n  }, []);\n\n  return (\n    <div>\n      {/* Top Bar */}\n      <div>\n        <TopBar />\n      </div>\n\n      <div>\n        <div>\n          <input id=\"tbForumSearch\" type=\"text\" placeholder=\"Search\" />\n          <button>Search</button>\n        </div>\n\n        {/* Forum Content */}\n        <div>\n          {singleForumState.Topic ? (\n            <ForumSingleBlock\n              topic={singleForumState.Topic}\n              desc={singleForumState.Desc}\n              date={singleForumState.DateCreated}\n              posts={singleForumState.newPosts}\n            />\n          ) : null}\n        </div>\n\n        <div>\n          {forumState.map((f, i) => {\n            return (\n              <div>\n                <ForumBlocks key={i} topic={f.Topic} />\n                <button id={f.id} onClick={getSingleForum}>\n                  View Discussion\n                </button>\n                <button>Remove</button>\n              </div>\n            );\n          })}\n        </div>\n      </div>\n\n      {/* Footer */}\n      <div>\n        <DashFooter />\n      </div>\n    </div>\n  );\n}\n","/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/RandomString.js",[],["633","634"],"/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Teachers/Dash/Achievement.js",[],"/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Teachers/Dash/DashFooter.js",[],["635","636"],"/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Teachers/Profile/ProfileGallery.js",[],"/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Teachers/Groups/GroupAboutEdit.js",["637"],"import React, { useEffect } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { useHistory } from \"react-router-dom\";\nimport { storeSingleGroupAction } from \"../../../redux/actions\";\nimport { groups_Collection } from \"../../../utils/firebase\";\n\nexport default function GroupAboutEdit() {\n  const teacherAuthID = useSelector((state) => state.storeTeacherAuthIDReducer);\n  const history = useHistory();\n  const dispatch = useDispatch();\n\n  const group = useSelector((state) => state.storeSingleGroupReducer);\n\n  const saveEdit = () => {\n    const editText = document.querySelector(\"#taAboutEditText\").value;\n\n    //   Save to DB\n    groups_Collection.doc(group.id).update({\n      Access: group.Access,\n      Date: group.Date,\n      Desc: editText,\n      Host: group.Host,\n      Name: group.Name,\n    });\n\n    // Dispatch\n    const groupObj = {\n      ...group,\n      id: group.id,\n      Desc: editText,\n    };\n\n    dispatch(storeSingleGroupAction(groupObj));\n\n    history.push(\"/teacher-group-page/about\");\n  };\n\n  useEffect(() => {\n    if (!teacherAuthID) {\n      history.push(\"/teacherdash\");\n      return;\n    }\n  }, []);\n  return (\n    <div>\n      <div>\n        <button onClick={() => history.push(\"/teacher-group-page/about\")}>\n          Back\n        </button>\n      </div>\n      <br />\n      <div>\n        <textarea id=\"taAboutEditText\" defaultValue={group.Desc}></textarea>\n        <br />\n        <button onClick={saveEdit}>Save</button>\n      </div>\n    </div>\n  );\n}\n","/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Teachers/Statistics/EventStats.js",["638"],"import React, { useEffect } from \"react\";\n\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useHistory } from \"react-router-dom\";\n\nimport { statisticsObjectAction } from \"../../../redux/actions\";\n\nexport default function EventStats() {\n  const history = useHistory();\n  const dispatch = useDispatch();\n\n  const teacherAuthID = useSelector((state) => state.storeTeacherAuthIDReducer);\n  const storageState = useSelector(\n    (state) => state.storeTeacherStatisticsGeneralInfoReducer\n  );\n  const storageObj = useSelector((state) => state.statisticsObjectReducer);\n\n  const getStorageObj = () => {\n    storageState.forEach((obj) => {\n      if (obj.id === \"EventStats\") {\n        dispatch(statisticsObjectAction(obj));\n      }\n    });\n  };\n\n  useEffect(() => {\n    if (!teacherAuthID) {\n      history.push(\"/teacherdash\");\n    }\n    getStorageObj();\n  }, []);\n  return (\n    <div>\n      <h1>Event Stats</h1>\n      <hr/>\n      <p># of Events: {storageObj.Num}</p>\n    </div>\n  );\n}\n",["639","640"],"/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Home/HomeCoursesCard.js",[],["641","642"],"/Users/jesusjimenez/Creative/MusicProject/musicapp/src/redux/actions.js",[],"/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Login.js",["643","644"],"import React from \"react\";\nimport \"./Login/Login.css\";\n\nimport { useHistory } from \"react-router-dom\";\nimport {\n  loginRegisterToggleAction,\n  isLoggedInAction,\n  storeTeacherAuthIDAction,\n  storeStudentAuthIDAction,\n  storeAccountTypeAction,\n} from \"../redux/actions\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { users_Collection } from \"../utils/firebase\";\nimport { firebaseLooper } from \"../utils/tools\";\n\nimport \"./Login.css\";\n\nexport default function Login() {\n  const loginSwitchState = useSelector(\n    (state) => state.loginRegisterSwitchReducer\n  );\n  const isLoggedInState = useSelector((state) => state.isLoggedInReducer);\n  const accountTypeState = useSelector(\n    (state) => state.storeAccountTypeReducer\n  );\n\n  const dispatch = useDispatch();\n  const history = useHistory();\n\n  const handleRouteClick = () => {\n    const username = document.querySelector(\"#tbUsername\").value;\n    const password = document.querySelector(\"#tbPassword\").value;\n\n    // Check if they exist in the DB\n    users_Collection\n      .get()\n      .then((snapshot) => {\n        const userData = firebaseLooper(snapshot);\n        userData.forEach((user) => {\n          if (user.Username === username && user.Password === password) {\n            // If they do exist and are correct, then do the stuffs\n\n            document.querySelector(\"#mainMenu\").classList.add(\"hide\");\n\n            // Choose between teacher or student depending on their credentials\n\n            dispatch(isLoggedInAction());\n\n            if (user.AccountType === \"Teacher\") {\n              // Save authID\n              dispatch(storeTeacherAuthIDAction(username));\n              dispatch(storeAccountTypeAction(\"Teacher\"));\n              document\n                .querySelector(\"#teacherMainMenu\")\n                .classList.remove(\"hide\");\n              history.push(\"/teacherdash\");\n            } else if (user.AccountType === \"Student\") {\n              // Save authID\n              dispatch(storeStudentAuthIDAction(username));\n              dispatch(storeAccountTypeAction(\"Student\"));\n\n              document\n                .querySelector(\"#studentMainMenu\")\n                .classList.remove(\"hide\");\n              history.push(\"/studentdash\");\n            }\n          }\n        });\n      })\n      .catch((err) => console.log(err));\n  };\n\n  const handleLoginSwitch = () => {\n    if (loginSwitchState === \"login\") {\n      return (\n        <div>\n          <div className=\"login-text\">\n            <h2>Welcome back!</h2>\n            <p>Please log in to begin your musical adventures!</p>\n          </div>\n          <div className=\"login-form\">\n            <div>\n              <label>Username or Email</label>\n              <input\n                className=\"login-tb\"\n                id=\"tbUsername\"\n                type=\"text\"\n                placeholder=\"jdoe123! or johndoe@gmail.com\"\n              />\n            </div>\n            <div>\n              <div style={{ display: \"flex\" }}>\n                <label>Password</label>\n                <button\n                  id=\"btn-forgot\"\n                  onClick={() => dispatch(loginRegisterToggleAction(\"forgot\"))}\n                >\n                  Forgot Password?\n                </button>\n              </div>\n              <input\n                className=\"login-tb\"\n                id=\"tbPassword\"\n                type=\"password\"\n                placeholder=\"Password\"\n              />\n            </div>\n            <div>\n              <button class=\"btn-login\" onClick={handleRouteClick}>\n                Login\n              </button>\n            </div>\n            <div className=\"login-reg\">\n              <p>Are you new to Musicademy? </p>\n              <button\n                onClick={() => dispatch(loginRegisterToggleAction(\"register\"))}\n              >\n                Create an account\n              </button>\n            </div>\n          </div>\n        </div>\n      );\n    } else if (loginSwitchState === \"register\") {\n      return (\n        <div>\n          <div>\n            <h2>A new musical adventure begins here!</h2>\n            <p>\n              Make sure to enter correct information for proper registration.\n            </p>\n          </div>\n          <div>\n            <div>\n              <div>\n                <label>First Name</label>\n                <input id=\"tbFname\" type=\"text\" placeholder=\"John\" />\n              </div>\n              <div>\n                <label>Last Name</label>\n                <input id=\"tbLname\" type=\"text\" placeholder=\"Doe\" />\n              </div>\n            </div>\n            <div>\n              <label>Email</label>\n              <input\n                id=\"tbRegisEmail\"\n                type=\"text\"\n                placeholder=\"johndoe@gmail.com\"\n              />\n            </div>\n            <div>\n              <label>Username</label>\n              <input id=\"tbRegisUser\" type=\"text\" placeholder=\"jdoe123!\" />\n            </div>\n            <div>\n              <label>Password</label>\n              <input id=\"tbRegisPass\" type=\"text\" placeholder=\"Password\" />\n            </div>\n            <div>\n              <label>Confirm Password</label>\n              <input\n                id=\"tbRegisPassConf\"\n                type=\"password\"\n                placeholder=\"Password Confirmation\"\n              />\n            </div>\n            <div>\n              <button>Register</button>\n            </div>\n            <div>\n              <p>Already a member?</p>\n              <button\n                onClick={() => dispatch(loginRegisterToggleAction(\"login\"))}\n              >\n                Login to account\n              </button>\n            </div>\n          </div>\n        </div>\n      );\n    } else if (loginSwitchState === \"forgot\") {\n      return (\n        <div>\n          <div>\n            <h2>Forgot Password?</h2>\n            <p>Enter your email and we will email you instructions shortly.</p>\n          </div>\n          <div>\n            <div>\n              <label>Email</label>\n              <input\n                id=\"tbForgotEmail\"\n                type=\"text\"\n                placeholder=\"johndoe@gmail.com\"\n              />\n            </div>\n            <div>\n              <button>Send reset link</button>\n            </div>\n          </div>\n          <div>\n            <button\n              onClick={() => dispatch(loginRegisterToggleAction(\"login\"))}\n            >\n              {\"<\"} Back to Login\n            </button>\n          </div>\n        </div>\n      );\n    }\n  };\n\n  return (\n    <div className=\"login-wrapper\">\n      {/* Form */}\n      <div className=\"login-box\">{handleLoginSwitch()}</div>\n    </div>\n  );\n}\n","/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Teachers/Groups/GroupsPage.js",["645"],"import React, { useEffect } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { useHistory } from \"react-router-dom\";\n\nimport TopBar from \"../Dash/TopBar\";\nimport DashFooter from \"../Dash/DashFooter\";\n\nimport GroupFeedView from \"../Groups/GroupFeedView\";\nimport GroupFeedEdit from \"../Groups/GroupFeedEdit\";\nimport GroupAboutView from \"../Groups/GroupAboutView\";\nimport GroupAboutEdit from \"../Groups/GroupAboutEdit\";\nimport GroupMembersView from \"../Groups/GroupMembersView\";\nimport RandomString from \"../../RandomString\";\n\n// Router stuff\nimport { Switch, Route, Link, useRouteMatch } from \"react-router-dom\";\nimport {\n  groups_Collection,\n  groupReqQueue_Collection,\n} from \"../../../utils/firebase\";\nimport {\n  checkJoinedGroupStatusAction,\n  checkRequestedGroupStatusAction,\n} from \"../../../redux/actions\";\nimport { firebaseLooper } from \"../../../utils/tools\";\n\nexport default function GroupsPage() {\n  let { url } = useRouteMatch();\n  const teacherAuthID = useSelector((state) => state.storeTeacherAuthIDReducer);\n  const history = useHistory();\n  const dispatch = useDispatch();\n\n  const group = useSelector((state) => state.storeSingleGroupReducer);\n  const joined = useSelector((state) => state.checkJoinedGroupStatusReducer);\n  const requested = useSelector(\n    (state) => state.checkRequestedGroupStatusReducer\n  );\n\n  const joinGroup = () => {\n    const rand1 = RandomString();\n    const rand2 = RandomString();\n    const reqID = `GroupReq${rand1}${rand2}`;\n\n    // Send Request to DB\n    groupReqQueue_Collection\n      .doc(reqID)\n      .set({\n        MemberID: teacherAuthID,\n        HostID: group.Host,\n        isAccepted: false,\n      })\n      .catch((err) => console.log(err));\n\n    // Dispatch\n    dispatch(checkRequestedGroupStatusAction(true));\n  };\n  const disconnectGroup = () => {\n    if (teacherAuthID === group.Host) {\n      // Show modal\n      alert(\n        \"Our apologies. You are not able to disconnect from this group since you are the host.\"\n      );\n    } else {\n      // Remove from DB\n      groups_Collection\n        .doc(group.id)\n        .collection(\"Members\")\n        .get()\n        .then((snapshot) => {\n          const memberData = firebaseLooper(snapshot);\n          memberData.forEach((mem) => {\n            if (mem.Username === teacherAuthID) {\n              groups_Collection\n                .doc(group.id)\n                .collection(\"Members\")\n                .doc(mem.id)\n                .delete()\n                .catch((err) => console.log(err));\n            }\n          });\n        })\n        .catch((err) => console.log(err));\n    }\n\n    // Dispatch\n    dispatch(checkJoinedGroupStatusAction(false));\n  };\n\n  const checkJoined = () => {\n    groups_Collection\n      .doc(group.id)\n      .collection(\"Members\")\n      .get()\n      .then((snapshot) => {\n        const memberData = firebaseLooper(snapshot);\n        memberData.forEach((mem) => {\n          if (mem.Username === teacherAuthID) {\n            dispatch(checkJoinedGroupStatusAction(true));\n          }\n        });\n      })\n      .catch((err) => console.log(err));\n  };\n  const checkRequested = () => {\n    groupReqQueue_Collection\n      .get()\n      .then((snapshot) => {\n        const queueData = firebaseLooper(snapshot);\n        queueData.forEach((q) => {\n          if (q.MemberID === teacherAuthID) {\n            dispatch(checkRequestedGroupStatusAction(true));\n          }\n        });\n      })\n      .catch((err) => console.log(err));\n  };\n\n  useEffect(() => {\n    if (!teacherAuthID) {\n      history.push(\"/teacherdash\");\n      return;\n    }\n    checkJoined();\n    checkRequested();\n  }, []);\n  return (\n    <div>\n      {/* Top Bar */}\n      <div>\n        <TopBar />\n      </div>\n\n      {/* Main Content */}\n      <div>\n        <div>\n          <h1>{group.Name}</h1>\n        </div>\n        <div>\n          {joined ? (\n            <button onClick={disconnectGroup}>Disconnect</button>\n          ) : requested ? (\n            <button enabled=\"false\">Request Sent</button>\n          ) : (\n            <button onClick={joinGroup}>Join</button>\n          )}\n        </div>\n      </div>\n\n      <div>\n        <ul>\n          <li>\n            <Link to={`${url}/feed`}>Feed</Link>\n          </li>\n          <li>\n            <Link to={`${url}/about`}>About</Link>\n          </li>\n          <li>\n            <Link to={`${url}/members`}>Members</Link>\n          </li>\n        </ul>\n      </div>\n\n      <div>\n        <Switch>\n          {/* Feed */}\n          <Route path={`${url}/feed`}>\n            <GroupFeedView />\n          </Route>\n          <Route path={`${url}/feed-edit`}>\n            <GroupFeedEdit />\n          </Route>\n          {/* About */}\n          <Route path={`${url}/about`}>\n            <GroupAboutView />\n          </Route>\n          <Route path={`${url}/about-edit`}>\n            <GroupAboutEdit />\n          </Route>\n          {/* Members */}\n          <Route path={`${url}/members`}>\n            <GroupMembersView />\n          </Route>\n        </Switch>\n      </div>\n\n      {/* Footer */}\n      <div>\n        <DashFooter />\n      </div>\n    </div>\n  );\n}\n","/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Teachers/Articles/ArticlesMain.js",["646"],"import React, { useEffect } from \"react\";\n\nimport TopBar from \"../Dash/TopBar\";\nimport DashFooter from \"../Dash/DashFooter\";\n\nimport { useSelector } from \"react-redux\";\nimport { useHistory } from \"react-router-dom\";\nimport ArticleBlock from \"./ArticleBlock\";\n\nexport default function ArticlesMain() {\n  const teacherAuthID = useSelector((state) => state.storeTeacherAuthIDReducer);\n  const history = useHistory();\n\n  const articleState = useSelector(\n    (state) => state.storeTeacherArticlesGeneralInfoReducer\n  );\n\n  useEffect(() => {\n    if (!teacherAuthID) {\n      history.push(\"/teacherdash\");\n      return;\n    }\n  }, []);\n\n  return (\n    <div>\n      {/* Top Bar */}\n      <div>\n        <TopBar />\n      </div>\n\n      {/* Content */}\n      <div>\n        <div>\n          <input id=\"tbArticleSearch\" type=\"text\" placeholder=\"Search\" />\n          <button>Create New Article</button>\n        </div>\n        <div>\n          {articleState.map((art, i) => {\n            return (\n              <ArticleBlock key={i} mainTopic={art.MainTopic} desc={art.Desc} />\n            );\n          })}\n        </div>\n      </div>\n\n      {/* Footer */}\n      <div>\n        <DashFooter />\n      </div>\n    </div>\n  );\n}\n","/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Teachers/Settings/SettingsMain.js",[],"/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Students/Footer.js",[],"/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Teachers/Dash/AnnouncementBox.js",[],"/Users/jesusjimenez/Creative/MusicProject/musicapp/src/utils/tools.js",[],"/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Teachers/Profile/ProfileFeedEdit.js",["647"],"import React, { useEffect } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { useHistory } from \"react-router-dom\";\nimport {\n  storeProfileFeedPostDataAction,\n  storeTeacherMeDataAction,\n} from \"../../../redux/actions\";\nimport {\n  students_Collection,\n  teachers_Collection,\n  users_Collection,\n} from \"../../../utils/firebase\";\nimport GetToday from \"../../GetToday\";\nimport { firebaseLooper } from \"../../../utils/tools\";\n\nexport default function ProfileFeedEdit() {\n  const teacherAuthID = useSelector((state) => state.storeTeacherAuthIDReducer);\n  const history = useHistory();\n  const dispatch = useDispatch();\n\n  //   States\n  const singlePostState = useSelector(\n    (state) => state.storeProfileFeedSinglePostDataReducer\n  );\n  const allPostsState = useSelector(\n    (state) => state.storeProfileFeedPostDataReducer\n  );\n  const userState = useSelector((state) => state.userDataReducer);\n  const meData = useSelector((state) => state.storeTeacherMeDataReducer);\n\n  // GET\n  const getMeData = () => {\n    users_Collection\n      .where(\"AuthID\", \"==\", teacherAuthID)\n      .get()\n      .then((snapshot) => {\n        const myData = firebaseLooper(snapshot);\n        myData.forEach((me) => {\n          dispatch(storeTeacherMeDataAction(me));\n        });\n      })\n      .catch((err) => console.log(err));\n  };\n  const saveSinglePost = () => {\n    const postText = document.querySelector(\"#tbPostText\").value;\n\n    const postObj = {\n      ...singlePostState,\n      Poster: `${meData.FirstName} ${meData.LastName}`,\n      Text: postText,\n      Date: GetToday(),\n    };\n    // Save to DB\n    if (userState.AccountType === \"Student\") {\n      students_Collection\n        .doc(userState.AuthID)\n        .collection(\"Profile\")\n        .doc(\"Feed\")\n        .collection(\"Posts\")\n        .doc(singlePostState.id)\n        .set({\n          Poster: `${meData.FirstName} ${meData.LastName}`,\n          Likes: singlePostState.Likes,\n          Text: postText,\n          Date: GetToday(),\n        })\n        .catch((err) => console.log(err));\n    } else if (userState.AccountType === \"Teacher\") {\n      teachers_Collection\n        .doc(userState.AuthID)\n        .collection(\"Profile\")\n        .doc(\"Feed\")\n        .collection(\"Posts\")\n        .doc(singlePostState.id)\n        .set({\n          Poster: `${meData.FirstName} ${meData.LastName}`,\n          Likes: singlePostState.Likes,\n          Text: postText,\n          Date: GetToday(),\n        })\n        .catch((err) => console.log(err));\n    }\n\n    allPostsState.forEach((post) => {\n      if (post.id === singlePostState.id) {\n        post = {\n          ...postObj,\n        };\n        dispatch(storeProfileFeedPostDataAction(allPostsState));\n      }\n    });\n\n    history.push(\"/teacher-profile/feed\");\n  };\n\n  // REMOVE\n  const removeSinglePost = () => {\n    const postID = singlePostState.id;\n\n    if (userState.AccountType === \"Student\") {\n      students_Collection\n        .doc(userState.AuthID)\n        .collection(\"Profile\")\n        .doc(\"Feed\")\n        .collection(\"Posts\")\n        .doc(postID)\n        .delete()\n        .catch((err) => console.log(err));\n    } else if (userState.AccountType === \"Teacher\") {\n      teachers_Collection\n        .doc(userState.AuthID)\n        .collection(\"Profile\")\n        .doc(\"Feed\")\n        .collection(\"Posts\")\n        .doc(postID)\n        .delete()\n        .catch((err) => console.log(err));\n    }\n\n    const all = [...allPostsState];\n    const newArray = all.filter((post) => post.id !== postID);\n    newArray.sort((a, b) => b.Date - a.Date);\n    dispatch(storeProfileFeedPostDataAction(newArray));\n    history.push(\"/teacher-profile/feed\");\n  };\n\n  // HANDLE\n  const handleCurrPage = () => {\n    let feedBtn = document.querySelector(\"#link-feed\");\n    feedBtn.classList.add(\"navy-back\");\n\n    let aboutBtn = document.querySelector(\"#link-about\");\n    aboutBtn.classList.remove(\"navy-back\");\n\n    let awardsBtn = document.querySelector(\"#link-awards\");\n    awardsBtn.classList.remove(\"navy-back\");\n\n    let galleryBtn = document.querySelector(\"#link-gallery\");\n    galleryBtn.classList.remove(\"navy-back\");\n\n    let reviewsBtn = document.querySelector(\"#link-reviews\");\n    reviewsBtn.classList.remove(\"navy-back\");\n  };\n\n  useEffect(() => {\n    if (!teacherAuthID) {\n      history.push(\"/teacherdash\");\n      return;\n    }\n\n    handleCurrPage();\n    getMeData();\n  }, []);\n\n  return (\n    <div className=\"post-edit-wrapper\">\n      <button\n        className=\"btn-back maroon-back\"\n        onClick={() => {\n          history.push(\"/teacher-profile/feed\");\n        }}\n      >\n        Back\n      </button>\n\n      <div className=\"post-create\">\n        <h2 className=\"post-create-head\">Edit Post</h2>\n        <textarea\n          className=\"ta\"\n          id=\"tbPostText\"\n          defaultValue={singlePostState.Text}\n        ></textarea>\n        <div className=\"btn-wrapper\">\n          <button className=\"btn-remove\" onClick={removeSinglePost}>\n            Remove\n          </button>\n          <button className=\"btn-save\" onClick={saveSinglePost}>\n            Save\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n}\n","/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Teachers/Invoices/InvoiceBlock.js",[],"/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Teachers/Groups/GroupFeedEdit.js",["648","649"],"import React, { useEffect } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { useHistory } from \"react-router-dom\";\nimport { storeGroupFeedPostsAction } from \"../../../redux/actions\";\nimport { groups_Collection } from \"../../../utils/firebase\";\nimport GetToday from \"../../GetToday\";\n\nexport default function GroupFeedEdit() {\n  const teacherAuthID = useSelector((state) => state.storeTeacherAuthIDReducer);\n  const history = useHistory();\n  const dispatch = useDispatch();\n\n  const group = useSelector((state) => state.storeSingleGroupReducer);\n  const post = useSelector((state) => state.storeSingleGroupFeedPostReducer);\n  const posts = useSelector((state) => state.storeGroupFeedPostsReducer);\n\n  const savePost = () => {\n    const editText = document.querySelector(\"#taEditPostText\").value;\n\n    //   Save to DB\n    groups_Collection\n      .doc(group.id)\n      .collection(\"Posts\")\n      .doc(post.id)\n      .update({\n        Date: group.Date,\n        Poster: teacherAuthID,\n        Text: editText,\n      })\n      .catch((err) => console.log(err));\n\n    // Dispatch\n    const newPosts = [...posts];\n\n    newPosts.forEach((p) => {\n      if (p.id === post.id) {\n        p = {\n          ...p,\n          Text: editText,\n        };\n      }\n    });\n\n\n    dispatch(storeGroupFeedPostsAction(newPosts));\n    history.push(\"/teacher-group-page/feed\");\n  };\n\n  useEffect(() => {\n    if (!teacherAuthID) {\n      history.push(\"/teacherdash\");\n      return;\n    }\n  }, []);\n  return (\n    <div>\n      <div>\n        <button onClick={() => history.push(\"/teacher-group-page/feed\")}>\n          Back\n        </button>\n      </div>\n      <br />\n      <div>\n        <textarea id=\"taEditPostText\" defaultValue={post.Text}></textarea>\n        <br />\n        <button onClick={savePost}>Save</button>\n      </div>\n    </div>\n  );\n}\n",["650","651"],"/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/TeacherDash.js",["652","653","654","655","656","657"],"import React, { useEffect } from \"react\";\n\nimport TopBar from \"./Teachers/Dash/TopBar\";\nimport AnnouncementBox from \"./Teachers/Dash/AnnouncementBox\";\nimport SimpleStats from \"./Teachers/Dash/SimpleStats\";\nimport RecentActivity from \"./Teachers/Dash/RecentActivity\";\nimport RecentInvoices from \"./Teachers/Dash/RecentInvoices\";\nimport Earnings from \"./Teachers/Dash/Earnings\";\nimport Achievement from \"./Teachers/Dash/Achievement\";\nimport UpcomingEvents from \"./Teachers/Dash/UpcomingEvents\";\n\nimport DashFooter from \"./Teachers/Dash/DashFooter\";\nimport \"./TeacherDash.css\";\n\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { useHistory } from \"react-router-dom\";\nimport {\n  storeTeacherAuthIDAction,\n  storeTeacherForumsGeneralInfoAction,\n  storeTeacherSettingsGeneralInfoAction,\n  storeTeacherStatisticsGeneralInfoAction,\n  userDataAction,\n  storeAccountTypeAction,\n  isLoggedInAction,\n} from \"../redux/actions\";\n\nimport {\n  teachers_Collection,\n  groups_Collection,\n  users_Collection,\n} from \"../utils/firebase\";\nimport { firebaseLooper } from \"../utils/tools\";\n\nexport default function TeacherDash() {\n  const dispatch = useDispatch();\n  const history = useHistory();\n\n  const teacherAuthID = useSelector((state) => state.storeTeacherAuthIDReducer);\n  const state = useSelector(\n    (state) => state.storeTeacherStudentGeneralInfoReducer\n  );\n  // All Data Needed\n\n  // Student Collection\n  const getAllUserData = () => {\n    users_Collection\n      .where(\"AuthID\", \"==\", teacherAuthID)\n      .get()\n      .then((snapshot) => {\n        const data = firebaseLooper(snapshot);\n        dispatch(userDataAction(data[0]));\n        dispatch(storeTeacherAuthIDAction(data[0].AuthID));\n       \n      })\n      .catch((err) => console.log(err));\n  };\n  const getAllStatisticData = () => {\n    const statistics_Collection = teachers_Collection\n      .doc(teacherAuthID)\n      .collection(\"Statistics\");\n    statistics_Collection\n      .get()\n      .then((snapshot) => {\n        const data = firebaseLooper(snapshot);\n        dispatch(storeTeacherStatisticsGeneralInfoAction(data));\n      })\n      .catch((err) => console.log(err));\n  };\n  const getAllSettingData = () => {\n    const settings_Collection = teachers_Collection\n      .doc(teacherAuthID)\n      .collection(\"Settings\");\n    settings_Collection\n      .get()\n      .then((snapshot) => {\n        const data = firebaseLooper(snapshot);\n        dispatch(storeTeacherSettingsGeneralInfoAction(data));\n      })\n      .catch((err) => console.log(err));\n  };\n\n  useEffect(() => {\n    if (!teacherAuthID) {\n      history.push(\"/login\");\n      return;\n    }\n    getAllUserData();\n    getAllStatisticData();\n    getAllSettingData();\n  }, []);\n\n  return (\n    //   This entire component will have a background. The pieces inside will be another color, in chunks.\n    <div>\n      {/* Top Bar */}\n      <div>\n        <TopBar />\n      </div>\n\n      {/* Main Content */}\n      <div className=\"content\">\n        {/* Announcement Box */}\n        <div>\n          <AnnouncementBox />\n        </div>\n\n        {/* Simple Stats */}\n        <div>\n          <SimpleStats />\n        </div>\n\n        {/* Recent Student,Group,Forum Activity */}\n        <div>\n          <RecentActivity />\n        </div>\n\n        {/* Recent Invoices */}\n        <div>\n          <RecentInvoices />\n        </div>\n\n        {/* Earnings, Achievement, Upcoming Events*/}\n        <div>\n          {/* Earnings */}\n          <div>\n            <Earnings />\n          </div>\n\n          {/* Achievement */}\n          <div>\n            <Achievement />\n          </div>\n\n          {/* Upcoming Events */}\n          <div>\n            <UpcomingEvents />\n          </div>\n        </div>\n      </div>\n\n      {/* Footer */}\n      <DashFooter />\n    </div>\n  );\n}\n",["658","659"],"/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Teachers/Assignments/AssignmentView.js",["660"],"import React, { useEffect } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { useHistory } from \"react-router-dom\";\nimport { firebaseLooper } from \"../../../utils/tools\";\nimport {\n  students_Collection,\n  teachers_Collection,\n} from \"../../../utils/firebase\";\n\nimport TopBar from \"../Dash/TopBar\";\nimport DashFooter from \"../Dash/DashFooter\";\nimport {\n  storeTeacherAssignmentAssigneesAction,\n  storeTeacherAssignmentsGeneralInfoAction,\n  storeTeacherStudentGeneralInfoAction,\n  toggleAssigneeFormAction,\n} from \"../../../redux/actions\";\nimport RandomString from \"../../RandomString\";\nimport firebase from \"../../../utils/firebase\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faArrowRight } from \"@fortawesome/free-solid-svg-icons\";\n\nexport default function AssignmentView() {\n  const teacherAuthID = useSelector((state) => state.storeTeacherAuthIDReducer);\n  const history = useHistory();\n  const dispatch = useDispatch();\n\n  const toggleAssigneeForm = useSelector(\n    (state) => state.toggleAssigneeFormReducer\n  );\n\n  const assignment = useSelector(\n    (state) => state.storeTeacherSingleAssignmentReducer\n  );\n  const students = useSelector(\n    (state) => state.storeTeacherStudentGeneralInfoReducer\n  );\n  const assignees = useSelector(\n    (state) => state.storeTeacherAssignmentAssigneesReducer\n  );\n\n  //   HANDLE\n  const handleAssignment = () => {\n    return (\n      <div>\n        {assignment.Date ? (\n          <p className=\"ass-assigned-on\">\n            Created on:{\" \"}\n            <span className=\"ass-date\">\n              {assignment.Date.toDate().toString().substr(4, 11)}\n            </span>\n          </p>\n        ) : null}\n        {assignment.Due ? (\n          <p className=\"ass-assigned-on\">\n            Due on:{\" \"}\n            <span className=\"ass-date\">\n              {assignment.Due.toDate().toString().substr(4, 11)}\n            </span>\n          </p>\n        ) : null}\n        <p className=\"ass-type\">{assignment.Type} Assignment</p>\n        <div>{handleAssignmentType()}</div>\n        <div>\n          <h3>Assignees:</h3>\n          {assignment.Assignees\n            ? assignees.map((stud, i) => {\n                return (\n                  <div key={i} className=\"ass-assignee\">\n                    <FontAwesomeIcon\n                      style={{ color: \"#3E00F9\" }}\n                      icon={faArrowRight}\n                    />\n                    <p style={{ marginLeft: \"10px\", fontWeight: \"800\" }}>\n                      {stud}\n                    </p>\n                  </div>\n                );\n              })\n            : null}\n        </div>\n      </div>\n    );\n  };\n  const handleAssignmentType = () => {\n    if (assignment.Type === \"Textual\") {\n      return (\n        <div className=\"ass-block\">\n          <h3 className=\"ass-type-head\">Assignment:</h3>\n          <p className=\"ass-type-text\">{assignment.Text}</p>\n        </div>\n      );\n    } else if (assignment.Type === \"Practice\") {\n      return (\n        <div className=\"ass-block\">\n          <div>\n            <h3 className=\"ass-type-head\">Assignment:</h3>\n            <p className=\"ass-type-text\">{assignment.Text}</p>\n          </div>\n          <div>\n            <h3 className=\"ass-type-head\">Repertoire:</h3>\n            <p className=\"ass-type-text\">{assignment.Repertoire}</p>\n          </div>\n          <div>\n            <h3 className=\"ass-type-head\">Composer:</h3>\n            <p className=\"ass-type-text\">{assignment.Composer}</p>\n          </div>\n          <div>\n            <h3 className=\"ass-type-head\">Tempo:</h3>\n            <p className=\"ass-type-text\">{assignment.Tempo}</p>\n          </div>\n          <div>\n            <h3 className=\"ass-type-head\">Max Practice Time</h3>\n            <p className=\"ass-type-text\">{assignment.MaxTime}</p>\n          </div>\n        </div>\n      );\n    }\n  };\n  const handleAssigneeForm = () => {\n    if (assignees.length > 0) {\n      const studs = [...students];\n      const distinct = studs.filter(\n        (item) => !assignees.includes(`${item.FirstName} ${item.LastName}`)\n      );\n\n      return distinct.map((dis, i) => {\n        return (\n          <div className=\"assignee-block\" key={i}>\n            <p className=\"assignee-line\">\n              {dis.FirstName} {dis.LastName}{\" \"}\n              <span className=\"assignee-id\">{dis.id}</span>\n            </p>\n            <button\n              className=\"btnAssignee-add\"\n              onClick={addAssignee}\n              id={`${dis.FirstName} ${dis.LastName} ${dis.id}`}\n            >\n              Assign\n            </button>\n          </div>\n        );\n      });\n    } else {\n      return students.map((stud, i) => {\n        return (\n          <div className=\"assignee-block\" key={i}>\n            <p className=\"assignee-line\">\n              {stud.FirstName} {stud.LastName}{\" \"}\n              <span className=\"assignee-id\">{stud.id}</span>\n            </p>\n            <button\n              className=\"btnAssignee-add\"\n              onClick={addAssignee}\n              id={`${stud.FirstName} ${stud.LastName} ${stud.id}`}\n            >\n              Assign\n            </button>\n          </div>\n        );\n      });\n    }\n  };\n\n  // GET\n  const getAllStudents = () => {\n    teachers_Collection\n      .doc(teacherAuthID)\n      .collection(\"Students\")\n      .get()\n      .then((snapshot) => {\n        const studList = firebaseLooper(snapshot);\n        dispatch(storeTeacherStudentGeneralInfoAction(studList));\n      })\n      .catch((err) => console.log(err));\n  };\n\n  // POST\n  const addAssignee = (event) => {\n    let valid = true;\n    const studArr = event.target.getAttribute(\"id\").split(\" \");\n    const studID = studArr[2];\n    const studFull = `${studArr[0]} ${studArr[1]}`;\n\n    assignees.forEach((assignee) => {\n      if (studID === assignee) {\n        valid = false;\n      }\n    });\n\n    if (valid) {\n      const rand1 = RandomString();\n      const rand2 = RandomString();\n      const assInfoID = `AssInfo${rand1}${rand2}`;\n\n      // Save to DB\n\n      students_Collection\n        .doc(studID)\n        .collection(\"AssignmentsInfo\")\n        .doc(assInfoID)\n        .set({\n          Teacher: teacherAuthID,\n          AssID: assignment.id,\n          Name: assignment.Name,\n          Desc: assignment.Desc,\n          isComplete: false,\n        })\n        .catch((err) => console.log(err));\n\n      teachers_Collection\n        .doc(teacherAuthID)\n        .collection(\"Assignments\")\n        .doc(assignment.id)\n        .update({\n          Assignees: firebase.firestore.FieldValue.arrayUnion(studFull),\n        })\n        .catch((err) => console.log(err));\n\n      const allAssignees = [...assignment.Assignees];\n      allAssignees.push(studFull);\n      dispatch(storeTeacherAssignmentAssigneesAction(allAssignees));\n\n      const tempObj = {\n        ...assignment,\n        Assignees: allAssignees,\n      };\n\n      dispatch(storeTeacherAssignmentsGeneralInfoAction(tempObj));\n    }\n  };\n\n  //   NAV\n  const navAssignmentEdit = () => {\n    history.push(\"teacher-assignment-edit\");\n  };\n\n  useEffect(() => {\n    if (!teacherAuthID) {\n      history.push(\"/teacherdash\");\n      return;\n    }\n\n    getAllStudents();\n  }, []);\n  return (\n    <div>\n      {/* Top Bar */}\n      <div>\n        <TopBar />\n      </div>\n\n      <div className=\"content\">\n        <div className=\"white-background\">\n          <button\n            className=\"btn-back\"\n            onClick={() => history.push(\"/teacher-assignments\")}\n          >\n            Back\n          </button>\n          <button className=\"btn-edit-ass\" onClick={navAssignmentEdit}>\n            Edit Assignment\n          </button>\n          <p className=\"ass-name\">{assignment.Name}</p>\n          <p>{assignment.Desc}</p>\n          <div>{handleAssignment()}</div>\n          <br />\n          <div>\n            <button\n              onClick={() => dispatch(toggleAssigneeFormAction())}\n              className=\"add-assignee\"\n            >\n              {toggleAssigneeForm ? \"Close\" : \"Add Assignee\"}\n            </button>\n            {toggleAssigneeForm ? handleAssigneeForm() : null}\n          </div>\n        </div>\n      </div>\n\n      {/* Footer */}\n      <div>\n        <DashFooter />\n      </div>\n    </div>\n  );\n}\n","/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/GetToday.js",[],"/Users/jesusjimenez/Creative/MusicProject/musicapp/src/utils/firebase.js",[],"/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Teachers/Profile/ProfileAwardsView.js",["661"],"import React, { useEffect } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { useHistory } from \"react-router-dom\";\nimport {\n  students_Collection,\n  teachers_Collection,\n} from \"../../../utils/firebase\";\nimport {\n  storeAwardListAction,\n  storeCertListAction,\n} from \"../../../redux/actions\";\nimport { firebaseLooper } from \"../../../utils/tools\";\n\nexport default function ProfileAwardsView() {\n  const teacherAuthID = useSelector((state) => state.storeTeacherAuthIDReducer);\n  const history = useHistory();\n  const dispatch = useDispatch();\n  const user = useSelector((state) => state.userDataReducer);\n  const meData = useSelector((state) => state.storeTeacherMeDataReducer);\n\n  const awards = useSelector((state) => state.storeAwardListReducer);\n  const certs = useSelector((state) => state.storeCertListReducer);\n\n  // GET\n  const getAllAwards = () => {\n    let awards_Collection;\n    if (user.AccountType === \"Student\") {\n      awards_Collection = students_Collection\n        .doc(user.AuthID)\n        .collection(\"Profile\")\n        .doc(\"Awards\")\n        .collection(\"AwardBlocks\");\n    } else if (user.AccountType === \"Teacher\") {\n      awards_Collection = teachers_Collection\n        .doc(user.AuthID)\n        .collection(\"Profile\")\n        .doc(\"Awards\")\n        .collection(\"AwardList\");\n    }\n\n    let cert_Collection;\n    if (user.AccountType === \"Student\") {\n      cert_Collection = students_Collection\n        .doc(user.AuthID)\n        .collection(\"Profile\")\n        .doc(\"Awards\")\n        .collection(\"CertBlocks\");\n    } else if (user.AccountType === \"Teacher\") {\n      cert_Collection = teachers_Collection\n        .doc(user.AuthID)\n        .collection(\"Profile\")\n        .doc(\"Awards\")\n        .collection(\"CertificationList\");\n    }\n\n    awards_Collection\n      .get()\n      .then((snapshot) => {\n        const awardData = firebaseLooper(snapshot);\n        dispatch(storeAwardListAction(awardData));\n      })\n      .catch((err) => console.log(err));\n\n    cert_Collection\n      .get()\n      .then((snapshot) => {\n        const certData = firebaseLooper(snapshot);\n        dispatch(storeCertListAction(certData));\n      })\n      .catch((err) => console.log(err));\n  };\n\n  // HANDLE\n  const handleCurrPage = () => {\n    let feedBtn = document.querySelector(\"#link-feed\");\n    feedBtn.classList.remove(\"navy-back\");\n\n    let aboutBtn = document.querySelector(\"#link-about\");\n    aboutBtn.classList.remove(\"navy-back\");\n\n    let awardsBtn = document.querySelector(\"#link-awards\");\n    awardsBtn.classList.add(\"navy-back\");\n\n    let galleryBtn = document.querySelector(\"#link-gallery\");\n    galleryBtn.classList.remove(\"navy-back\");\n\n    if (user.AccountType === \"Teacher\") {\n      let reviewsBtn = document.querySelector(\"#link-reviews\");\n      reviewsBtn.classList.remove(\"navy-back\");\n    }\n  };\n\n  useEffect(() => {\n    if (!teacherAuthID) {\n      history.push(\"/teacherdash\");\n      return;\n    }\n    getAllAwards();\n    handleCurrPage();\n  }, []);\n  return (\n    <div>\n      <div>\n        {user.AuthID === meData.AuthID ? (\n          <button\n            className=\"btn-newPost\"\n            onClick={() => {\n              history.push(\"/teacher-profile/edit-awards\");\n            }}\n          >\n            Edit\n          </button>\n        ) : null}\n      </div>\n      <div className=\"white-background\">\n        <h2 className=\"award-head\">Awards</h2>\n        {awards.map((award, i) => {\n          return (\n            <div key={i}>\n              <h3 className=\"award-name\">{award.Name}</h3>\n              <p className=\"award-location\">{award.Location}</p>\n              <p className=\"award-date\">\n                Awarded on {award.Date.toDate().toString().substr(4, 11)}\n              </p>\n              <p className=\"award-desc\">{award.Desc}</p>\n            </div>\n          );\n        })}\n      </div>\n      <div className=\"white-background\">\n        <h2 className=\"award-head\">Certifications</h2>\n        {certs.map((cert, i) => {\n          return (\n            <div key={i}>\n              <h3 className=\"award-name\">{cert.Name}</h3>\n              <p className=\"award-location\">{cert.Location}</p>\n              <p className=\"award-date\">\n                Awarded on {cert.Date.toDate().toString().substr(4, 11)}\n              </p>\n              <p className=\"award-desc\">{cert.Desc}</p>\n            </div>\n          );\n        })}\n      </div>\n    </div>\n  );\n}\n","/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Teachers/Profile/ProfileAwardsEdit.js",["662","663"],"import React, { useEffect } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { useHistory } from \"react-router-dom\";\nimport {\n  storeAwardListAction,\n  storeCertListAction,\n  toggleNewAwardFormAction,\n  toggleNewCertFormAction,\n} from \"../../../redux/actions\";\nimport { teachers_Collection } from \"../../../utils/firebase\";\n\nimport InputDateFormatter from \"../../InputDateFormatter\";\nimport RandomString from \"../../RandomString\";\nimport FirebaseDate from \"../../FirebaseDate\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faMinus, faPlus } from \"@fortawesome/free-solid-svg-icons\";\n\nexport default function ProfileAwardsEdit() {\n  const teacherAuthID = useSelector((state) => state.storeTeacherAuthIDReducer);\n  const history = useHistory();\n  const dispatch = useDispatch();\n\n  const awards = useSelector((state) => state.storeAwardListReducer);\n  const certs = useSelector((state) => state.storeCertListReducer);\n\n  const toggleAwardForm = useSelector(\n    (state) => state.toggleNewAwardFormReducer\n  );\n  const toggleCertForm = useSelector((state) => state.toggleNewCertFormReducer);\n  const user = useSelector((state) => state.userDataReducer);\n  const meData = useSelector((state) => state.storeTeacherMeDataReducer);\n\n  const applyNewAward = () => {\n    const awardName = document.querySelector(\"#tbAwardNameText\").value;\n    const awardLocation = document.querySelector(\"#tbAwardLocationText\").value;\n    const awardDate = document.querySelector(\"#daAwardDateNew\").value;\n    const awardDesc = document.querySelector(\"#taAwardDescText\").value;\n\n    const rand1 = RandomString();\n    const rand2 = RandomString();\n    const awardID = `Award${rand1}${rand2}`;\n\n    // Save to DB\n    teachers_Collection\n      .doc(teacherAuthID)\n      .collection(\"Profile\")\n      .doc(\"Awards\")\n      .collection(\"AwardList\")\n      .doc(awardID)\n      .set({\n        Name: awardName,\n        Location: awardLocation,\n        Date: FirebaseDate(awardDate),\n        Desc: awardDesc,\n      })\n      .catch((err) => console.log(err));\n\n    // Dispatch\n    const allAwards = [...awards];\n    allAwards.push({\n      id: awardID,\n      Name: awardName,\n      Location: awardLocation,\n      Date: FirebaseDate(awardDate),\n      Desc: awardDesc,\n    });\n\n    dispatch(storeAwardListAction(allAwards));\n    dispatch(toggleNewAwardFormAction());\n  };\n\n  const applyNewCert = () => {\n    const certName = document.querySelector(\"#tbCertNameText\").value;\n    const certLocation = document.querySelector(\"#tbCertLocationText\").value;\n    const certDate = document.querySelector(\"#daCertDateNew\").value;\n    const certDesc = document.querySelector(\"#taCertDescText\").value;\n\n    const rand1 = RandomString();\n    const rand2 = RandomString();\n    const certID = `Cert${rand1}${rand2}`;\n\n    // Save to DB\n    teachers_Collection\n      .doc(teacherAuthID)\n      .collection(\"Profile\")\n      .doc(\"Awards\")\n      .collection(\"CertificationList\")\n      .doc(certID)\n      .set({\n        Name: certName,\n        Location: certLocation,\n        Date: FirebaseDate(certDate),\n        Desc: certDesc,\n      })\n      .catch((err) => console.log(err));\n\n    // Dispatch\n    const allCerts = [...certs];\n    allCerts.push({\n      id: certID,\n      Name: certName,\n      Location: certLocation,\n      Date: FirebaseDate(certDate),\n      Desc: certDesc,\n    });\n\n    dispatch(storeCertListAction(allCerts));\n    dispatch(toggleNewCertFormAction());\n  };\n\n  // REMOVE\n  const removeAward = (event) => {\n    const awardID = event.target.getAttribute(\"id\");\n\n    teachers_Collection\n      .doc(teacherAuthID)\n      .collection(\"Profile\")\n      .doc(\"Awards\")\n      .collection(\"AwardList\")\n      .doc(awardID)\n      .delete()\n      .catch((err) => console.log(err));\n\n    const allAwards = [...awards];\n    const filteredAwards = allAwards.filter((a) => a.id !== awardID);\n\n    dispatch(storeAwardListAction(filteredAwards));\n  };\n  const removeCert = (event) => {\n    const certID = event.target.getAttribute(\"id\");\n\n    teachers_Collection\n      .doc(teacherAuthID)\n      .collection(\"Profile\")\n      .doc(\"Awards\")\n      .collection(\"CertificationList\")\n      .doc(certID)\n      .delete()\n      .catch((err) => console.log(err));\n\n    const allCerts = [...certs];\n    const filteredCerts = allCerts.filter((c) => c.id !== certID);\n\n    dispatch(storeCertListAction(filteredCerts));\n  };\n\n  const saveAllChanges = () => {\n    const allAwards = [];\n    const allCerts = [];\n\n    const awardCount = awards.length;\n    const certCount = certs.length;\n\n    // Save to DB\n    for (let i = 0; i < awardCount; i = i + 1) {\n      const tempObj = {\n        Name: document.querySelector(`#tbAwardName${i}`).value,\n        Location: document.querySelector(`#tbAwardLocation${i}`).value,\n        Date: FirebaseDate(document.querySelector(`#daAwardDate${i}`).value),\n        Desc: document.querySelector(`#taAwardDesc${i}`).value,\n      };\n\n      allAwards.push(tempObj);\n    }\n\n    for (let i = 0; i < certCount; i = i + 1) {\n      const tempObj = {\n        Name: document.querySelector(`#tbCertName${i}`).value,\n        Location: document.querySelector(`#tbCertLocation${i}`).value,\n        Date: FirebaseDate(document.querySelector(`#daCertDate${i}`).value),\n        Desc: document.querySelector(`#taCertDesc${i}`).value,\n      };\n\n      allCerts.push(tempObj);\n    }\n\n    allAwards.forEach((a, i) => {\n      teachers_Collection\n        .doc(teacherAuthID)\n        .collection(\"Profile\")\n        .doc(\"Awards\")\n        .collection(\"AwardList\")\n        .doc(awards[i].id)\n        .update({\n          Name: a.Name,\n          Location: a.Location,\n          Date: a.Date,\n          Desc: a.Desc,\n        })\n        .catch((err) => console.log(err));\n    });\n\n    allCerts.forEach((c, i) => {\n      teachers_Collection\n        .doc(teacherAuthID)\n        .collection(\"Profile\")\n        .doc(\"Awards\")\n        .collection(\"CertificationList\")\n        .doc(certs[i].id)\n        .update({\n          Name: c.Name,\n          Location: c.Location,\n          Date: c.Date,\n          Desc: c.Desc,\n        })\n        .catch((err) => console.log(err));\n    });\n\n    // Dispatch\n    dispatch(storeAwardListAction(allAwards));\n    dispatch(storeCertListAction(allCerts));\n\n    history.push(\"/teacher-profile/awards\");\n  };\n\n  // HANDLE\n  const handleCurrPage = () => {\n    let feedBtn = document.querySelector(\"#link-feed\");\n    feedBtn.classList.remove(\"navy-back\");\n\n    let aboutBtn = document.querySelector(\"#link-about\");\n    aboutBtn.classList.remove(\"navy-back\");\n\n    let awardsBtn = document.querySelector(\"#link-awards\");\n    awardsBtn.classList.add(\"navy-back\");\n\n    let galleryBtn = document.querySelector(\"#link-gallery\");\n    galleryBtn.classList.remove(\"navy-back\");\n\n    if (user.AccountType === \"Teacher\") {\n      let reviewsBtn = document.querySelector(\"#link-reviews\");\n      reviewsBtn.classList.remove(\"navy-back\");\n    }\n  };\n\n  useEffect(() => {\n    if (!teacherAuthID) {\n      history.push(\"/teacherdash\");\n      return;\n    }\n\n    handleCurrPage();\n  }, []);\n  return (\n    <div>\n      <div>\n        <button\n          className=\"btn-back\"\n          onClick={() => {\n            history.push(\"/teacher-profile/awards\");\n          }}\n        >\n          Back\n        </button>\n      </div>\n      <div className=\"white-background\">\n        <h2 className=\"award-head\">Awards</h2>\n        {awards.map((award, i) => {\n          return (\n            <div className=\"award-block\" key={i}>\n              <div>\n                <p className=\"award-edit-head\">Award Name:</p>\n                <input\n                  className=\"tb-award\"\n                  id={`tbAwardName${i}`}\n                  type=\"text\"\n                  defaultValue={award.Name}\n                />\n              </div>\n              <div>\n                <p className=\"award-edit-head\">Location: </p>\n                <input\n                  className=\"tb-award\"\n                  id={`tbAwardLocation${i}`}\n                  type=\"text\"\n                  defaultValue={award.Location}\n                />\n              </div>\n              <div>\n                <p className=\"award-edit-head\">Date Awarded:</p>\n                <input\n                  className=\"dt\"\n                  id={`daAwardDate${i}`}\n                  type=\"date\"\n                  defaultValue={InputDateFormatter(award.Date)}\n                />\n              </div>\n              <div>\n                <p className=\"award-edit-head\">Description:</p>\n                <textarea\n                  className=\"taExpDescText\"\n                  id={`taAwardDesc${i}`}\n                  defaultValue={award.Desc}\n                ></textarea>\n              </div>\n              <button\n                className=\"btnRemoveExp\"\n                id={award.id}\n                onClick={removeAward}\n              >\n                <FontAwesomeIcon icon={faMinus} />\n              </button>\n            </div>\n          );\n        })}\n\n        {/* New Award Form */}\n        {toggleAwardForm ? (\n          <div>\n            <button\n              className=\"btnCancelExpForm\"\n              onClick={() => {\n                dispatch(toggleNewAwardFormAction());\n              }}\n            >\n              Cancel\n            </button>\n            {/* Award Name */}\n            <div>\n              <p className=\"award-edit-head\">Award Name:</p>\n              <input\n                className=\"tb-award\"\n                id={`tbAwardNameText`}\n                type=\"text\"\n                placeholder=\"Award Name\"\n              />\n            </div>\n            {/* Award Location */}\n            <div>\n              <p className=\"award-edit-head\">Location:</p>\n              <input\n                className=\"tb-award\"\n                id={`tbAwardLocationText`}\n                type=\"text\"\n                placeholder=\"Location\"\n              />\n            </div>\n            {/* Award Date */}\n            <div>\n              <p className=\"award-edit-head\">Date Awarded:</p>\n              <input className=\"dt\" id={`daAwardDateNew`} type=\"date\" />\n            </div>\n            {/* Award Desc */}\n            <div>\n              <p className=\"award-edit-head\">Description:</p>\n              <textarea\n                className=\"taExpDescText\"\n                id={`taAwardDescText`}\n                placeholder=\"Description\"\n              />\n            </div>\n            <button className=\"btnExpApply\" onClick={applyNewAward}>\n              Apply\n            </button>\n          </div>\n        ) : (\n          <button\n            className=\"btnAddExp\"\n            onClick={() => {\n              dispatch(toggleNewAwardFormAction());\n            }}\n          >\n            <FontAwesomeIcon icon={faPlus} />\n          </button>\n        )}\n      </div>\n      <div className=\"white-background\">\n        <h2 className=\"award-head\">Certifications</h2>\n        {certs.map((cert, i) => {\n          return (\n            <div className=\"award-block\" key={i}>\n              <div>\n                <p className=\"award-edit-head\">Certification Name:</p>\n                <input\n                  className=\"tb-award\"\n                  id={`tbCertName${i}`}\n                  type=\"text\"\n                  defaultValue={cert.Name}\n                />\n              </div>\n              <div>\n                <p className=\"award-edit-head\">Location:</p>\n                <input\n                  className=\"tb-award\"\n                  id={`tbCertLocation${i}`}\n                  type=\"text\"\n                  defaultValue={cert.Location}\n                />\n              </div>\n              <div>\n                <p className=\"award-edit-head\">Date Received:</p>\n                <input\n                  className=\"dt\"\n                  id={`daCertDate${i}`}\n                  type=\"date\"\n                  defaultValue={InputDateFormatter(cert.Date)}\n                />\n              </div>\n              <div>\n                <p className=\"award-edit-head\">Description:</p>\n                <textarea\n                  className=\"taExpDescText\"\n                  id={`taCertDesc${i}`}\n                  defaultValue={cert.Desc}\n                ></textarea>\n              </div>\n              <button\n                className=\"btnRemoveExp\"\n                id={cert.id}\n                onClick={removeCert}\n              >\n                <FontAwesomeIcon icon={faMinus} />\n              </button>\n            </div>\n          );\n        })}\n\n        {/* New Cert Form */}\n        {toggleCertForm ? (\n          <div>\n            {/* Cert Name */}\n            <div>\n              <button\n                className=\"btnCancelExpForm\"\n                onClick={() => {\n                  dispatch(toggleNewCertFormAction());\n                }}\n              >\n                Cancel\n              </button>\n              <p className=\"award-edit-head\">Certification Name:</p>\n              <input\n                className=\"tb-award\"\n                id={`tbCertNameText`}\n                type=\"text\"\n                placeholder=\"Certification Name\"\n              />\n            </div>\n            {/* Cert Location */}\n            <div>\n              <p className=\"award-edit-head\">Location:</p>\n              <input\n                className=\"tb-award\"\n                id={`tbCertLocationText`}\n                type=\"text\"\n                placeholder=\"Location\"\n              />\n            </div>\n            {/* Cert Date */}\n            <div>\n              <p className=\"award-edit-head\">Date Received:</p>\n              <input className=\"dt\" id={`daCertDateNew`} type=\"date\" />\n            </div>\n            {/* Date Desc */}\n            <div>\n              <p className=\"award-edit-head\">Description:</p>\n              <textarea\n                className=\"taExpDescText\"\n                id={`taCertDescText`}\n                placeholder=\"Description\"\n              />\n            </div>\n            <button className=\"btnExpApply\" onClick={applyNewCert}>\n              Apply\n            </button>\n          </div>\n        ) : (\n          <button\n            className=\"btnAddExp\"\n            onClick={() => {\n              dispatch(toggleNewCertFormAction());\n            }}\n          >\n            <FontAwesomeIcon icon={faPlus} />\n          </button>\n        )}\n      </div>\n      <button className=\"btnSaveChanges\" onClick={saveAllChanges}>\n        Save All Changes\n      </button>\n    </div>\n  );\n}\n","/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Teachers/Dash/TopBar.js",["664","665"],"import React, { useEffect } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { useHistory } from \"react-router-dom\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport {\n  faCommentAlt,\n  faBell,\n  faSignOutAlt,\n  faBookOpen,\n  faCalendarAlt,\n  faUserFriends,\n  faUser,\n  faStar,\n  faExclamationCircle,\n  faTimes,\n  faUsers,\n} from \"@fortawesome/free-solid-svg-icons\";\nimport {\n  storeAccountTypeAction,\n  storeTeacherAuthIDAction,\n  isLoggedInAction,\n  storeTeacherNotificationsAction,\n  toggleTeacherNotificationsWindowAction,\n  storeTeacherMeDataAction,\n} from \"../../../redux/actions\";\n\nimport \"./TopBar.css\";\nimport {\n  connectionReqQueue_Collection,\n  students_Collection,\n  teachers_Collection,\n  users_Collection,\n} from \"../../../utils/firebase\";\nimport { firebaseLooper } from \"../../../utils/tools\";\nimport RandomString from \"../../RandomString\";\nimport GetToday from \"../../GetToday\";\n\nexport default function TopBar() {\n  const teacherAuthID = useSelector((state) => state.storeTeacherAuthIDReducer);\n  const history = useHistory();\n  const dispatch = useDispatch();\n\n  // States\n  const toggleNotifWin = useSelector(\n    (state) => state.toggleTeacherNotificationsWindowReducer\n  );\n  const notifications = useSelector(\n    (state) => state.storeTeacherNotificationsReducer\n  );\n  const meData = useSelector((state) => state.storeTeacherMeDataReducer);\n\n  // GET\n  const getAllNotifications = () => {\n    teachers_Collection\n      .doc(teacherAuthID)\n      .collection(\"Notifications\")\n      .orderBy(\"Date\", \"desc\")\n      .get()\n      .then((snapshot) => {\n        const notifData = firebaseLooper(snapshot);\n        dispatch(storeTeacherNotificationsAction(notifData));\n      })\n      .catch((err) => console.log(err));\n  };\n  const getMeData = () => {\n    users_Collection\n      .where(\"AuthID\", \"==\", teacherAuthID)\n      .get()\n      .then((snapshot) => {\n        const myData = firebaseLooper(snapshot);\n        myData.forEach((me) => {\n          dispatch(storeTeacherMeDataAction(me));\n        });\n      })\n      .catch((err) => console.log(err));\n  };\n\n  // HANDLE\n  const handleNotificationsList = () => {\n    return notifications.map((notif, i) => {\n      return (\n        <div className=\"notifPanel\" key={i}>\n          <div className=\"topPanel\">\n            <FontAwesomeIcon\n              className=\"iconNotif\"\n              icon={\n                notif.Icon === \"faBell\"\n                  ? faBell\n                  : notif.Icon === \"faUser\"\n                  ? faUser\n                  : notif.Icon === \"faUsers\"\n                  ? faUsers\n                  : notif.Icon === \"faStar\"\n                  ? faStar\n                  : notif.Icon === \"faExclamationCircle\"\n                  ? faExclamationCircle\n                  : null\n              }\n            />\n            <p className=\"notifText\">{notif.Text}</p>\n            <p className=\"notifDate\">\n              {notif.Date ? notif.Date.toDate().toString().substr(4, 11) : null}\n            </p>\n            <button\n              id={notif.id}\n              onClick={removeNotification}\n              className=\"notifDel\"\n            >\n              <FontAwesomeIcon className=\"notifDelIcon\" icon={faTimes} />\n            </button>\n          </div>\n          <div className=\"bottomPanel\">\n            {notif.Action === \"connrequest\" ? (\n              <div className=\"btnsNotifReq\">\n                <button\n                  id={notif.id}\n                  onClick={onAcceptConnRequest}\n                  className=\"btnReq reqAccept\"\n                >\n                  Accept\n                </button>\n                <button\n                  id={notif.id}\n                  onClick={onDeclineConnRequest}\n                  className=\"btnReq reqDecline\"\n                >\n                  Decline\n                </button>\n              </div>\n            ) : notif.Action === \"navigate\" ? (\n              <div className=\"btnNotifNav\">\n                <button className=\"btnReq notifNav\">Go to Page</button>\n              </div>\n            ) : null}\n          </div>\n        </div>\n      );\n    });\n  };\n\n  // REQUESTS\n  const onAcceptConnRequest = (event) => {\n    const notifID = event.target.getAttribute(\"id\");\n\n    // Get my data\n    users_Collection\n      .where(\"AuthID\", \"==\", teacherAuthID)\n      .get()\n      .then((snapshot) => {\n        const myData = firebaseLooper(snapshot);\n        myData.forEach((me) => {\n          connectionReqQueue_Collection\n            .where(\"ConnID\", \"==\", teacherAuthID)\n            .get()\n            .then((snapshot) => {\n              const connData = firebaseLooper(snapshot);\n              connData.forEach((s) => {\n                users_Collection\n                  .where(\"AuthID\", \"==\", s.SenderID)\n                  .get()\n                  .then((snapshot) => {\n                    const senderUserData = firebaseLooper(snapshot);\n                    senderUserData.forEach((sender) => {\n                      const rand1 = RandomString();\n                      const rand2 = RandomString();\n                      const newNotifID = `Notif${rand1}${rand2}`;\n                      const connID = `Conn${rand1}${rand2}`;\n\n                      if (sender.AccountType === \"Student\") {\n                        students_Collection\n                          .doc(sender.AuthID)\n                          .collection(\"Notifications\")\n                          .doc(newNotifID)\n                          .set({\n                            Action: \"\",\n                            Icon: \"faUser\",\n                            Text: `${me.FirstName} ${me.LastName} has accepted your request to connect.`,\n                            Date: GetToday(),\n                          })\n                          .catch((err) => console.log(err));\n\n                        students_Collection\n                          .doc(sender.AuthID)\n                          .collection(\"Connections\")\n                          .doc(connID)\n                          .set({\n                            FirstName: me.FirstName,\n                            LastName: me.LastName,\n                            Email: me.Email,\n                            AuthID: me.AuthID,\n                          })\n                          .catch((err) => console.log(err));\n                      } else if (sender.AccountType === \"Teacher\") {\n                        teachers_Collection\n                          .doc(sender.AuthID)\n                          .collection(\"Notifications\")\n                          .doc(newNotifID)\n                          .set({\n                            Action: \"\",\n                            Icon: \"faUser\",\n                            Text: `${me.FirstName} ${me.LastName} has accepted your request to connect.`,\n                            Date: GetToday(),\n                          })\n                          .catch((err) => console.log(err));\n\n                        teachers_Collection\n                          .doc(sender.AuthID)\n                          .collection(\"Connections\")\n                          .doc(connID)\n                          .set({\n                            FirstName: me.FirstName,\n                            LastName: me.LastName,\n                            Email: me.Email,\n                            AuthID: me.AuthID,\n                          })\n                          .catch((err) => console.log(err));\n                      }\n\n                      teachers_Collection\n                        .doc(teacherAuthID)\n                        .collection(\"Connections\")\n                        .doc(connID)\n                        .set({\n                          FirstName: sender.FirstName,\n                          LastName: sender.LastName,\n                          Email: sender.Email,\n                          AuthID: sender.AuthID,\n                        })\n                        .catch((err) => console.log(err));\n                    });\n                  })\n                  .catch((err) => console.log(err));\n\n                connectionReqQueue_Collection\n                  .where(\"ConnID\", \"==\", teacherAuthID)\n                  .get()\n                  .then((snapshot) => {\n                    const myConnData = firebaseLooper(snapshot);\n                    myConnData.forEach((myConn) => {\n                      connectionReqQueue_Collection\n                        .doc(myConn.id)\n                        .delete()\n                        .catch((err) => console.log(err));\n                    });\n                  })\n                  .catch((err) => console.log(err));\n              });\n            })\n            .catch((err) => console.log(err));\n        });\n      })\n      .catch((err) => console.log(err));\n\n    // Remove Notification\n    teachers_Collection\n      .doc(teacherAuthID)\n      .collection(\"Notifications\")\n      .doc(notifID)\n      .delete()\n      .catch((err) => console.log(err));\n\n    // Dispatch\n    const allNotifs = [...notifications];\n    const filtered = allNotifs.filter((n) => n.id !== notifID);\n    dispatch(storeTeacherNotificationsAction(filtered));\n  };\n  const onDeclineConnRequest = (event) => {\n    const notifID = event.target.getAttribute(\"id\");\n  };\n\n  // REMOVE\n  const removeNotification = (event) => {\n    const notifID = event.target.getAttribute(\"id\");\n\n    notifications.forEach((n) => {\n      if (n.id === notifID) {\n        if (n.Action === \"\") {\n          teachers_Collection\n            .doc(teacherAuthID)\n            .collection(\"Notifications\")\n            .doc(n.id)\n            .delete()\n            .catch((err) => console.log(err));\n        } else if (n.Action === \"connrequest\") {\n          // What to do if you close conn req\n        }\n      }\n    });\n\n    const allNotifs = [...notifications];\n    const filtered = allNotifs.filter((n) => n.id !== notifID);\n\n    dispatch(storeTeacherNotificationsAction(filtered));\n  };\n\n  useEffect(() => {\n    if (!teacherAuthID) {\n      history.push(\"/teacherdash\");\n      return;\n    }\n\n    getAllNotifications();\n    getMeData();\n  }, []);\n\n  const onLogOut = () => {\n    dispatch(storeAccountTypeAction(\"\"));\n    dispatch(storeTeacherAuthIDAction(\"\"));\n    dispatch(isLoggedInAction());\n    history.push(\"/login\");\n  };\n\n  return (\n    <div className=\"topbar-wrapper\">\n      <div>\n        <button class=\"btn-topbar\">\n          <FontAwesomeIcon icon={faCommentAlt} />\n        </button>\n        <button class=\"btn-topbar\">\n          <FontAwesomeIcon icon={faBookOpen} />\n        </button>\n        <button class=\"btn-topbar\">\n          <FontAwesomeIcon icon={faCalendarAlt} />\n        </button>\n        <button class=\"btn-topbar\">\n          <FontAwesomeIcon icon={faUserFriends} />\n        </button>\n      </div>\n      <div id=\"search-input\">\n        <input id=\"tbSearch\" type=\"text\" placeholder=\"Search...\" />\n      </div>\n      <div>\n        <button\n          onClick={() => dispatch(toggleTeacherNotificationsWindowAction())}\n          id=\"btnNotif\"\n          class=\"btn-topbar\"\n        >\n          <FontAwesomeIcon icon={faBell} />\n        </button>\n        {toggleNotifWin ? (\n          <div id=\"winNotifications\">{handleNotificationsList()}</div>\n        ) : null}\n      </div>\n      <div className=\"topbar-user\">\n        <p>\n          {meData.FirstName} {meData.LastName}\n        </p>\n        <p>{meData.AccountType}</p>\n      </div>\n      <div>\n        <button onClick={onLogOut} class=\"btn-topbar red\">\n          <FontAwesomeIcon icon={faSignOutAlt} />\n        </button>\n      </div>\n    </div>\n  );\n}\n","/Users/jesusjimenez/Creative/MusicProject/musicapp/src/App.js",["666","667"],"/Users/jesusjimenez/Creative/MusicProject/musicapp/src/index.js",[],"/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Students/Profile/StudentProfileMain.js",["668","669"],"import React, { useEffect } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { useHistory } from \"react-router-dom\";\nimport { Switch, Route, Link, useRouteMatch } from \"react-router-dom\";\n\nimport TopBar from \"../TopBar\";\nimport Footer from \"../Footer\";\nimport StudentProfileFeedCreate from \"./StudentProfileFeedCreate\";\nimport StudentProfileFeedView from \"./StudentProfileFeedView\";\nimport StudentProfileFeedEdit from \"./StudentProfileFeedEdit\";\nimport StudentProfileAboutView from \"./StudentProfileAboutView\";\nimport StudentProfileAboutEdit from \"./StudentProfileAboutEdit\";\nimport StudentProfileAwardsView from \"./StudentProfileAwardsView\";\nimport StudentProfileAwardsEdit from \"./StudentProfileAwardsEdit\";\nimport StudentProfileReviewsView from \"./StudentProfileReviewsView\";\nimport StudentProfileReviewsEdit from \"./StudentProfileReviewsEdit\";\nimport StudentProfileReviewsCreate from \"./StudentProfileReviewsCreate\";\n\nexport default function StudentProfileMain() {\n  const studentAuthID = useSelector((state) => state.storeStudentAuthIDReducer);\n  const user = useSelector((state) => state.storeStudentUserDataReducer);\n  const history = useHistory();\n  const dispatch = useDispatch();\n  const { url } = useRouteMatch();\n\n  useEffect(() => {\n    if (!studentAuthID) {\n      history.push(\"/studentdash\");\n      return;\n    }\n  }, [user]);\n\n  return (\n    <div>\n      {/* Top Bar */}\n      <div>\n        <TopBar />\n      </div>\n\n      {/* Cover Section */}\n      <div className=\"content\">\n        <div className=\"profile-cover\">\n          <div className=\"text-cover\">\n            <h2>{`${user.FirstName} ${user.LastName}`}</h2>\n            <p>{user.AccountType}</p>\n          </div>\n        </div>\n\n        {/* Profile Options */}\n\n        {/* Bottom Nav */}\n        <div className=\"profile-nav\">\n          <ul style={{ display: \"flex\" }}>\n            <li>\n              <Link className=\"profile-Link\" id=\"link-feed\" to={`${url}/feed`}>\n                Feed\n              </Link>\n            </li>\n            <br />\n            <li>\n              <Link\n                className=\"profile-Link\"\n                id=\"link-about\"\n                to={`${url}/about`}\n              >\n                About\n              </Link>\n            </li>\n            <br />\n            <li>\n              <Link\n                className=\"profile-Link\"\n                id=\"link-awards\"\n                to={`${url}/awards`}\n              >\n                Awards\n              </Link>\n            </li>\n            <br />\n            <li>\n              <Link\n                className=\"profile-Link\"\n                id=\"link-gallery\"\n                to={`${url}/gallery`}\n              >\n                Gallery\n              </Link>\n            </li>\n            <br />\n            {user.AccountType === \"Teacher\" ? (\n              <li>\n                <Link\n                  className=\"profile-Link\"\n                  id=\"link-reviews\"\n                  to={`${url}/reviews`}\n                >\n                  Reviews\n                </Link>\n              </li>\n            ) : null}\n            <br />\n          </ul>\n        </div>\n\n        <div>\n          {/* ********************** */}\n\n          {/* Switch */}\n          <Switch>\n            {/* Feed */}\n            <Route path={`${url}/feed`}>\n              <StudentProfileFeedView />\n            </Route>\n            <Route path={`${url}/feed-edit`}>\n              <StudentProfileFeedEdit />\n            </Route>\n            <Route path={`${url}/feed-create`}>\n              <StudentProfileFeedCreate />\n            </Route>\n\n            {/* About */}\n            <Route path={`${url}/about`}>\n              <StudentProfileAboutView />\n            </Route>\n            <Route path={`${url}/about-edit`}>\n              <StudentProfileAboutEdit />\n            </Route>\n\n            {/* Awards */}\n            <Route path={`${url}/awards`}>\n              <StudentProfileAwardsView />\n            </Route>\n            <Route path={`${url}/awards-edit`}>\n              <StudentProfileAwardsEdit />\n            </Route>\n\n            {/* Reviews */}\n            <Route path={`${url}/reviews`}>\n              <StudentProfileReviewsView />\n            </Route>\n            <Route path={`${url}/reviews-edit`}>\n              <StudentProfileReviewsEdit />\n            </Route>\n            <Route path={`${url}/reviews-create`}>\n              <StudentProfileReviewsCreate />\n            </Route>\n          </Switch>\n        </div>\n      </div>\n      {/* Footer */}\n      <div>\n        <Footer />\n      </div>\n    </div>\n  );\n}\n","/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Students/Messages/StudentMessageThreadView.js",["670","671"],"import React, { useEffect } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { useHistory } from \"react-router-dom\";\n\nimport TopBar from \"../TopBar\";\nimport Footer from \"../Footer\";\nimport RandomString from \"../../RandomString\";\nimport GetToday from \"../../GetToday\";\nimport {\n  students_Collection,\n  teachers_Collection,\n} from \"../../../utils/firebase\";\nimport { storeStudentSingleThreadAction } from \"../../../redux/actions\";\nimport { firebaseLooper } from \"../../../utils/tools\";\n\nexport default function StudentMessageThreadView() {\n  const studentAuthID = useSelector((state) => state.storeStudentAuthIDReducer);\n  const user = useSelector((state) => state.storeStudentUserDataReducer);\n  const history = useHistory();\n  const dispatch = useDispatch();\n\n  const thread = useSelector((state) => state.storeStudentSingleThreadReducer);\n\n  //   HANDLE\n  const handleMessages = () => {\n    if (thread.Messages) {\n      return thread.Messages.map((mess, i) => {\n        return (\n          <div key={i}>\n            <h4\n              style={\n                mess.Sender === studentAuthID\n                  ? { color: \"blue\" }\n                  : { color: \"rgba(0,0,0,0.6)\" }\n              }\n            >\n              {mess.Sender}\n            </h4>\n            <p>{mess.Text}</p>\n          </div>\n        );\n      });\n    }\n  };\n\n  //   POST\n  const sendMessage = () => {\n    const message = document.querySelector(\"#tbMessage\").value;\n    const rand1 = RandomString();\n    const rand2 = RandomString();\n    const messID = `Mess${rand1}${rand2}`;\n    // Save to Teacher DB\n    students_Collection\n      .doc(studentAuthID)\n      .collection(\"Messages\")\n      .doc(thread.id)\n      .collection(\"MessageBlocks\")\n      .doc(messID)\n      .set({\n        Sender: studentAuthID,\n        Text: message,\n        Receiver: thread.Recipient,\n        Date: GetToday(),\n      })\n      .catch((err) => console.log(err));\n\n    // Save to Teacher DB\n    teachers_Collection\n      .doc(thread.Recipient)\n      .collection(\"Messages\")\n      .where(\"Recipient\", \"==\", studentAuthID)\n      .get()\n      .then((snapshot) => {\n        const data = firebaseLooper(snapshot);\n        data.forEach((d) => {\n          if (d.Recipient === studentAuthID) {\n            teachers_Collection\n              .doc(thread.Recipient)\n              .collection(\"Messages\")\n              .doc(d.id)\n              .collection(\"MessageBlocks\")\n              .doc(messID)\n              .set({\n                Sender: studentAuthID,\n                Text: message,\n                Receiver: thread.Recipient,\n                Date: GetToday(),\n              })\n              .catch((err) => console.log(err));\n          }\n        });\n      })\n      .catch((err) => console.log(err));\n\n    //   Dispatch\n    let allMess = [...thread.Messages];\n    allMess.push({\n      id: messID,\n      Sender: studentAuthID,\n      Text: message,\n      Receiver: thread.Recipient,\n      Date: GetToday(),\n    });\n\n    const tempObj = { ...thread };\n    tempObj.Messages = allMess;\n\n    dispatch(storeStudentSingleThreadAction(tempObj));\n    document.querySelector(\"#tbMessage\").value = \"\";\n  };\n\n  useEffect(() => {\n    if (!studentAuthID) {\n      history.push(\"/studentdash\");\n      return;\n    }\n  }, []);\n  return (\n    <div>\n      {/* Top Bar */}\n      <div>\n        <TopBar />\n      </div>\n\n      <div>\n        <button onClick={() => history.push(\"/student-messages\")}>Back</button>\n        <h1>Recipient: {thread.Recipient}</h1>\n\n        {/* Messaages */}\n        <div>{handleMessages()}</div>\n\n        {/* input */}\n        <div>\n          <input\n            id=\"tbMessage\"\n            type=\"text\"\n            placeholder=\"Type message here...\"\n          />\n          <button onClick={sendMessage}>Send</button>\n        </div>\n      </div>\n\n      {/* Footer */}\n      <div>\n        <Footer />\n      </div>\n    </div>\n  );\n}\n","/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Teachers/Groups/GroupAboutView.js",["672","673"],"import React, { useEffect } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { useHistory } from \"react-router-dom\";\n\nexport default function GroupAboutView() {\n  const teacherAuthID = useSelector((state) => state.storeTeacherAuthIDReducer);\n  const history = useHistory();\n  const dispatch = useDispatch();\n\n  const group = useSelector((state) => state.storeSingleGroupReducer);\n\n  useEffect(() => {\n    if (!teacherAuthID) {\n      history.push(\"/teacherdash\");\n      return;\n    }\n  }, []);\n  return (\n    <div>\n      <div>\n        <h3>Host: {group.Host}</h3>\n      </div>\n\n      <div>\n        <p>{group.Desc}</p>\n        <button onClick={() => history.push(\"/teacher-group-page/about-edit\")}>\n          Edit\n        </button>\n      </div>\n    </div>\n  );\n}\n",["674","675"],"/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Teachers/Statistics/StudentStats.js",["676"],"import React, { useEffect } from \"react\";\n\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useHistory } from \"react-router-dom\";\n\nimport { statisticsObjectAction } from \"../../../redux/actions\";\n\nexport default function StudentStats() {\n  const history = useHistory();\n  const dispatch = useDispatch();\n\n  const teacherAuthID = useSelector((state) => state.storeTeacherAuthIDReducer);\n  const storageState = useSelector(\n    (state) => state.storeTeacherStatisticsGeneralInfoReducer\n  );\n  const storageObj = useSelector((state) => state.statisticsObjectReducer);\n\n  const getStorageObj = () => {\n    storageState.forEach((obj) => {\n      if (obj.id === \"StudentStats\") {\n        dispatch(statisticsObjectAction(obj));\n      }\n    });\n  };\n\n  useEffect(() => {\n    if (!teacherAuthID) {\n      history.push(\"/teacherdash\");\n    }\n    getStorageObj();\n  }, []);\n  return (\n    <div>\n      \n      <h1>Student Stats</h1>\n      <hr/>\n      <p># of Students: {storageObj.Num}</p>\n    </div>\n  );\n}\n","/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Teachers/Statistics/StorageStats.js",["677"],"import React, { useEffect } from \"react\";\n\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useHistory } from \"react-router-dom\";\n\nimport {statisticsObjectAction} from '../../../redux/actions';\n\nexport default function StorageStats() {\n  const history = useHistory();\n  const dispatch = useDispatch();\n  \n  const teacherAuthID = useSelector((state) => state.storeTeacherAuthIDReducer);\n  const storageState = useSelector(\n    (state) => state.storeTeacherStatisticsGeneralInfoReducer\n  );\n  const storageObj = useSelector(state => state.statisticsObjectReducer);\n\n  const getStorageObj = () => {\n    storageState.forEach((obj) => {\n      if (obj.id === 'StorageStats') {\n        dispatch(statisticsObjectAction(obj));\n      }\n    })\n  }\n\n  useEffect(() => {\n    if (!teacherAuthID) {\n      history.push(\"/teacherdash\");\n    }\n    getStorageObj();\n  }, []);\n\n  return (\n    <div>\n      <div>\n        <h1>Storage Statistics</h1>\n        <hr />\n        <p>Usage: {storageObj.Usage} MB</p>\n      </div>\n    </div>\n  );\n}\n",["678","679"],"/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Teachers/Profile/ProfileAboutView.js",["680","681"],"import React, { useEffect } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { useHistory } from \"react-router-dom\";\nimport {\n  storeProfileAboutDataAction,\n  storeProfileExperienceDataAction,\n} from \"../../../redux/actions\";\nimport {\n  students_Collection,\n  teachers_Collection,\n} from \"../../../utils/firebase\";\nimport { firebaseLooper } from \"../../../utils/tools\";\n\nexport default function ProfileAboutView() {\n  const teacherAuthID = useSelector((state) => state.storeTeacherAuthIDReducer);\n  const history = useHistory();\n  const dispatch = useDispatch();\n\n  const about = useSelector((state) => state.storeProfileAboutDataReducer);\n  const exp = useSelector((state) => state.storeProfileExperienceDataReducer);\n\n  const user = useSelector((state) => state.userDataReducer);\n  const meData = useSelector((state) => state.storeTeacherMeDataReducer);\n\n  // GET\n  const getAllAboutData = () => {\n    let profile_Collection;\n\n    if (user.AccountType === \"Student\") {\n      profile_Collection = students_Collection\n        .doc(user.AuthID)\n        .collection(\"Profile\");\n    } else if (user.AccountType === \"Teacher\") {\n      profile_Collection = teachers_Collection\n        .doc(user.AuthID)\n        .collection(\"Profile\");\n    }\n\n    profile_Collection\n      .get()\n      .then((snapshot) => {\n        const data = firebaseLooper(snapshot);\n        data.forEach((d) => {\n          if (d.id === \"About\") {\n            dispatch(storeProfileAboutDataAction(d));\n          }\n        });\n      })\n      .catch((err) => console.log(err));\n  };\n  const getAllExperienceData = () => {\n    let experience_Collection;\n\n    if (user.AccountType === \"Student\") {\n      experience_Collection = students_Collection\n        .doc(user.AuthID)\n        .collection(\"Profile\")\n        .doc(\"Experience\")\n        .collection(\"ExpBlocks\");\n    } else if (user.AccountType === \"Teacher\") {\n      experience_Collection = teachers_Collection\n        .doc(user.AuthID)\n        .collection(\"Profile\")\n        .doc(\"Experience\")\n        .collection(\"ExpBlocks\");\n    }\n\n    experience_Collection\n      .get()\n      .then((snapshot) => {\n        const data = firebaseLooper(snapshot);\n        dispatch(storeProfileExperienceDataAction(data));\n      })\n      .catch((err) => console.log(err));\n  };\n\n  // HANDLE\n  const handleCurrPage = () => {\n    let feedBtn = document.querySelector(\"#link-feed\");\n    feedBtn.classList.remove(\"navy-back\");\n\n    let aboutBtn = document.querySelector(\"#link-about\");\n    aboutBtn.classList.add(\"navy-back\");\n\n    let awardsBtn = document.querySelector(\"#link-awards\");\n    awardsBtn.classList.remove(\"navy-back\");\n\n    let galleryBtn = document.querySelector(\"#link-gallery\");\n    galleryBtn.classList.remove(\"navy-back\");\n\n    if (user.AccountType === \"Teacher\") {\n      let reviewsBtn = document.querySelector(\"#link-reviews\");\n      reviewsBtn.classList.remove(\"navy-back\");\n    }\n  };\n\n  useEffect(() => {\n    if (!teacherAuthID) {\n      history.push(\"/teacherdash\");\n      return;\n    }\n    window.scrollTo(0, 0);\n    getAllAboutData();\n    getAllExperienceData();\n    handleCurrPage();\n  }, []);\n  return (\n    <div>\n      {user.AuthID === teacherAuthID ? (\n        <button\n          className=\"btn-newPost\"\n          onClick={() => history.push(\"/teacher-profile/edit-about\")}\n        >\n          Edit\n        </button>\n      ) : null}\n      <div className=\"about-section\">\n        <h2>About</h2>\n        <p>{about.About}</p>\n      </div>\n      <div className=\"about-section\">\n        <h2>Experience</h2>\n        {exp.map((ex, i) => {\n          return (\n            <div className=\"exp-section\" key={i}>\n              <h3>{ex.Institution}</h3>\n              <p>{ex.Desc}</p>\n              <div className=\"about-dates\">\n                <p>\n                  <span className=\"about-date\">Started:</span>{\" \"}\n                  {ex.Start.toDate().toString().substr(4, 11)}\n                </p>\n                <p>\n                  <span className=\"about-date\">Ended:</span>{\" \"}\n                  {ex.End.toDate().toString().substr(4, 11)}\n                </p>\n              </div>\n            </div>\n          );\n        })}\n      </div>\n      <div className=\"about-section personal-section\">\n        <h2>Personal</h2>\n        <p>\n          <span className=\"personal-p\">Email:</span> {about.Email}\n        </p>\n        <p>\n          <span className=\"personal-p\">Location:</span> {about.Location}\n        </p>\n        <p>\n          <span className=\"personal-p\">Instruments:</span>{\" \"}\n        </p>\n        {about.Instruments ? (\n          <div>\n            <ul className=\"about-inst\">\n              {about.Instruments.map((ins, i) => {\n                return <li key={i}>{ins}</li>;\n              })}\n            </ul>\n            <p>\n              <span className=\"personal-p\">Joined:</span>{\" \"}\n              {about.Joined.toDate().toString().substr(4, 11)}\n            </p>\n          </div>\n        ) : null}\n      </div>\n    </div>\n  );\n}\n","/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Teachers/Dash/RecentActivity.js",[],["682","683"],"/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Teachers/Dash/UpcomingEvents.js",[],"/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Teachers/Articles/ArticleBlock.js",[],"/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Teachers/Groups/GroupFeedView.js",["684"],"import React, { useEffect } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { useHistory } from \"react-router-dom\";\nimport {\n  storeGroupFeedPostsAction,\n  storeSingleGroupFeedPostAction,\n} from \"../../../redux/actions\";\n\nimport { groups_Collection } from \"../../../utils/firebase\";\nimport { firebaseLooper } from \"../../../utils/tools\";\n\nimport RandomString from \"../../RandomString\";\nimport GetToday from \"../../GetToday\";\n\nexport default function GroupFeedView() {\n  const teacherAuthID = useSelector((state) => state.storeTeacherAuthIDReducer);\n  const history = useHistory();\n  const dispatch = useDispatch();\n\n  const group = useSelector((state) => state.storeSingleGroupReducer);\n  const posts = useSelector((state) => state.storeGroupFeedPostsReducer);\n\n  const getAllPosts = () => {\n    groups_Collection\n      .doc(group.id)\n      .collection(\"Posts\")\n      .get()\n      .then((snapshot) => {\n        const posts = firebaseLooper(snapshot);\n        const allPosts = [];\n        posts.forEach((post) => {\n          if (post.Poster) {\n            allPosts.push(post);\n          }\n        });\n        dispatch(storeGroupFeedPostsAction(allPosts));\n      })\n      .catch((err) => console.log(err));\n  };\n\n  const handleFeedPosts = () => {\n    return posts.map((post, i) => {\n      return (\n        <div key={i}>\n          <h3>{post.Poster}</h3>\n          <p>{post.Text}</p>\n          <p>{post.Date.toDate().toString().substr(4, 11)}</p>\n          {post.Poster === teacherAuthID ? (\n            <div>\n              <button id={post.id} onClick={navigateEdit}>\n                Edit\n              </button>\n              <button id={post.id} onClick={removePost}>\n                Remove\n              </button>\n            </div>\n          ) : null}\n        </div>\n      );\n    });\n  };\n\n  const createPost = () => {\n    const postText = document.querySelector(\"#taPostText\").value;\n\n    // Send to DB\n    const rand1 = RandomString();\n    const rand2 = RandomString();\n    const postID = `Post${rand1}${rand2}`;\n    const commentID = `Comment${rand1}${rand2}`;\n\n    groups_Collection\n      .doc(group.id)\n      .collection(\"Posts\")\n      .doc(postID)\n      .set({\n        Poster: teacherAuthID,\n        Text: postText,\n        Date: GetToday(),\n      })\n      .catch((err) => console.log(err));\n\n    groups_Collection\n      .doc(group.id)\n      .collection(\"Posts\")\n      .doc(postID)\n      .collection(\"Comments\")\n      .doc(commentID)\n      .set({})\n      .catch((err) => console.log(err));\n\n    // Dispatch\n    const allPosts = [...posts];\n    allPosts.push({\n      id: postID,\n      Poster: teacherAuthID,\n      Text: postText,\n      Date: GetToday(),\n    });\n    dispatch(storeGroupFeedPostsAction(allPosts));\n\n    document.querySelector(\"#taPostText\").value = \"\";\n  };\n\n  const removePost = (event) => {\n    const postID = event.target.getAttribute(\"id\");\n\n    // Remove from DB\n    groups_Collection\n      .doc(group.id)\n      .collection(\"Posts\")\n      .doc(postID)\n      .delete()\n      .catch((err) => console.log(err));\n\n    // Dispatch\n    const groupPosts = [...posts];\n    const filtered = groupPosts.filter((post) => post.id !== postID);\n\n    dispatch(storeGroupFeedPostsAction(filtered));\n  };\n\n  const navigateEdit = (event) => {\n    const postID = event.target.getAttribute(\"id\");\n\n    posts.forEach((post) => {\n      if (post.id === postID) {\n        dispatch(storeSingleGroupFeedPostAction(post));\n      }\n    });\n\n    history.push(\"/teacher-group-page/feed-edit\");\n  };\n\n  useEffect(() => {\n    if (!teacherAuthID) {\n      history.push(\"/teacherdash\");\n      return;\n    }\n\n    getAllPosts();\n  }, []);\n  return (\n    <div>\n      {/* New Post */}\n      <div>\n        <h4>Create a post.</h4>\n        <textarea id=\"taPostText\" placeholder=\"Type post here...\"></textarea>\n        <br />\n        <button onClick={createPost}>Post</button>\n      </div>\n      <hr />\n      {/* Post List */}\n      <div>{handleFeedPosts()}</div>\n    </div>\n  );\n}\n","/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Teachers/Assignments/AssignmentEdit.js",["685"],"import React, { useEffect } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { useHistory } from \"react-router-dom\";\n\nimport TopBar from \"../Dash/TopBar\";\nimport DashFooter from \"../Dash/DashFooter\";\nimport InputDateFormatter from \"../../InputDateFormatter\";\nimport FirebaseDate from \"../../FirebaseDate\";\nimport {\n  storeTeacherAssignmentAssigneesAction,\n  storeTeacherSingleAssignmentAction,\n} from \"../../../redux/actions\";\nimport {\n  students_Collection,\n  teachers_Collection,\n} from \"../../../utils/firebase\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faArrowRight, faMinus } from \"@fortawesome/free-solid-svg-icons\";\n\nexport default function AssignmentEdit() {\n  const teacherAuthID = useSelector((state) => state.storeTeacherAuthIDReducer);\n  const history = useHistory();\n  const dispatch = useDispatch();\n\n  const assignment = useSelector(\n    (state) => state.storeTeacherSingleAssignmentReducer\n  );\n\n  //   HANDLE\n  const handleAssignment = () => {\n    if (assignment.Type === \"Textual\") {\n      return (\n        <div>\n          <h3 className=\"edit-ass-head\">Assignment Prompt:</h3>\n          <textarea\n            className=\"ta\"\n            id=\"taAssText\"\n            defaultValue={assignment.Text}\n          ></textarea>\n        </div>\n      );\n    } else if (assignment.Type === \"Practice\") {\n      return (\n        <div>\n          <div>\n            <h3 className=\"edit-ass-head\">Assignment Prompt:</h3>\n            <textarea\n              className=\"ta\"\n              id=\"taAssPracText\"\n              defaultValue={assignment.Text}\n            ></textarea>\n          </div>\n          <div>\n            <h3 className=\"edit-ass-head\">Repertoire:</h3>\n            <input\n              className=\"tb\"\n              id=\"tbPracReper\"\n              type=\"text\"\n              defaultValue={assignment.Repertoire}\n            />\n          </div>\n          <div>\n            <h3 className=\"edit-ass-head\">Composer:</h3>\n            <input\n              className=\"tb\"\n              id=\"tbPracComp\"\n              type=\"text\"\n              defaultValue={assignment.Composer}\n            />\n          </div>\n          <div>\n            <h3 className=\"edit-ass-head\">Tempo</h3>\n            <input\n              className=\"tb\"\n              id=\"tbPracTempo\"\n              type=\"text\"\n              defaultValue={assignment.Tempo}\n            />\n          </div>\n          <div>\n            <h3 className=\"edit-ass-head\">Max Time</h3>\n            <input\n              className=\"tb\"\n              id=\"tbPracMaxTime\"\n              type=\"text\"\n              defaultValue={assignment.MaxTime}\n            />\n          </div>\n        </div>\n      );\n    }\n  };\n  const handleAssignees = () => {\n    if (assignment.Assignees) {\n      return assignment.Assignees.map((stud, i) => {\n        return (\n          <div className=\"assignee-list\" key={i}>\n            <FontAwesomeIcon\n              style={{ margin: \"0\", padding: \"0\", color: \"#3E00F9\" }}\n              icon={faArrowRight}\n            />\n            <p className=\"assignee-stud\">{stud}</p>\n            <button\n              id={stud}\n              class=\"btn-remove-assignee\"\n              onClick={removeAssignee}\n            >\n              <FontAwesomeIcon icon={faMinus} />\n            </button>\n          </div>\n        );\n      });\n    }\n  };\n\n  //   POST\n  const saveAllChanges = () => {\n    const assName = document.querySelector(\"#tbAssName\").value;\n    const assDue = FirebaseDate(document.querySelector(\"#daAssDue\").value);\n    const allNames = [...assignment.Assignees];\n\n    if (assignment.Type === \"Textual\") {\n      const assText = document.querySelector(\"#taAssText\").value;\n\n      // Save to DB\n      teachers_Collection\n        .doc(teacherAuthID)\n        .collection(\"Assignments\")\n        .doc(assignment.id)\n        .update({\n          Name: assName,\n          Due: assDue,\n          Text: assText,\n          Assignees: allNames,\n        })\n        .catch((err) => console.log(err));\n\n      // Dispatch\n      const newAss = {\n        ...assignment,\n        Name: assName,\n        Due: assDue,\n        Text: assText,\n        Assignees: allNames,\n      };\n\n      dispatch(storeTeacherSingleAssignmentAction(newAss));\n      dispatch(storeTeacherAssignmentAssigneesAction(allNames));\n    } else if (assignment.Type === \"Practice\") {\n      const assPrompt = document.querySelector(\"#taAssPracText\").value;\n      const assReper = document.querySelector(\"#tbPracReper\").value;\n      const assComp = document.querySelector(\"#tbPracComp\").value;\n      const assTempo = document.querySelector(\"#tbPracTempo\").value;\n      const assMaxTime = document.querySelector(\"#tbPracMaxTime\").value;\n\n      // Save to DB\n      teachers_Collection\n        .doc(teacherAuthID)\n        .collection(\"Assignments\")\n        .doc(assignment.id)\n        .update({\n          Name: assName,\n          Due: assDue,\n          Text: assPrompt,\n          Repertoire: assReper,\n          Composer: assComp,\n          Tempo: assTempo,\n          MaxTime: assMaxTime,\n          Assignees: allNames,\n        })\n        .catch((err) => console.log(err));\n\n      // Dispatch\n      const newAss = {\n        ...assignment,\n        Name: assName,\n        Due: assDue,\n        Text: assPrompt,\n        Repertoire: assReper,\n        Composer: assComp,\n        Tempo: assTempo,\n        MaxTime: assMaxTime,\n        Assignees: allNames,\n      };\n\n      dispatch(storeTeacherSingleAssignmentAction(newAss));\n      dispatch(storeTeacherAssignmentAssigneesAction(allNames));\n    }\n\n    history.push(\"/teacher-assignment-view\");\n  };\n\n  //   REMOVE\n  const removeAssignee = (event) => {\n    const name = event.target.getAttribute(\"id\");\n    const allStuds = [...assignment.Assignees];\n    const filtered = allStuds.filter((stud) => stud !== name);\n\n    // Remove from DB\n    students_Collection\n      .doc(name)\n      .collection(\"AssignmentsInfo\")\n      .doc(assignment.id)\n      .delete()\n      .catch((err) => console.log(err));\n\n    const newAss = {\n      ...assignment,\n      Assignees: filtered,\n    };\n    dispatch(storeTeacherSingleAssignmentAction(newAss));\n  };\n\n  useEffect(() => {\n    if (!teacherAuthID) {\n      history.push(\"/teacherdash\");\n      return;\n    }\n  }, []);\n  return (\n    <div>\n      {/* Top Bar */}\n      <div>\n        <TopBar />\n      </div>\n\n      <div className=\"content\">\n        <div>\n          <h1>Edit Asignment</h1>\n          <button\n            class=\"btn-back\"\n            onClick={() => history.push(\"teacher-assignment-view\")}\n          >\n            Back\n          </button>\n        </div>\n\n        {/* Edit content here */}\n\n        <div className=\"white-background\">\n          <div>\n            <h3 className=\"edit-ass-head\">Assignment Name: </h3>\n            <input\n              className=\"tb\"\n              id=\"tbAssName\"\n              type=\"text\"\n              defaultValue={assignment.Name}\n            />\n          </div>\n          <div>\n            <h3 className=\"edit-ass-head\">Due Date: </h3>\n            {assignment.Due ? (\n              <input\n                className=\"dt\"\n                id={`daAssDue`}\n                type=\"date\"\n                defaultValue={InputDateFormatter(assignment.Due)}\n              />\n            ) : null}\n          </div>\n          <div className=\"ass-type-block\">{handleAssignment()}</div>\n\n          {/* Assignees */}\n          <div>\n            <h3 className=\"edit-ass-head\">Assignees:</h3>\n            {handleAssignees()}\n          </div>\n          <br />\n        </div>\n        <button class=\"btnSaveChanges\" onClick={saveAllChanges}>\n          Save All Changes\n        </button>\n      </div>\n\n      {/* Footer */}\n      <div>\n        <DashFooter />\n      </div>\n    </div>\n  );\n}\n","/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Teachers/Statistics/StatisticsMain.js",[],"/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Courses/CoursesDeck.js",[],"/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/FirebaseDate.js",[],"/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Teachers/Profile/ProfileAboutEdit.js",["686","687","688"],"import React, { useEffect } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { useHistory } from \"react-router-dom\";\nimport {\n  toggleNewExperienceFormAction,\n  storeProfileExperienceDataAction,\n  storeProfileAboutDataAction,\n  toggleNewInstrumentFormAction,\n} from \"../../../redux/actions\";\nimport { teachers_Collection } from \"../../../utils/firebase\";\nimport firebase from \"../../../utils/firebase\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport {\n  faMinus,\n  faPlus,\n  faTimesCircle,\n} from \"@fortawesome/free-solid-svg-icons\";\n\nexport default function ProfileAboutEdit() {\n  const teacherAuthID = useSelector((state) => state.storeTeacherAuthIDReducer);\n  const history = useHistory();\n  const dispatch = useDispatch();\n\n  const about = useSelector((state) => state.storeProfileAboutDataReducer);\n  const exp = useSelector((state) => state.storeProfileExperienceDataReducer);\n\n  const toggleExpState = useSelector(\n    (state) => state.toggleNewExperienceFormReducer\n  );\n  const toggleInsState = useSelector(\n    (state) => state.toggleNewInstrumentFormReducer\n  );\n  const user = useSelector((state) => state.userDataReducer);\n  const meData = useSelector((state) => state.storeTeacherMeDataReducer);\n\n  const saveAllChanges = () => {\n    // About Section\n    const aboutText = document.querySelector(\"#taAboutDescText\").value;\n\n    // Experience Section\n    const newExperienceArray = [];\n\n    const expCount = exp.length;\n    for (let i = 0; i < expCount; i = i + 1) {\n      const tbInstitution = document.querySelector(`#tbExpInstText${i}`).value;\n      const tbDesc = document.querySelector(`#taExpDescText${i}`).value;\n      const daStarted = document.querySelector(`#dtStarted${i}`).value;\n      const daEnded = document.querySelector(`#dtEnded${i}`).value;\n\n      const startedSplit = daStarted.split(\"-\");\n      const endedSplit = daEnded.split(\"-\");\n\n      const startedDate = firebase.firestore.Timestamp.fromDate(\n        new Date(`${startedSplit[1]} ${startedSplit[2]}, ${startedSplit[0]}`)\n      );\n      const endedDate = firebase.firestore.Timestamp.fromDate(\n        new Date(`${endedSplit[1]} ${endedSplit[2]}, ${endedSplit[0]}`)\n      );\n\n      newExperienceArray.push({\n        id: exp[i].id,\n        Institution: tbInstitution,\n        Desc: tbDesc,\n        Start: startedDate,\n        End: endedDate,\n      });\n    }\n\n    // Personal\n    const email = document.querySelector(\"#tbEmailText\").value;\n    const location = document.querySelector(\"#tbLocationText\").value;\n\n    const insArray = [];\n    const insCount = about.Instruments.length;\n    for (let i = 0; i < insCount; i = i + 1) {\n      const tbInstrument = document.querySelector(`#tbInstruments${i}`).value;\n\n      insArray.push(tbInstrument);\n    }\n\n    // Save to DB\n    teachers_Collection\n      .doc(teacherAuthID)\n      .collection(\"Profile\")\n      .doc(\"About\")\n      .update({\n        About: aboutText,\n        Email: email,\n        Location: location,\n        Instruments: insArray,\n        Joined: about.Joined,\n      })\n      .catch((err) => console.log(err));\n\n    newExperienceArray.forEach((ex) => {\n      teachers_Collection\n        .doc(teacherAuthID)\n        .collection(\"Profile\")\n        .doc(\"Experience\")\n        .collection(\"ExpBlocks\")\n        .doc(ex.id)\n        .update({\n          Institution: ex.Institution,\n          Desc: ex.Desc,\n          Start: ex.Start,\n          End: ex.End,\n        })\n        .catch((err) => console.log(err));\n    });\n\n    // Dispatch\n    const tempAbout = {\n      About: aboutText,\n      Email: email,\n      Location: location,\n      Instruments: insArray,\n      Joined: about.Joined,\n    };\n\n    const tempExp = [...newExperienceArray];\n\n    dispatch(storeProfileAboutDataAction(tempAbout));\n    dispatch(storeProfileExperienceDataAction(tempExp));\n\n    history.push(\"/teacher-profile/about\");\n  };\n\n  const applyNewExperience = () => {\n    let rand1 = Math.random().toString(36).substring(3);\n    let rand2 = Math.random().toString(36).substring(3);\n    const expBlockID = `ExpBlock${rand1}${rand2}`;\n\n    const institution = document.querySelector(\"#tbInstText\").value;\n    const desc = document.querySelector(\"#tbDescText\").value;\n    const started = document.querySelector(\"#daStartDate\").value;\n    const ended = document.querySelector(\"#daEndDate\").value;\n\n    const startedSplit = started.split(\"-\");\n    const endedSplit = ended.split(\"-\");\n\n    const startedDate = firebase.firestore.Timestamp.fromDate(\n      new Date(`${startedSplit[1]} ${startedSplit[2]}, ${startedSplit[0]}`)\n    );\n    const endedDate = firebase.firestore.Timestamp.fromDate(\n      new Date(`${endedSplit[1]} ${endedSplit[2]}, ${endedSplit[0]}`)\n    );\n\n    // Save to database\n    teachers_Collection\n      .doc(teacherAuthID)\n      .collection(\"Profile\")\n      .doc(\"Experience\")\n      .collection(\"ExpBlocks\")\n      .doc(expBlockID)\n      .set({\n        Institution: institution,\n        Desc: desc,\n        Start: startedDate,\n        End: endedDate,\n      })\n      .catch((err) => console.log(err));\n\n    // dispatch new exp\n    const allExp = [...exp];\n\n    allExp.push({\n      id: expBlockID,\n      Institution: institution,\n      Desc: desc,\n      Start: startedDate,\n      End: endedDate,\n    });\n\n    console.log(allExp);\n\n    dispatch(storeProfileExperienceDataAction(allExp));\n    dispatch(toggleNewExperienceFormAction());\n  };\n\n  const removeExperience = (event) => {\n    const exID = event.target.getAttribute(\"id\");\n\n    teachers_Collection\n      .doc(teacherAuthID)\n      .collection(\"Profile\")\n      .doc(\"Experience\")\n      .collection(\"ExpBlocks\")\n      .doc(exID)\n      .delete()\n      .catch((err) => console.log(err));\n\n    const allExp = [...exp];\n\n    const filtered = allExp.filter((ex) => ex.id !== exID);\n\n    dispatch(storeProfileExperienceDataAction(filtered));\n  };\n\n  const removeInstrument = (event) => {\n    const instrument = event.target.getAttribute(\"id\");\n    const allInstruments = [...about.Instruments];\n\n    const newList = allInstruments.filter((ins) => ins !== instrument);\n\n    const newObj = {\n      ...about,\n      Instruments: newList,\n    };\n\n    // Remove from DB\n    teachers_Collection\n      .doc(teacherAuthID)\n      .collection(\"Profile\")\n      .doc(\"About\")\n      .update({\n        Instruments: firebase.firestore.FieldValue.arrayRemove(instrument),\n      })\n      .catch((err) => console.log(err));\n\n    dispatch(storeProfileAboutDataAction(newObj));\n  };\n\n  const addInstrument = () => {\n    const newIns = document.querySelector(\"#tbNewInsText\").value;\n\n    // Add to DB\n    teachers_Collection\n      .doc(teacherAuthID)\n      .collection(\"Profile\")\n      .doc(\"About\")\n      .update({\n        Instruments: firebase.firestore.FieldValue.arrayUnion(newIns),\n      })\n      .catch((err) => console.log(err));\n\n    // dispatch\n    const newInstruments = [...about.Instruments];\n    newInstruments.push(newIns);\n\n    const newObj = {\n      ...about,\n      Instruments: newInstruments,\n    };\n\n    dispatch(storeProfileAboutDataAction(newObj));\n    dispatch(toggleNewInstrumentFormAction());\n  };\n\n  // HANDLE\n  const handleCurrPage = () => {\n    let feedBtn = document.querySelector(\"#link-feed\");\n    feedBtn.classList.remove(\"navy-back\");\n\n    let aboutBtn = document.querySelector(\"#link-about\");\n    aboutBtn.classList.add(\"navy-back\");\n\n    let awardsBtn = document.querySelector(\"#link-awards\");\n    awardsBtn.classList.remove(\"navy-back\");\n\n    let galleryBtn = document.querySelector(\"#link-gallery\");\n    galleryBtn.classList.remove(\"navy-back\");\n\n    if (user.AccountType === \"Teacher\") {\n      let reviewsBtn = document.querySelector(\"#link-reviews\");\n      reviewsBtn.classList.remove(\"navy-back\");\n    }\n  };\n\n  useEffect(() => {\n    if (!teacherAuthID) {\n      history.push(\"/teacherdash\");\n      return;\n    }\n\n    handleCurrPage();\n  }, []);\n  return (\n    <div>\n      <div>\n        <button\n          className=\"btn-back maroon-back\"\n          onClick={() => history.push(\"/teacher-profile/about\")}\n        >\n          Back\n        </button>\n      </div>\n\n      <div>\n        <div className=\"white-background\">\n          <h2 className=\"about-edit-head\">About</h2>\n          <textarea\n            className=\"taAboutDescText\"\n            id=\"taAboutDescText\"\n            defaultValue={about.About}\n          ></textarea>\n        </div>\n\n        <div className=\"white-background\">\n          <h2 className=\"about-edit-head\">Experience</h2>\n          {exp.map((ex, i) => {\n            const start = `${ex.Start.toDate().getFullYear()}-${\n              ex.Start.toDate().getMonth() + 1 < 10 ? \"0\" : \"\"\n            }${ex.Start.toDate().getMonth() + 1}-${\n              ex.Start.toDate().getDate() < 10 ? \"0\" : \"\"\n            }${ex.Start.toDate().getDate()}`;\n\n            const end = `${ex.End.toDate().getFullYear()}-${\n              ex.End.toDate().getMonth() + 1 < 10 ? \"0\" : \"\"\n            }${ex.End.toDate().getMonth() + 1}-${\n              ex.End.toDate().getDate() < 10 ? \"0\" : \"\"\n            }${ex.End.toDate().getDate()}`;\n\n            return (\n              <div className=\"exp-block\" key={i}>\n                <h4 className=\"about-exp-head\">Institution</h4>\n                <input\n                  className=\"tbExpInstText\"\n                  id={`tbExpInstText${i}`}\n                  type=\"text\"\n                  defaultValue={ex.Institution}\n                />\n                <h4 className=\"about-exp-head\">Description</h4>\n                <textarea\n                  className=\"taExpDescText\"\n                  id={`taExpDescText${i}`}\n                  defaultValue={ex.Desc}\n                ></textarea>\n                <h4 className=\"about-exp-head\">Started</h4>\n                <input\n                  className=\"dt\"\n                  id={`dtStarted${i}`}\n                  type=\"date\"\n                  defaultValue={start}\n                />\n                <h4 className=\"about-exp-head\">Ended</h4>\n                <input\n                  className=\"dt\"\n                  id={`dtEnded${i}`}\n                  type=\"date\"\n                  defaultValue={end}\n                />\n                <button\n                  className=\"btnRemoveExp\"\n                  id={ex.id}\n                  onClick={removeExperience}\n                >\n                  <FontAwesomeIcon icon={faMinus} />\n                </button>\n              </div>\n            );\n          })}\n\n          {toggleExpState ? (\n            <div className=\"exp-form-block\">\n              <button\n                className=\"btnCancelExpForm\"\n                onClick={() => {\n                  dispatch(toggleNewExperienceFormAction());\n                }}\n              >\n                Cancel\n              </button>\n              {/* Form */}\n              <div>\n                <h3 className=\"exp-form-head\">Institution</h3>\n                <input\n                  className=\"tbExpInstText\"\n                  id=\"tbInstText\"\n                  type=\"text\"\n                  placeholder=\"Institution\"\n                />\n              </div>\n              <div>\n                <h3 className=\"exp-form-head\">Description</h3>\n                <textarea\n                  className=\"taExpDescText\"\n                  id=\"tbDescText\"\n                  placeholder=\"Description\"\n                ></textarea>\n              </div>\n              <div>\n                <h3 className=\"exp-form-head\">Started: </h3>\n                <input className=\"dt\" id=\"daStartDate\" type=\"date\" />\n              </div>\n              <div>\n                <h3 className=\"exp-form-head\">Ended: </h3>\n                <input className=\"dt\" id=\"daEndDate\" type=\"date\" />\n              </div>\n              <div>\n                <button className=\"btnExpApply\" onClick={applyNewExperience}>\n                  Apply\n                </button>\n              </div>\n            </div>\n          ) : (\n            <button\n              className=\"btnAddExp\"\n              onClick={() => dispatch(toggleNewExperienceFormAction())}\n            >\n              <FontAwesomeIcon icon={faPlus} />\n            </button>\n          )}\n        </div>\n\n        <div className=\"white-background\">\n          <h2 className=\"about-edit-head\">Personal</h2>\n          <p className=\"about-personal-head\">Email:</p>\n          <input className=\"tbEmailText\" id=\"tbEmailText\" type=\"text\" defaultValue={about.Email} />\n          <p className=\"about-personal-head\">Location:</p>\n          <input\n          className=\"tbLocationText\"\n            id=\"tbLocationText\"\n            type=\"text\"\n            defaultValue={about.Location}\n          />\n          <p className=\"about-personal-head\">Instruments: </p>\n          {about.Instruments\n            ? about.Instruments.map((ins, i) => {\n                return (\n                  <div key={i}>\n                    <input\n                    className=\"tbInstruments\"\n                      id={`tbInstruments${i}`}\n                      type=\"text\"\n                      defaultValue={ins}\n                    />\n                    <button className=\"btnRemIns\" id={ins} onClick={removeInstrument}>\n                      <FontAwesomeIcon icon={faMinus} />\n                    </button>\n                  </div>\n                );\n              })\n            : null}\n          {about.Joined ? (\n            <div>\n              {/* Toggle Instrument Add */}\n              {toggleInsState ? (\n                <div>\n                  <div>\n                    <button\n                      onClick={() => {\n                        dispatch(toggleNewInstrumentFormAction());\n                      }}\n                    >\n                      Cancel\n                    </button>\n                  </div>\n                  <h3>Instrument</h3>\n                  <input\n                    id=\"tbNewInsText\"\n                    type=\"text\"\n                    placeholder=\"Instrument\"\n                  />\n                  <div>\n                    <button onClick={addInstrument}>Apply</button>\n                  </div>\n                </div>\n              ) : (\n                <button\n                className=\"btnAddIns\"\n                  onClick={() => {\n                    dispatch(toggleNewInstrumentFormAction());\n                  }}\n                >\n                  <FontAwesomeIcon icon={faPlus} />\n                </button>\n              )}\n\n              <p className=\"about-personal-head\">\n                Joined: {about.Joined.toDate().toString().substr(4, 11)}\n              </p>\n            </div>\n          ) : null}\n        </div>\n        <button className=\"btnSaveChanges\" onClick={saveAllChanges}>Save All Changes</button>\n      </div>\n    </div>\n  );\n}\n","/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Teachers/Assignments/AssignmentNew.js",["689"],"import React, { useEffect } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { useHistory } from \"react-router-dom\";\n\nimport TopBar from \"../Dash/TopBar\";\nimport DashFooter from \"../Dash/DashFooter\";\nimport {\n  storeTeacherNewAssignmentTypeAction,\n  storeTeacherSingleAssignmentAction,\n} from \"../../../redux/actions\";\nimport GetToday from \"../../GetToday\";\nimport InputDateFormatter from \"../../InputDateFormatter\";\nimport FirebaseDate from \"../../FirebaseDate\";\nimport { teachers_Collection } from \"../../../utils/firebase\";\nimport RandomString from \"../../RandomString\";\n\nexport default function AssignmentNew() {\n  const teacherAuthID = useSelector((state) => state.storeTeacherAuthIDReducer);\n  const history = useHistory();\n  const dispatch = useDispatch();\n\n  const assTypeState = useSelector(\n    (state) => state.storeTeacherNewAssignmentTypeReducer\n  );\n\n  // HANDLE\n  const handleAssTypeForm = () => {\n    if (assTypeState === \"textual\") {\n      return (\n        <div>\n          <h2 className=\"ass-form-head\">Textual Assignment</h2>\n          <p className=\"ass-small-text\">\n            Insert short description of how the textual assignment will be\n            displayed to the student.\n          </p>\n          <h3 className=\"ass-form-sub-head\">Prompt</h3>\n          <textarea\n            className=\"ta\"\n            id=\"taAssTextualPrompt\"\n            placeholder=\"Prompt\"\n          ></textarea>\n        </div>\n      );\n    } else if (assTypeState === \"practice\") {\n      return (\n        <div>\n          <h2 className=\"ass-form-head\">Practice Assignment</h2>\n          <p className=\"ass-small-text\">\n            Insert short description of how the pratice assignment will be\n            displayed to the student.\n          </p>\n          <h3 className=\"ass-form-sub-head\">Prompt</h3>\n          <textarea\n            className=\"ta\"\n            id=\"taAssPracticePrompt\"\n            placeholder=\"Prompt\"\n          ></textarea>\n          <h3 className=\"ass-form-sub-head\">Repertoire</h3>\n          <p\n            className=\"ass-small-desc\"\n            style={{ color: \"rgba(0,0,0,0.4)\", fontStyle: \"italic\" }}\n          >\n            \"Violin Concerto in D Major, G Major Scale (3 Octaves), Etude No.\n            12, Excerpt No. 1 Symphony No. 3\"\n          </p>\n          <input\n            className=\"tb\"\n            id=\"tbAssPracticeReper\"\n            type=\"text\"\n            placeholder=\"Repertoire\"\n          />\n          <h3 className=\"ass-form-sub-head\">Composer (optional)</h3>\n          <p\n            className=\"ass-small-desc\"\n            style={{ color: \"rgba(0,0,0,0.4)\", fontStyle: \"italic\" }}\n          >\n            \"Johann Sebastian Bach, Wolfgang Amadeus Mozart, Ludwig Van\n            Beethoven, Philip Glass\"\n          </p>\n          <input\n            className=\"tb\"\n            id=\"tbAssPracticeComp\"\n            type=\"text\"\n            placeholder=\"Composer\"\n          />\n          <h3 className=\"ass-form-sub-head\">Tempo</h3>\n          <p\n            className=\"ass-small-desc\"\n            style={{ color: \"rgba(0,0,0,0.4)\", fontStyle: \"italic\" }}\n          >\n            \"144bpm, 60bpm-100bpm, 60bpm.70bpm.80bpm\"\n          </p>\n          <input\n            className=\"tb\"\n            id=\"tbAssPracticeTempo\"\n            type=\"text\"\n            placeholder=\"Tempo\"\n          />\n          <h3 className=\"ass-form-sub-head\">Max Time for Completion</h3>\n          <p\n            className=\"ass-small-desc\"\n            style={{ color: \"rgba(0,0,0,0.4)\", fontStyle: \"italic\" }}\n          >\n            Students will not be shown this number. However, if the student\n            exceeds the maximum amount of practice for this assignment, the\n            teacher will be notified. Please enter in number form.\n          </p>\n          <input\n            className=\"tb\"\n            id=\"tbAssPracticeMax\"\n            type=\"text\"\n            placeholder=\"Max Time\"\n          />{\" \"}\n          minutes\n        </div>\n      );\n    }\n  };\n\n  //   POST\n  const saveNewAssignment = () => {\n    const rand1 = RandomString();\n    const rand2 = RandomString();\n    const assID = `Ass${rand1}${rand2}`;\n\n    const assName = document.querySelector(\"#tbAssName\").value;\n    const assDesc = document.querySelector(\"#taAssDesc\").value;\n    const assDue = FirebaseDate(document.querySelector(\"#daAssDue\").value);\n\n    if (assTypeState === \"textual\") {\n      const textPrompt = document.querySelector(\"#taAssTextualPrompt\").value;\n\n      //   Save to DB\n      teachers_Collection\n        .doc(teacherAuthID)\n        .collection(\"Assignments\")\n        .doc(assID)\n        .set({\n          Assignees: [],\n          Date: GetToday(),\n          Desc: assDesc,\n          Due: assDue,\n          Name: assName,\n          Text: textPrompt,\n          Type: \"Textual\",\n          Teacher: teacherAuthID,\n        })\n        .catch((err) => console.log(err));\n\n      // Dispatch\n      dispatch(\n        storeTeacherSingleAssignmentAction({\n          id: assID,\n          Assignees: [],\n          Date: GetToday(),\n          Desc: assDesc,\n          Due: assDue,\n          Name: assName,\n          Text: textPrompt,\n          Type: \"Textual\",\n          Teacher: teacherAuthID,\n        })\n      );\n    } else if (assTypeState === \"practice\") {\n      const pracPrompt = document.querySelector(\"#taAssPracticePrompt\").value;\n      const pracReper = document.querySelector(\"#tbAssPracticeReper\").value;\n      const pracComp = document.querySelector(\"#tbAssPracticeComp\").value;\n      const pracTempo = document.querySelector(\"#tbAssPracticeTempo\").value;\n      const pracMax = document.querySelector(\"#tbAssPracticeMax\").value;\n\n      //   Save to DB\n      teachers_Collection\n        .doc(teacherAuthID)\n        .collection(\"Assignments\")\n        .doc(assID)\n        .set({\n          Assignees: [],\n          Date: GetToday(),\n          Desc: assDesc,\n          Due: assDue,\n          Name: assName,\n          Text: pracPrompt,\n          Repertoire: pracReper,\n          Composer: pracComp,\n          Tempo: pracTempo,\n          MaxTime: pracMax,\n          Type: \"Practice\",\n        })\n        .catch((err) => console.log(err));\n\n      // Dispatch\n      dispatch(\n        storeTeacherSingleAssignmentAction({\n          id: assID,\n          Assignees: [],\n          Date: GetToday(),\n          Desc: assDesc,\n          Due: assDue,\n          Name: assName,\n          Text: pracPrompt,\n          Repertoire: pracReper,\n          Composer: pracComp,\n          Tempo: pracTempo,\n          MaxTime: pracMax,\n          Type: \"Practice\",\n        })\n      );\n    }\n\n    history.push(\"/teacher-assignment-view\");\n  };\n\n  // EVENTS\n  const OnAssType = () => {\n    const raTextual = document.querySelector(\"#raTextual\").checked;\n    const raPractice = document.querySelector(\"#raPractice\").checked;\n\n    if (raTextual) {\n      dispatch(storeTeacherNewAssignmentTypeAction(\"textual\"));\n    } else if (raPractice) {\n      dispatch(storeTeacherNewAssignmentTypeAction(\"practice\"));\n    }\n  };\n\n  useEffect(() => {\n    if (!teacherAuthID) {\n      history.push(\"/teacherdash\");\n      return;\n    }\n  }, []);\n  return (\n    <div>\n      {/* Top Bar */}\n      <div>\n        <TopBar />\n      </div>\n\n      <div className=\"content\">\n        <h1>Create New Assignment</h1>\n\n        {/* Form */}\n        <div>\n        <button\n              onClick={() => history.push(\"/teacher-assignments\")}\n              className=\"btn-back\"\n            >\n              Back\n            </button>\n          <div className=\"white-background\">\n            \n            <h3 className=\"edit-ass-head\">Assignment Name:</h3>\n            <input\n              className=\"tb\"\n              id=\"tbAssName\"\n              type=\"text\"\n              placeholder=\"Name\"\n            />\n\n            <h3 className=\"edit-ass-head\">Description:</h3>\n            <textarea\n              className=\"ta\"\n              id=\"taAssDesc\"\n              placeholder=\"Description\"\n            ></textarea>\n          </div>\n          <div className=\"white-background\">\n            <h3 className=\"edit-ass-head\">Assignment Type:</h3>\n            <div className=\"ra-ass-group\">\n              <input\n                onChange={OnAssType}\n                type=\"radio\"\n                id=\"raTextual\"\n                name=\"raAssType\"\n                value=\"Textual\"\n              />\n              <label>Textual</label>\n            </div>\n            <div className=\"ra-ass-group\">\n              {\" \"}\n              <input\n                onChange={OnAssType}\n                type=\"radio\"\n                id=\"raPractice\"\n                name=\"raAssType\"\n                value=\"Practice\"\n              />\n              <label>Practice</label>\n            </div>\n            <div className=\"ass-type-form\">{handleAssTypeForm()}</div>\n          </div>\n          <div className=\"white-background\">\n            <h3 className=\"edit-ass-head\">Due Date:</h3>\n            <input\n              className=\"dt\"\n              id=\"daAssDue\"\n              type=\"date\"\n              defaultValue={InputDateFormatter(GetToday())}\n            />\n          </div>\n          <div>\n            <button className=\"btnSaveChanges\" onClick={saveNewAssignment}>\n              Save Assignment\n            </button>\n          </div>\n        </div>\n      </div>\n\n      {/* Footer */}\n      <div>\n        <DashFooter />\n      </div>\n    </div>\n  );\n}\n","/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Teachers/Events/EventsMain.js",["690"],"import {\n  faChevronLeft,\n  faChevronRight,\n  faMinus,\n} from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport React, { useEffect } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { useHistory } from \"react-router-dom\";\nimport GetToday from \"../../GetToday\";\nimport DashFooter from \"../Dash/DashFooter\";\nimport TopBar from \"../Dash/TopBar\";\n\nimport {\n  storeTeacherEventAction,\n  storeTeacherEventCurrentMonthAction,\n  storeTeacherEventsAction,\n} from \"../../../redux/actions\";\n\nimport \"./Events.css\";\nimport { teachers_Collection } from \"../../../utils/firebase\";\nimport { firebaseLooper } from \"../../../utils/tools\";\n\nexport default function EventsMain() {\n  const teacherAuthID = useSelector((state) => state.storeTeacherAuthIDReducer);\n  const history = useHistory();\n  const dispatch = useDispatch();\n\n  const month = useSelector(\n    (state) => state.storeTeacherEventCurrentMonthReducer\n  );\n  const events = useSelector((state) => state.storeTeacherEventsReducer);\n\n  // GET\n  const getTodayMonth = () => {\n    let today = GetToday().toDate().getMonth() + 1;\n    today = getFullByNum(today);\n    dispatch(storeTeacherEventCurrentMonthAction(today));\n\n    // Also dispatch events\n    teachers_Collection\n      .doc(teacherAuthID)\n      .collection(\"Events\")\n      .orderBy(\"Start\", \"asc\")\n      .get()\n      .then((snapshot) => {\n        const eventsData = firebaseLooper(snapshot);\n\n        const eveSize = snapshot.size;\n        let eventsArr = [];\n        eventsData.forEach((eve, i) => {\n          let date = eve.Start.toDate().getMonth() + 1;\n\n          date = getFullByNum(date);\n\n          if (date === today) {\n            eventsArr.push(eve);\n          }\n\n          if (i + 1 === eveSize) {\n            dispatch(storeTeacherEventsAction(eventsArr));\n          }\n        });\n      })\n      .catch((err) => console.log(err));\n  };\n  // DATE FORMATS\n  const getFullByNum = (num) => {\n    switch (num) {\n      case 1:\n        return \"January\";\n      case 2:\n        return \"Feburary\";\n      case 3:\n        return \"March\";\n      case 4:\n        return \"April\";\n      case 5:\n        return \"May\";\n      case 6:\n        return \"June\";\n      case 7:\n        return \"July\";\n      case 8:\n        return \"August\";\n      case 9:\n        return \"September\";\n      case 10:\n        return \"October\";\n      case 11:\n        return \"November\";\n      case 12:\n        return \"December\";\n      default:\n        return \"Month does not exist.\";\n    }\n  };\n  const getNumByFull = (full) => {\n    switch (full) {\n      case \"January\":\n        return 1;\n      case \"February\":\n        return 2;\n      case \"March\":\n        return 3;\n      case \"April\":\n        return 4;\n      case \"May\":\n        return 5;\n      case \"June\":\n        return 6;\n      case \"July\":\n        return 7;\n      case \"August\":\n        return 8;\n      case \"September\":\n        return 9;\n      case \"October\":\n        return 10;\n      case \"November\":\n        return 11;\n      case \"December\":\n        return 12;\n      default:\n        return \"Month does not exist.\";\n    }\n  };\n\n  // HANDLE\n  const handleMonth = () => {\n    return <p className=\"event-curr-month\">{month}</p>;\n  };\n  const handleEvents = () => {\n    return events.map((eve, i) => {\n      return (\n        <div\n          className={`eve-block ${\n            eve.Color === \"green\"\n              ? \"eve-block-green\"\n              : eve.Color === \"blue\"\n              ? \"eve-block-blue\"\n              : eve.Color === \"red\"\n              ? \"eve-block-red\"\n              : eve.Color === \"purple\"\n              ? \"eve-block-purple\"\n              : eve.Color === \"yellow\"\n              ? \"eve-block-yellow\"\n              : null\n          }`}\n          key={i}\n        >\n          <p className=\"eve-name\">{eve.Name}</p>\n          <p className=\"eve-start\">\n            {eve.Start ? eve.Start.toDate().toString().substr(4, 11) : null} -\n          </p>\n          <p className=\"eve-end\">\n            {eve.End ? eve.End.toDate().toString().substr(4, 11) : null}\n          </p>\n\n          <button id={eve.id} onClick={navEventView} className=\"btn-eve-view\">\n            View\n          </button>\n          <button id={eve.id} onClick={removeEvent} className=\"btn-eve-del\">\n            <FontAwesomeIcon icon={faMinus} />\n          </button>\n        </div>\n      );\n    });\n  };\n\n  // CLICK\n  const goBackMonth = () => {\n    let newMonth = month;\n    let monthNum = getNumByFull(newMonth);\n    if (monthNum === 1) {\n      monthNum = 12;\n    } else {\n      monthNum = monthNum - 1;\n    }\n    newMonth = getFullByNum(monthNum);\n    dispatch(storeTeacherEventCurrentMonthAction(newMonth));\n\n    teachers_Collection\n      .doc(teacherAuthID)\n      .collection(\"Events\")\n      .orderBy(\"Start\", \"asc\")\n      .get()\n      .then((snapshot) => {\n        const eventsData = firebaseLooper(snapshot);\n        const eveSize = snapshot.size;\n        let eveArr = [];\n        eventsData.forEach((eve, i) => {\n          const date = eve.Start.toDate().getMonth() + 1;\n          if (date === monthNum) {\n            eveArr.push(eve);\n          }\n\n          if (i + 1 === eveSize) {\n            dispatch(storeTeacherEventsAction(eveArr));\n          }\n        });\n      })\n      .catch((err) => console.log(err));\n  };\n  const goForwardMonth = () => {\n    let newMonth = month;\n    let monthNum = getNumByFull(newMonth);\n    if (monthNum === 12) {\n      monthNum = 1;\n    } else {\n      monthNum = monthNum + 1;\n    }\n    newMonth = getFullByNum(monthNum);\n    dispatch(storeTeacherEventCurrentMonthAction(newMonth));\n\n    teachers_Collection\n      .doc(teacherAuthID)\n      .collection(\"Events\")\n      .orderBy(\"Start\", \"asc\")\n      .get()\n      .then((snapshot) => {\n        const eventsData = firebaseLooper(snapshot);\n        const eveSize = snapshot.size;\n        let eveArr = [];\n        eventsData.forEach((eve, i) => {\n          const date = eve.Start.toDate().getMonth() + 1;\n          if (date === monthNum) {\n            eveArr.push(eve);\n          }\n\n          if (i + 1 === eveSize) {\n            dispatch(storeTeacherEventsAction(eveArr));\n          }\n        });\n      })\n      .catch((err) => console.log(err));\n  };\n\n  // NAV\n  const navEventView = (event) => {\n    const eveID = event.currentTarget.getAttribute(\"id\");\n\n    events.forEach((eve) => {\n      if (eve.id === eveID) {\n        dispatch(storeTeacherEventAction(eve));\n      }\n    });\n\n    history.push(\"/teacher-event-view\");\n  };\n  const naveventCreate = () => {\n    history.push(\"/teacher-event-create\");\n  };\n\n  // REMOVE\n  const removeEvent = (event) => {\n    const eveID = event.currentTarget.getAttribute(\"id\");\n\n    // Remove from DB\n    teachers_Collection\n      .doc(teacherAuthID)\n      .collection(\"Events\")\n      .doc(eveID)\n      .delete()\n      .catch((err) => console.log(err));\n\n    const allEvents = [...events];\n    const filtered = allEvents.filter((e) => e.id !== eveID);\n\n    dispatch(storeTeacherEventsAction(filtered));\n  };\n\n  useEffect(() => {\n    if (!teacherAuthID) {\n      history.push(\"/teacherdash\");\n      return;\n    }\n\n    getTodayMonth();\n  }, []);\n\n  return (\n    <div>\n      {/* Top Bar */}\n      <div>\n        <TopBar />\n      </div>\n\n      <div className=\"content\">\n        <h1>Events</h1>\n        <button onClick={naveventCreate} className=\"btnCreate\">\n          Create Event\n        </button>\n        <div className=\"white-background\">\n          <div style={{ display: \"flex\" }}>\n            {/* Go Back Month */}\n            <button onClick={goBackMonth} className=\"btn-month-arrow\">\n              <FontAwesomeIcon icon={faChevronLeft} />\n            </button>\n            {/* Go Forward Month */}\n            <button onClick={goForwardMonth} className=\"btn-month-arrow\">\n              <FontAwesomeIcon icon={faChevronRight} />\n            </button>\n            {handleMonth()}\n          </div>\n        </div>\n\n        <div className=\"white-background\">{handleEvents()}</div>\n      </div>\n\n      {/* Footer */}\n      <div>\n        <DashFooter />\n      </div>\n    </div>\n  );\n}\n","/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Home/HomeCoursesDeck.js",[],["691","692"],"/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Teachers/Tutorials/TutorialsMain.js",[],"/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Students/TopBar.js",["693"],"/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Home.js",[],"/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Teachers/Dash/RecentInvoices.js",[],["694","695"],"/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Students/Courses/StudentCoursesMain.js",["696","697"],"import React, { useEffect } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { useHistory } from \"react-router-dom\";\n\nimport TopBar from \"../TopBar\";\nimport Footer from \"../Footer\";\nimport \"./StudentCourses.css\";\nimport firebase, {\n  courses_Collection,\n  students_Collection,\n  teachers_Collection,\n} from \"../../../utils/firebase\";\n\nimport { firebaseLooper } from \"../../../utils/tools\";\nimport {\n  storeStudentAllCoursesAction,\n  storeStudentSingleCourseAction,\n} from \"../../../redux/actions\";\n\nexport default function StudentCoursesMain() {\n  const studentAuthID = useSelector((state) => state.storeStudentAuthIDReducer);\n  const user = useSelector((state) => state.storeStudentUserDataReducer);\n  const history = useHistory();\n  const dispatch = useDispatch();\n\n  const courses = useSelector((state) => state.storeStudentAllCoursesReducer);\n\n  // GET\n  const getAllCourses = () => {\n    // Get Teachers\n    students_Collection\n      .doc(studentAuthID)\n      .collection(\"Teachers\")\n      .get()\n      .then((snapshot) => {\n        const teachersData = firebaseLooper(snapshot);\n        teachersData.forEach((teacher) => {\n          const teacherID = teacher.TeacherID;\n          teachers_Collection\n            .doc(teacherID)\n            .collection(\"Students\")\n            .get()\n            .then((snapshot) => {\n              const studentData = firebaseLooper(snapshot);\n              let allCourseIDs = [];\n              studentData.forEach((stud) => {\n                if (stud.id === studentAuthID) {\n                  allCourseIDs = [...stud.Courses];\n                }\n              });\n\n              let allCourses = [];\n              courses_Collection\n                .get()\n                .then((snapshot) => {\n                  const courseData = firebaseLooper(snapshot);\n                  allCourseIDs.forEach((ids) => {\n                    courseData.forEach((cour) => {\n                      if (ids === cour.id) {\n                        allCourses.push(cour);\n                      }\n                    });\n                  });\n\n                  dispatch(storeStudentAllCoursesAction(allCourses));\n                })\n                .catch((err) => console.log(err));\n            })\n            .catch((err) => console.log(err));\n        });\n      })\n      .catch((err) => console.log(err));\n  };\n\n  // HANDLE\n  const handleCourseGrid = () => {\n    return courses.map((cour, i) => {\n      return (\n        <div className=\"courseCard\" key={i}>\n          <img className=\"imgThumb\" id={`imgThumbnail${i}`} alt=\"\" />\n          <h3 className=\"courseListName\">{cour.Name}</h3>\n          <p className=\"courseListDesc\">{cour.Desc.substr(0, 160)}...</p>\n          <button id={cour.id} onClick={navCourseOverview} className=\"btnView\">\n            View\n          </button>\n        </div>\n      );\n    });\n  };\n  const handleCourseThumb = () => {\n    courses.forEach((c, i) => {\n      var storage = firebase.storage();\n      var storageRef = storage.ref(`Images/`);\n      //urll is the url for image\n      storageRef\n        .child(c.Thumbnail)\n        .getDownloadURL()\n        .then(function (url) {\n          // Or inserted into an <img> element:\n          let img = document.getElementById(`imgThumbnail${i}`);\n          img.src = url;\n        })\n        .catch((err) => console.log(err));\n    });\n  };\n\n  // NAV\n  const navCourseOverview = (event) => {\n    const courseID = event.target.getAttribute(\"id\");\n    const allCourses = [...courses];\n    allCourses.forEach((cour) => {\n      if (cour.id === courseID) {\n        dispatch(storeStudentSingleCourseAction(cour));\n      }\n    });\n    history.push(\"/student-course-overview\");\n  };\n\n  useEffect(() => {\n    if (!studentAuthID) {\n      history.push(\"/studentdash\");\n      return;\n    }\n\n    getAllCourses();\n    handleCourseThumb();\n  }, [courses]);\n  return (\n    <div>\n      {/* Top Bar */}\n      <div>\n        <TopBar />\n      </div>\n\n      <div className=\"content\">\n        <h1>Courses</h1>\n        <div className=\"courseSearchWrapper\">\n          <p className=\"searchLabel\">Search for a course.</p>\n          <input\n            className=\"tbCourseSearch\"\n            id=\"tbCourseSearch\"\n            type=\"text\"\n            placeholder=\"Type course name...\"\n          />\n        </div>\n        <div className=\"courseGridWrapper\">{handleCourseGrid()}</div>\n      </div>\n\n      {/* Footer */}\n      <div>\n        <Footer />\n      </div>\n    </div>\n  );\n}\n","/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Teachers/Assignments/AssignmentsMain.js",["698"],"import React, { useEffect } from \"react\";\n\nimport TopBar from \"../Dash/TopBar\";\nimport DashFooter from \"../Dash/DashFooter\";\nimport \"./Assignments.css\";\n\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { useHistory } from \"react-router-dom\";\nimport { teachers_Collection } from \"../../../utils/firebase\";\nimport { firebaseLooper } from \"../../../utils/tools\";\nimport {\n  storeTeacherAssignmentAssigneesAction,\n  storeTeacherAssignmentsGeneralInfoAction,\n  storeTeacherSingleAssignmentAction,\n} from \"../../../redux/actions\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faTimes } from \"@fortawesome/free-solid-svg-icons\";\n\nexport default function AssignmentsMain() {\n  const teacherAuthID = useSelector((state) => state.storeTeacherAuthIDReducer);\n  const dispatch = useDispatch();\n  const history = useHistory();\n\n  const assignments = useSelector(\n    (state) => state.storeTeacherAssignmentsGeneralInfoReducer\n  );\n\n  // GET\n  const getAllAssignments = () => {\n    teachers_Collection\n      .doc(teacherAuthID)\n      .collection(\"Assignments\")\n      .get()\n      .then((snapshot) => {\n        const assData = firebaseLooper(snapshot);\n        dispatch(storeTeacherAssignmentsGeneralInfoAction(assData));\n      })\n      .catch((err) => console.log(err));\n  };\n\n  // HANDLE\n  const handleAssignmentList = () => {\n    if (assignments.length > 0) {\n      return assignments.map((ass, i) => {\n        return (\n          <div className=\"assListBlock\" key={i}>\n            <div className=\"assGrid\">\n              <h3 className=\"assName\">{ass.Name}</h3>\n              {ass.Date ? (\n                <p className=\"assAssigned\">\n                  Assigned: {ass.Date.toDate().toString().substr(4, 11)}\n                </p>\n              ) : null}\n              {ass.Due ? (\n                <p className=\"assDue\">\n                  Due: {ass.Due.toDate().toString().substr(4, 11)}\n                </p>\n              ) : null}\n            </div>\n            <div className=\"btnGroup\">\n              <button\n                className=\"btnAssView\"\n                id={ass.id}\n                onClick={navAssignmentView}\n              >\n                View\n              </button>\n              <button\n                id={ass.id}\n                onClick={removeAssignment}\n                className=\"btnAssRemove\"\n              >\n                <FontAwesomeIcon icon={faTimes} />\n              </button>\n            </div>\n          </div>\n        );\n      });\n    }\n  };\n\n  // NAV\n  const navAssignmentView = (event) => {\n    // Get assignment and store it\n    const assID = event.target.getAttribute(\"id\");\n    assignments.forEach((ass) => {\n      if (ass.id === assID) {\n        dispatch(storeTeacherSingleAssignmentAction(ass));\n        dispatch(storeTeacherAssignmentAssigneesAction(ass.Assignees));\n      }\n    });\n\n    history.push(\"/teacher-assignment-view\");\n  };\n  const navAssignmentNew = () => {\n    history.push(\"/teacher-assignment-new\");\n  };\n\n  // REMOVE\n  const removeAssignment = (event) => {\n    const assID = event.target.getAttribute(\"id\");\n\n    teachers_Collection\n      .doc(teacherAuthID)\n      .collection(\"Assignments\")\n      .doc(assID)\n      .delete()\n      .catch((err) => console.log(err));\n\n    // Duspatch\n    const allAssignments = [...assignments];\n    const filtered = allAssignments.filter((a) => a.id !== assID);\n\n    dispatch(storeTeacherAssignmentsGeneralInfoAction(filtered));\n  };\n\n  useEffect(() => {\n    if (!teacherAuthID) {\n      history.push(\"/teacherdash\");\n      return;\n    }\n\n    getAllAssignments();\n  }, []);\n\n  return (\n    <div>\n      {/* Top Bar */}\n      <div>\n        <TopBar />\n      </div>\n\n      {/* Content */}\n      <div className=\"content\">\n        <h1>Assignments</h1>\n        {/* Search */}\n        <div className=\"searchWrapper\">\n          <p className=\"searchHead\">Search for assignments.</p>\n          <input id=\"tbAssSearch\" type=\"text\" placeholder=\"Search\" />\n          <button className=\"btnCreate\" onClick={navAssignmentNew}>\n            Create New Assignment\n          </button>\n        </div>\n        <br />\n        {/* Assignment List */}\n        <div className=\"assWrapper\">{handleAssignmentList()}</div>\n      </div>\n\n      {/* Footer */}\n      <div>\n        <DashFooter />\n      </div>\n    </div>\n  );\n}\n","/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Teachers/Dash/SimpleStats.js",[],"/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/MiscComponents/Notice.js",[],"/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Students/StudentDash.js",["699","700","701","702"],"import React, { useEffect } from \"react\";\n\nimport { useHistory } from \"react-router-dom\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport {\n  storeAccountTypeAction,\n  storeStudentAuthIDAction,\n  isLoggedInAction,\n  storeStudentUserDataAction,\n} from \"../../redux/actions\";\n\nimport TopBar from \"./TopBar\";\nimport Footer from \"./Footer\";\nimport \"./StudentDash.css\";\nimport { users_Collection } from \"../../utils/firebase\";\nimport { firebaseLooper } from \"../../utils/tools\";\n\nexport default function StudentDash() {\n  const studentAuthID = useSelector((state) => state.storeStudentAuthIDReducer);\n  const history = useHistory();\n  const dispatch = useDispatch();\n\n  const getStudentUserData = () => {\n    users_Collection\n      .get()\n      .then((snapshot) => {\n        const userData = firebaseLooper(snapshot);\n        userData.forEach((user) => {\n          if (user.AuthID === studentAuthID) {\n            dispatch(storeStudentUserDataAction(user));\n          }\n        });\n      })\n      .catch((err) => console.log(err));\n  };\n\n  useEffect(() => {\n    if (!studentAuthID) {\n      history.push(\"/login\");\n      return;\n    }\n\n    getStudentUserData();\n  }, []);\n\n  return (\n    <div>\n      {/* Top Bar */}\n      <div>\n        <TopBar />\n      </div>\n\n      <div className=\"content\">\n        <h1>Dashboard</h1>\n      </div>\n\n      {/* Footer */}\n      <div>\n        <Footer />\n      </div>\n    </div>\n  );\n}\n","/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Teachers/Connections/ConnectionsMain.js",["703","704"],"import React, { useEffect } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { useHistory } from \"react-router-dom\";\n\nimport TopBar from \"../Dash/TopBar\";\nimport DashFooter from \"../Dash/DashFooter\";\nimport RandomString from \"../../RandomString\";\nimport GetToday from \"../../GetToday\";\nimport {\n  connectionReqQueue_Collection,\n  students_Collection,\n  teachers_Collection,\n  users_Collection,\n} from \"../../../utils/firebase\";\nimport {\n  storeAllSearchUsersAction,\n  storeTeacherAllConnectionsAction,\n  userDataAction,\n  storeAllConnReqsAction,\n} from \"../../../redux/actions\";\nimport { firebaseLooper } from \"../../../utils/tools\";\n\nimport \"./Connections.css\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport {\n  faMinus,\n  faSearch,\n  faTimes,\n  faTimesCircle,\n} from \"@fortawesome/free-solid-svg-icons\";\n\nexport default function ConnectionsMain() {\n  const teacherAuthID = useSelector((state) => state.storeTeacherAuthIDReducer);\n  const history = useHistory();\n  const dispatch = useDispatch();\n\n  const allUsers = useSelector((state) => state.storeAllSearchUsersReducer);\n  const connections = useSelector(\n    (state) => state.storeTeacherAllConnectionsReducer\n  );\n  const userState = useSelector((state) => state.userDataReducer);\n  const allConnReqs = useSelector((state) => state.storeAllConnReqsReducer);\n\n  // GET\n  const getAllConnections = () => {\n    teachers_Collection\n      .doc(teacherAuthID)\n      .collection(\"Connections\")\n      .get()\n      .then((snapshot) => {\n        const connData = firebaseLooper(snapshot);\n        dispatch(storeTeacherAllConnectionsAction(connData));\n      })\n      .catch((err) => console.log(err));\n  };\n  const getAllConnRequests = () => {\n    connectionReqQueue_Collection\n      .get()\n      .then((snapshot) => {\n        const queueData = firebaseLooper(snapshot);\n        dispatch(storeAllConnReqsAction(queueData));\n      })\n      .catch((err) => console.log(err));\n  };\n  const getMyUserData = () => {\n    users_Collection\n      .where(\"AuthID\", \"==\", teacherAuthID)\n      .get()\n      .then((snapshot) => {\n        const myData = firebaseLooper(snapshot);\n        myData.forEach((me) => {\n          dispatch(userDataAction(me));\n        });\n      })\n      .catch((err) => console.log(err));\n  };\n\n  // HANDLE\n  const handleConnectionsList = () => {\n    return connections.map((conn, i) => {\n      return (\n        <div className=\"connBlock\" key={i}>\n          <p className=\"connName\">\n            {conn.FirstName} {conn.LastName}\n          </p>\n          <p className=\"connEmail\">{conn.Email}</p>\n\n          <div className=\"btnsConn\">\n            <button className=\"btnConnMessage\">Message</button>\n            <button\n              id={conn.AuthID}\n              onClick={navConnProfile}\n              className=\"btnConnProfile\"\n            >\n              Profile\n            </button>\n            <button\n              onClick={removeConnection}\n              id={conn.id}\n              className=\"btnConnRemove\"\n            >\n              <FontAwesomeIcon icon={faMinus} />\n            </button>\n          </div>\n        </div>\n      );\n    });\n  };\n  const handleSearchList = () => {\n    return allUsers.map((user, i) => {\n      return (\n        <div className=\"searchResBlock\" key={i}>\n          <p className=\"searchResName\">\n            {user.FirstName} {user.LastName}\n          </p>\n          <p className=\"searchResAuth\">{user.AuthID}</p>\n          <p className=\"searchResType\">{user.AccountType}</p>\n          {handleRequest(user.AuthID)}\n        </div>\n      );\n    });\n  };\n  const handleRequest = (authID) => {\n    let found = false;\n    connections.forEach((conn) => {\n      if (conn.AuthID === authID) {\n        found = true;\n      } else {\n        // Do Nothing\n      }\n    });\n\n    // Search in connection request\n    allConnReqs.forEach((req) => {\n      // Check if authID matches any of the reqs in here\n      if (req.ConnID === authID) {\n        found = true;\n      } else {\n        // Do Nothing\n      }\n    });\n\n    if (found) {\n      return <p className=\"reqSent\">Request Sent</p>;\n    } else {\n      return (\n        <button id={authID} onClick={sendRequest} className=\"btnSearchResReq\">\n          Send Request\n        </button>\n      );\n    }\n  };\n\n  // SEARCH\n  const searchUser = () => {\n    const search = document.querySelector(\"#tbConnSearch\").value.toLowerCase();\n\n    const searchArr = search.split(\" \");\n\n    if (searchArr.length === 1) {\n      document.querySelector(\"#searchListBlock\").classList.remove(\"hide\");\n      // Assume they entered a first name or username\n      const word = searchArr[0];\n      const capitalized = word.replace(/^./, word[0].toUpperCase());\n\n      users_Collection\n        .where(\"FirstName\", \"==\", capitalized)\n        .get()\n        .then((snapshot) => {\n          const usersFirst = firebaseLooper(snapshot);\n          if (usersFirst.length > 0) {\n            // Found some first names\n            dispatch(storeAllSearchUsersAction(usersFirst));\n          } else {\n            // Did  not find first names\n            users_Collection\n              .where(\"AuthID\", \"==\", word)\n              .get()\n              .then((snapshot) => {\n                const usersAuth = firebaseLooper(snapshot);\n                if (usersAuth.length > 0) {\n                  // Found some usernames\n                  dispatch(storeAllSearchUsersAction(usersAuth));\n                } else {\n                  // Found nothing!\n                  dispatch(storeAllSearchUsersAction([]));\n                }\n              })\n              .catch((err) => console.log(err));\n          }\n        })\n        .catch((err) => console.log(err));\n    } else if (searchArr.length === 2) {\n      const firstName = searchArr[0];\n      const lastName = searchArr[1];\n      const firstCap = firstName.replace(/^./, firstName[0].toUpperCase());\n      const lastCap = lastName.replace(/^./, lastName[0].toUpperCase());\n\n      // Assume they entered a full name\n      users_Collection\n        .where(\"FirstName\", \"==\", firstCap)\n        .get()\n        .then((snapshot) => {\n          const usersFirst = firebaseLooper(snapshot);\n          const userCount = snapshot.size;\n          if (userCount > 0) {\n            let fullUsers = [];\n            // Found first names\n            usersFirst.forEach((u, i) => {\n              if (u.LastName === lastCap) {\n                // Found user\n                fullUsers.push(u);\n              }\n              if (i + 1 === userCount) {\n                dispatch(storeAllSearchUsersAction(fullUsers));\n                document\n                  .querySelector(\"#searchListBlock\")\n                  .classList.remove(\"hide\");\n              }\n            });\n          } else {\n            // Did not find last name\n            dispatch(storeAllSearchUsersAction([]));\n          }\n        })\n        .catch((err) => console.log(err));\n    }\n  };\n\n  // REQUEST\n  const sendRequest = (event) => {\n    const authID = event.target.getAttribute(\"id\");\n\n    users_Collection\n      .where(\"AuthID\", \"==\", teacherAuthID)\n      .get()\n      .then((snapshot) => {\n        const myData = firebaseLooper(snapshot);\n        myData.forEach((me) => {\n          allUsers.forEach((u) => {\n            if (u.AuthID === authID) {\n              // First store request in req queue\n              const rand1 = RandomString();\n              const rand2 = RandomString();\n              const connReqID = `ConnReq${rand1}${rand2}`;\n\n              connectionReqQueue_Collection\n                .doc(connReqID)\n                .set({\n                  ConnID: u.AuthID,\n                  SenderID: teacherAuthID,\n                  CFirstName: userState.FirstName,\n                  CLastName: userState.LastName,\n                })\n                .catch((err) => console.log(err));\n\n              if (u.AccountType === \"Student\") {\n                // User is Student\n                // Send Notification\n                const notifID = `Notif${rand1}${rand2}`;\n\n                students_Collection\n                  .doc(u.AuthID)\n                  .collection(\"Notifications\")\n                  .doc(notifID)\n                  .set({\n                    Action: \"connrequest\",\n                    Text: `You have received a request from ${me.FirstName} ${me.LastName} to connect.`,\n                    Date: GetToday(),\n                    Icon: \"faUser\",\n                  })\n                  .catch((err) => console.log(err));\n              } else if (u.AccountType === \"Teacher\") {\n                // User is Teacher\n                // Send Notification\n                const notifID = `Notif${rand1}${rand2}`;\n\n                teachers_Collection\n                  .doc(u.AuthID)\n                  .collection(\"Notifications\")\n                  .doc(notifID)\n                  .set({\n                    Action: \"connrequest\",\n                    Text: `You have received a request from ${me.FirstName} ${me.LastName} to connect.`,\n                    Date: GetToday(),\n                    Icon: \"faUser\",\n                  })\n                  .catch((err) => console.log(err));\n              }\n\n              // Dispatch\n              const allReqs = [...allConnReqs];\n              allReqs.push({\n                ConnID: u.AuthID,\n                SenderID: teacherAuthID,\n                CFirstName: userState.FirstName,\n                CLastName: userState.LastName,\n              });\n              dispatch(storeAllConnReqsAction(allReqs));\n            }\n          });\n        });\n      })\n      .catch((err) => console.log(err));\n  };\n\n  // NAV\n  const navConnProfile = (event) => {\n    const authID = event.target.getAttribute(\"id\");\n\n    users_Collection\n      .where(\"AuthID\", \"==\", authID)\n      .get()\n      .then((snapshot) => {\n        const usersData = firebaseLooper(snapshot);\n        usersData.forEach((user) => {\n          dispatch(userDataAction(user));\n        });\n      })\n      .catch((err) => console.log(err));\n\n    history.push(\"/teacher-profile\");\n  };\n\n  // REMOVE\n  const removeConnection = (event) => {\n    const connID = event.target.getAttribute(\"id\");\n    console.log(connID);\n\n    teachers_Collection\n      .doc(teacherAuthID)\n      .collection(\"Connections\")\n      .doc(connID)\n      .delete()\n      .catch((err) => console.log(err));\n\n    // Dispatch\n    const allConnections = [...connections];\n    const filtered = allConnections.filter((conn) => conn.id !== connID);\n\n    dispatch(storeTeacherAllConnectionsAction(filtered));\n  };\n\n  useEffect(() => {\n    if (!teacherAuthID) {\n      history.push(\"/teacherdash\");\n      return;\n    }\n\n    getAllConnections();\n    getMyUserData();\n    getAllConnRequests();\n    document.querySelector(\"#searchListBlock\").classList.add(\"hide\");\n  }, []);\n\n  return (\n    <div>\n      {/* Top Bar */}\n      <div>\n        <TopBar />\n      </div>\n\n      <div className=\"content\">\n        <h1>Connections</h1>\n\n        {/* Main Content */}\n        <div className=\"white-background\">\n          <h3 className=\"headSearch\">Search for Connections</h3>\n          <input\n            className=\"tbConnSearch\"\n            id=\"tbConnSearch\"\n            type=\"text\"\n            placeholder=\"Type Name or ID here.  'Jack Milton' or 'jckmltn'\"\n          />\n          <button className=\"btnConnSearch\" onClick={searchUser}>\n            <FontAwesomeIcon icon={faSearch} />\n          </button>\n          <div id=\"searchListBlock\" className=\"searchListBlock\">\n            <FontAwesomeIcon\n              onClick={() => {\n                dispatch(storeAllSearchUsersAction([]));\n                document\n                  .querySelector(\"#searchListBlock\")\n                  .classList.add(\"hide\");\n              }}\n              className=\"closeSearchList\"\n              icon={faTimes}\n            />\n            {handleSearchList()}\n          </div>\n        </div>\n\n        <div className=\"white-background\">{handleConnectionsList()}</div>\n\n        {/* END */}\n      </div>\n\n      {/* Footer */}\n      <div>\n        <DashFooter />\n      </div>\n    </div>\n  );\n}\n","/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Teachers/Statistics/ForumStats.js",["705"],"import React, { useEffect } from \"react\";\n\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useHistory } from \"react-router-dom\";\n\nimport { statisticsObjectAction } from \"../../../redux/actions\";\n\nexport default function ForumStats() {\n  const history = useHistory();\n  const dispatch = useDispatch();\n\n  const teacherAuthID = useSelector((state) => state.storeTeacherAuthIDReducer);\n  const storageState = useSelector(\n    (state) => state.storeTeacherStatisticsGeneralInfoReducer\n  );\n  const storageObj = useSelector((state) => state.statisticsObjectReducer);\n\n  const getStorageObj = () => {\n    storageState.forEach((obj) => {\n      if (obj.id === \"ForumStats\") {\n        dispatch(statisticsObjectAction(obj));\n      }\n    });\n  };\n\n  useEffect(() => {\n    if (!teacherAuthID) {\n      history.push(\"/teacherdash\");\n    }\n    getStorageObj();\n  }, []);\n  return (\n    <div>\n      <h1>Forum Stats</h1>\n      <hr/>\n      <p># of Forum Discussions: {storageObj.Num}</p>\n    </div>\n  );\n}\n",["706","707"],"/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Teachers/Profile/ProfileFeedView.js",["708","709","710","711","712"],"import React, { useEffect } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { useHistory } from \"react-router-dom\";\nimport {\n  students_Collection,\n  teachers_Collection,\n  users_Collection,\n} from \"../../../utils/firebase\";\nimport { firebaseLooper } from \"../../../utils/tools\";\nimport {\n  storeProfileFeedPostDataAction,\n  storeProfileFeedSinglePostDataAction,\n  storeTeacherMeDataAction,\n} from \"../../../redux/actions\";\n\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\n\nimport \"./Profile.css\";\nimport { faEllipsisV, faPen, faPlus } from \"@fortawesome/free-solid-svg-icons\";\n\nexport default function ProfileFeedView() {\n  const teacherAuthID = useSelector((state) => state.storeTeacherAuthIDReducer);\n  const history = useHistory();\n  const dispatch = useDispatch();\n\n  //   States\n  const posts = useSelector((state) => state.storeProfileFeedPostDataReducer);\n  const userDataState = useSelector((state) => state.userDataReducer);\n  const meData = useSelector((state) => state.storeTeacherMeDataReducer);\n\n  // GET\n  const getProfileFeedData = () => {\n    let feed_Collection;\n\n    if (userDataState.AccountType === \"Student\") {\n      feed_Collection = students_Collection\n        .doc(userDataState.AuthID)\n        .collection(\"Profile\")\n        .doc(\"Feed\")\n        .collection(\"Posts\");\n    } else if (userDataState.AccountType === \"Teacher\") {\n      feed_Collection = teachers_Collection\n        .doc(userDataState.AuthID)\n        .collection(\"Profile\")\n        .doc(\"Feed\")\n        .collection(\"Posts\");\n    }\n\n    feed_Collection\n      .orderBy(\"Date\", \"desc\")\n      .get()\n      .then((snapshot) => {\n        const data = firebaseLooper(snapshot);\n        console.log(data);\n        dispatch(storeProfileFeedPostDataAction(data));\n      })\n      .catch((err) => console.log(err));\n  };\n  const storeSinglePost = (event) => {\n    const postID = event.target.getAttribute(\"id\");\n    console.log(postID);\n    posts.forEach((post) => {\n      if (post.id === postID) {\n        dispatch(storeProfileFeedSinglePostDataAction(post));\n        history.push(\"/teacher-profile/edit-feed\");\n      }\n    });\n  };\n  const getMeData = () => {\n    users_Collection\n      .where(\"AuthID\", \"==\", teacherAuthID)\n      .get()\n      .then((snapshot) => {\n        const myData = firebaseLooper(snapshot);\n        myData.forEach((me) => {\n          dispatch(storeTeacherMeDataAction(me));\n        });\n      })\n      .catch((err) => console.log(err));\n  };\n\n  // HANDLE\n  const handleCurrPage = () => {\n    let feedBtn = document.querySelector(\"#link-feed\");\n    feedBtn.classList.add(\"navy-back\");\n\n    let aboutBtn = document.querySelector(\"#link-about\");\n    aboutBtn.classList.remove(\"navy-back\");\n\n    let awardsBtn = document.querySelector(\"#link-awards\");\n    awardsBtn.classList.remove(\"navy-back\");\n\n    let galleryBtn = document.querySelector(\"#link-gallery\");\n    galleryBtn.classList.remove(\"navy-back\");\n\n    if (userDataState.AccountType === \"Teacher\") {\n      let reviewsBtn = document.querySelector(\"#link-reviews\");\n      reviewsBtn.classList.remove(\"navy-back\");\n    }\n  };\n  const handlePostList = () => {\n    return posts.map((post, i) => {\n      return (\n        <div className=\"post-wrapper\" key={i}>\n          <div className=\"post-top-wrapper\">\n            <div className=\"post-name-split\">\n              <h3 className=\"post-name\">{post.Poster}</h3>\n              <p className=\"post-date\">\n                {post.Date ? post.Date.toDate().toString().substr(4, 11) : null}\n              </p>\n            </div>\n            <div>\n              {post.Poster === `${meData.FirstName} ${meData.LastName}` ? (\n                <button\n                  className=\"btn-edit\"\n                  id={post.id}\n                  onClick={storeSinglePost}\n                >\n                  Edit\n                </button>\n              ) : null}\n            </div>\n          </div>\n\n          <div className=\"post-body\">\n            <p>{post.Text}</p>\n          </div>\n        </div>\n      );\n    });\n  };\n\n  useEffect(() => {\n    if (!teacherAuthID) {\n      history.push(\"/teacherdash\");\n      return;\n    }\n    getProfileFeedData();\n    handleCurrPage();\n    getMeData();\n  }, [posts]);\n\n  return (\n    <div>\n      <button\n        className=\"btn-newPost\"\n        onClick={() => history.push(\"/teacher-profile/new-feed\")}\n      >\n        Create Post\n      </button>\n      <div className=\"white-background\">\n        <br />\n        <div>{handlePostList()}</div>\n      </div>\n    </div>\n  );\n}\n","/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Teachers/Messages/MessagesMain.js",["713","714"],"import React, { useEffect } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { useHistory } from \"react-router-dom\";\nimport {\n  storeTeacherMessageRecipientAction,\n  storeTeacherMessagesGeneralInfoAction,\n  storeTeacherMessageThreadAction,\n} from \"../../../redux/actions\";\nimport { teachers_Collection, users_Collection } from \"../../../utils/firebase\";\nimport DashFooter from \"../Dash/DashFooter\";\nimport TopBar from \"../Dash/TopBar\";\n\nimport { firebaseLooper } from \"../../../utils/tools\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport {\n  faChevronRight,\n  faMinus,\n  faTimes,\n} from \"@fortawesome/free-solid-svg-icons\";\n\nexport default function MessagesMain() {\n  const teacherAuthID = useSelector((state) => state.storeTeacherAuthIDReducer);\n  const history = useHistory();\n  const dispatch = useDispatch();\n\n  const messages = useSelector(\n    (state) => state.storeTeacherMessagesGeneralInfoReducer\n  );\n\n  // GET\n  const getAllMessages = () => {\n    teachers_Collection\n      .doc(teacherAuthID)\n      .collection(\"Messages\")\n      .get()\n      .then((snapshot) => {\n        const messageData = firebaseLooper(snapshot);\n        const messSize = snapshot.size;\n        messageData.forEach((mess, i) => {\n          let allMess = [];\n          teachers_Collection\n            .doc(teacherAuthID)\n            .collection(\"Messages\")\n            .doc(mess.id)\n            .collection(\"MessageBlocks\")\n            .orderBy(\"Date\", \"desc\")\n            .get()\n            .then((snapshot) => {\n              const messBlockData = firebaseLooper(snapshot);\n              const lastMessObj = messBlockData[0];\n\n              users_Collection\n                .where(\"AuthID\", \"==\", mess.RecipientID)\n                .get()\n                .then((snapshot) => {\n                  const userData = firebaseLooper(snapshot);\n                  userData.forEach((u) => {\n                    mess = {\n                      ...mess,\n                      LastMessage: lastMessObj.Text,\n                      RecipientFullName: `${u.FirstName} ${u.LastName}`,\n                    };\n                    allMess.push(mess);\n                    if (i + 1 === messSize) {\n                      dispatch(storeTeacherMessagesGeneralInfoAction(allMess));\n                    }\n                  });\n                })\n                .catch((err) => console.log(err));\n            })\n            .catch((err) => console.log(err));\n        });\n      })\n      .catch((err) => console.log(err));\n  };\n  // HANDLE\n  const handleMessageList = () => {\n    return messages.map((mess, i) => {\n      return (\n        <div className=\"mess-thread-block\" key={i}>\n          <div style={{ display: \"flex\" }}>\n            <div style={{ marginTop: \"auto\", marginBottom: \"auto\" }}>\n              <p className=\"mess-thread-recipient\">{mess.RecipientFullName}</p>\n              <p className=\"mess-thread-message\">{mess.LastMessage}</p>\n            </div>\n            <div class=\"margin-left\">\n              <button\n                id={mess.id}\n                onClick={navMessageView}\n                className=\"btn-open\"\n              >\n                <FontAwesomeIcon icon={faChevronRight} />\n              </button>\n              <button\n                onClick={removeMessage}\n                id={`${mess.RecipientID} ${mess.id}`}\n                className=\"btn-del-mess\"\n              >\n                <FontAwesomeIcon icon={faMinus} />\n              </button>\n            </div>\n          </div>\n        </div>\n      );\n    });\n  };\n  // REMOVE\n  const removeMessage = (event) => {\n    const idArr = event.currentTarget.getAttribute(\"id\").split(\" \");\n    const recID = idArr[0];\n    const meID = idArr[1];\n\n    // Remove from DB\n    teachers_Collection\n      .doc(teacherAuthID)\n      .collection(\"Messages\")\n      .where(\"RecipientID\", \"==\", recID)\n      .get()\n      .then((snapshot) => {\n        const messData = firebaseLooper(snapshot);\n        messData.forEach((m) => {\n          teachers_Collection\n            .doc(teacherAuthID)\n            .collection(\"Messages\")\n            .doc(m.id)\n            .collection(\"MessageBlocks\")\n            .get()\n            .then((snapshot) => {\n              const messBlockData = firebaseLooper(snapshot);\n              messBlockData.forEach((mb) => {\n                teachers_Collection\n                  .doc(teacherAuthID)\n                  .collection(\"Messages\")\n                  .doc(m.id)\n                  .collection(\"MessageBlocks\")\n                  .doc(mb.id)\n                  .delete()\n                  .catch((err) => console.log(err));\n              });\n            })\n            .catch((err) => console.log(err));\n\n          teachers_Collection\n            .doc(teacherAuthID)\n            .collection(\"Messages\")\n            .doc(m.id)\n            .delete()\n            .catch((err) => console.log(err));\n        });\n      })\n      .catch((err) => console.log(err));\n\n    // Dispatch\n    const allMess = [...messages];\n    const filtered = allMess.filter((m) => m.id !== meID);\n\n    dispatch(storeTeacherMessagesGeneralInfoAction(filtered));\n  };\n  // NAV\n  const navMessageView = (event) => {\n    const messID = event.currentTarget.getAttribute(\"id\");\n\n    messages.forEach((mess) => {\n      if (mess.id === messID) {\n        users_Collection\n          .where(\"AuthID\", \"==\", mess.RecipientID)\n          .get()\n          .then((snapshot) => {\n            const recData = firebaseLooper(snapshot);\n            recData.forEach((re) => {\n              dispatch(storeTeacherMessageRecipientAction(re));\n            });\n          })\n          .catch((err) => console.log(err));\n\n        teachers_Collection\n          .doc(teacherAuthID)\n          .collection(\"Messages\")\n          .doc(mess.id)\n          .collection(\"MessageBlocks\")\n          .get()\n          .then((snapshot) => {\n            const messBlocksData = firebaseLooper(snapshot);\n            dispatch(storeTeacherMessageThreadAction(messBlocksData));\n          })\n          .catch((err) => console.log(err));\n      }\n    });\n\n    history.push(\"/teacher-message-view\");\n  };\n\n  useEffect(() => {\n    if (!teacherAuthID) {\n      history.push(\"/teacherdash\");\n      return;\n    }\n\n    getAllMessages();\n  }, []);\n  return (\n    <div>\n      {/* Top Bar */}\n      <div>\n        <TopBar />\n      </div>\n\n      <div className=\"content\">\n        <h1>Messages</h1>\n        <button\n          onClick={() => history.push(\"/teacher-message-create\")}\n          className=\"btnCreate\"\n        >\n          Create New Message\n        </button>\n\n        <div className=\"white-background\">{handleMessageList()}</div>\n      </div>\n\n      {/* Footer */}\n      <div>\n        <DashFooter />\n      </div>\n    </div>\n  );\n}\n","/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Teachers/Groups/GroupMembersView.js",["715","716"],"import React, { useEffect } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { useHistory } from \"react-router-dom\";\nimport { storeGroupMembersListAction } from \"../../../redux/actions\";\nimport { groups_Collection } from \"../../../utils/firebase\";\nimport { firebaseLooper } from \"../../../utils/tools\";\n\nexport default function GroupMembersView() {\n  const teacherAuthID = useSelector((state) => state.storeTeacherAuthIDReducer);\n  const history = useHistory();\n  const dispatch = useDispatch();\n\n  const members = useSelector((state) => state.storeGroupMembersListReducer);\n  const group = useSelector((state) => state.storeSingleGroupReducer);\n\n  const getAllMembers = () => {\n    groups_Collection\n      .doc(group.id)\n      .collection(\"Members\")\n      .get()\n      .then((snapshot) => {\n        const memberData = firebaseLooper(snapshot);\n        dispatch(storeGroupMembersListAction(memberData));\n      })\n      .catch((err) => console.log(err));\n  };\n\n  const handleMemberList = () => {\n    return members.map((mem, i) => {\n      if (mem.Username) {\n        return (\n          <div key={i}>\n            {/* Profile Pic */}\n            <img src=\"\" alt=\"\" />\n\n            <p>{mem.Username}</p>\n            <p>{mem.Role}</p>\n          </div>\n        );\n      }\n    });\n  };\n\n  useEffect(() => {\n    if (!teacherAuthID) {\n      history.push(\"/teacherdash\");\n      return;\n    }\n\n    getAllMembers();\n  }, []);\n  return (\n    <div>\n      <div>{handleMemberList()}</div>\n    </div>\n  );\n}\n","/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Teachers/Dash/Earnings.js",[],"/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Plans.js",[],"/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Teachers/Courses/CoursesMain.js",["717"],"import React, { useEffect } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { useHistory } from \"react-router-dom\";\n\nimport TopBar from \"../Dash/TopBar\";\nimport DashFooter from \"../Dash/DashFooter\";\nimport firebase from \"../../../utils/firebase\";\nimport \"./Courses.css\";\nimport { firebaseLooper } from \"../../../utils/tools\";\nimport { courses_Collection } from \"../../../utils/firebase\";\nimport {\n  storeTeacherAllCoursesAction,\n  storeTeacherSingleCourseAction,\n} from \"../../../redux/actions\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faMinus } from \"@fortawesome/free-solid-svg-icons\";\n\nexport default function CoursesMain() {\n  const teacherAuthID = useSelector((state) => state.storeTeacherAuthIDReducer);\n  const history = useHistory();\n  const dispatch = useDispatch();\n\n  const courses = useSelector((state) => state.storeTeacherAllCoursesReducer);\n\n  // GET\n  const getAllCourses = () => {\n    courses_Collection\n      .get()\n      .then((snapshot) => {\n        const coursesData = firebaseLooper(snapshot);\n        dispatch(storeTeacherAllCoursesAction(coursesData));\n      })\n      .catch((err) => console.log(err));\n  };\n\n  // HANDLE\n  const handleCoursesList = () => {\n    return courses.map((c, i) => {\n      return (\n        <div className=\"courseListBlock\" key={i}>\n          <img id={`imgThumb${i}`} className=\"thumb\" src=\"\" alt=\"\" />\n          <h3 className=\"courseListName\">{c.Name}</h3>\n          <p className=\"courseListDesc\">{c.Desc.substr(0, 160)}...</p>\n          <div className=\"btnCourseGroup\">\n            <button id={c.id} onClick={navCourseOverview} className=\"btnEdit\">\n              View\n            </button>\n            <button id={c.id} onClick={removeCourse} className=\"btnRemove\">\n              <FontAwesomeIcon icon={faMinus} />\n            </button>\n          </div>\n        </div>\n      );\n    });\n  };\n  const handleCourseThumb = () => {\n    courses.forEach((c, i) => {\n      var storage = firebase.storage();\n      var storageRef = storage.ref(`Images/`);\n      //urll is the url for image\n      storageRef\n        .child(c.Thumbnail)\n        .getDownloadURL()\n        .then(function (url) {\n          // Or inserted into an <img> element:\n          let img = document.getElementById(`imgThumb${i}`);\n          if (img) {\n            img.src = url;\n          }\n        })\n        .catch((err) => console.log(err));\n    });\n  };\n  const handleAllThumbnails = () => {\n    courses.forEach(() => {\n      handleCourseThumb();\n    });\n  };\n\n  // NAV\n  const navCourseOverview = (event) => {\n    const courseID = event.target.getAttribute(\"id\");\n\n    courses.forEach((c) => {\n      if (c.id === courseID) {\n        dispatch(storeTeacherSingleCourseAction(c));\n      }\n    });\n\n    history.push(\"/teacher-course-overview\");\n  };\n\n  // REMOVE\n  const removeCourse = (event) => {\n    const courseID = event.target.getAttribute(\"id\");\n\n    // Remove from DB\n    if (courseID) {\n      courses_Collection\n        .doc(courseID)\n        .collection(\"Lessons\")\n        .get()\n        .then((snapshot) => {\n          const lessonsData = firebaseLooper(snapshot);\n          lessonsData.forEach((less) => {\n            firebase.storage.ref(\"Videos/\").child(less.Video).delete();\n\n            courses_Collection\n              .doc(courseID)\n              .collection(\"Lessons\")\n              .doc(less.id)\n              .delete()\n              .catch((err) => console.log(err));\n          });\n        })\n        .catch((err) => console.log(err));\n\n      courses_Collection\n        .doc(courseID)\n        .collection(\"Quizzes\")\n        .get()\n        .then((snapshot) => {\n          const quizData = firebaseLooper(snapshot);\n          quizData.forEach((q) => {\n            courses_Collection\n              .doc(courseID)\n              .collection(\"Quizzes\")\n              .doc(q.id)\n              .collection(\"Components\")\n              .get()\n              .then((snapshot) => {\n                const compsData = firebaseLooper(snapshot);\n                compsData.forEach((com) => {\n                  if (com.Type === \"audio\") {\n                    firebase.storage.ref(\"Audio/\").child(com.Audio).delete();\n                  } else if (com.Type === \"video\") {\n                    firebase.storage.ref(\"Videos/\").child(com.Video).delete();\n                  } else if (com.Type === \"image\") {\n                    firebase.storage.ref(\"Images/\").child(com.Video).delete();\n                  }\n\n                  courses_Collection\n                    .doc(courseID)\n                    .collection(\"Quizzes\")\n                    .doc(q.id)\n                    .collection(\"Components\")\n                    .doc(com.id)\n                    .delete()\n                    .catch((err) => console.log(err));\n                });\n              })\n              .catch((err) => console.log(err));\n\n            courses.forEach((c) => {\n              if (c.id === courseID) {\n                firebase.storage.ref(\"Images/\").child(c.Thumbnail).delete();\n              }\n            });\n\n            courses_Collection\n              .doc(courseID)\n              .collection(\"Quizzes\")\n              .doc(q.id)\n              .delete()\n              .catch((err) => console.log(err));\n          });\n        })\n        .catch((err) => console.log(err));\n\n      courses_Collection\n        .doc(courseID)\n        .delete()\n        .catch((err) => console.log(err));\n\n      // Dispatch\n      const allCourses = [...courses];\n      const filtered = allCourses.filter((cour) => cour.id !== courseID);\n\n      dispatch(storeTeacherAllCoursesAction(filtered));\n    }\n  };\n\n  // ONCHANGE\n  const onCourseSearch = () => {\n    const search = document.querySelector(\"#tbCourseSearch\").value;\n\n    const allCourses = [...courses];\n    const filtered = allCourses.filter((c) => c.Name.includes(search));\n\n    if (search === \"\") {\n      dispatch(storeTeacherAllCoursesAction(courses));\n    } else {\n      dispatch(storeTeacherAllCoursesAction(filtered));\n    }\n  };\n\n  useEffect(() => {\n    if (!teacherAuthID) {\n      history.push(\"/teacherdash\");\n      return;\n    }\n\n    getAllCourses();\n    handleAllThumbnails();\n  }, []);\n  return (\n    <div>\n      {/* Top Bar */}\n      <div>\n        <p style={{ display: \"none\" }} onClick={handleAllThumbnails()}></p>\n        <TopBar />\n      </div>\n\n      <div className=\"content\">\n        <h1>Courses</h1>\n        <button\n          onClick={() => history.push(\"/teacher-new-course\")}\n          className=\"btnNewCourse\"\n        >\n          Create New Course\n        </button>\n\n        <div className=\"courseTop\">\n          <p className=\"searchHead\">Search course name.</p>\n          <input\n            onChange={onCourseSearch}\n            className=\"tbCourseSearch\"\n            id=\"tbCourseSearch\"\n            type=\"text\"\n            placeholder=\"Search\"\n          />\n        </div>\n\n        <div className=\"courseListWrapper\">{handleCoursesList()}</div>\n      </div>\n\n      {/* Footer */}\n      <div>\n        <DashFooter />\n      </div>\n    </div>\n  );\n}\n","/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Teachers/Courses/WizardNewCourse.js",["718"],"import React, { useEffect } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { useHistory } from \"react-router-dom\";\nimport DashFooter from \"../Dash/DashFooter\";\nimport TopBar from \"../Dash/TopBar\";\nimport FileUpload, { programUpload } from \"../../FileUpload\";\nimport RandomString from \"../../RandomString\";\nimport { courses_Collection } from \"../../../utils/firebase\";\nimport {\n  storeTeacherAllCoursesAction,\n  storeTeacherSingleCourseAction,\n} from \"../../../redux/actions\";\n\nexport default function WizardNewCourse() {\n  const teacherAuthID = useSelector((state) => state.storeTeacherAuthIDReducer);\n  const history = useHistory();\n  const dispatch = useDispatch();\n\n  const courses = useSelector((state) => state.storeTeacherAllCoursesReducer);\n\n  // POST\n  const saveCourseDetails = () => {\n    const rand1 = RandomString();\n    const rand2 = RandomString();\n    const courseID = `Course${rand1}${rand2}`;\n\n    // Variables\n    const courseName = document.querySelector(\"#tbCourseName\").value;\n    const courseDesc = document.querySelector(\"#taCourseDesc\").value;\n    const courseThumb = programUpload();\n\n    // Save in DB\n    courses_Collection.doc(courseID).set({\n      Name: courseName,\n      Desc: courseDesc,\n      Thumbnail: courseThumb,\n    });\n\n    // Dispatch\n    const allCourses = [...courses];\n    allCourses.push({\n      id: courseID,\n      Name: courseName,\n      Desc: courseDesc,\n      Thumbnail: courseThumb,\n    });\n\n    dispatch(storeTeacherAllCoursesAction(allCourses));\n    dispatch(\n      storeTeacherSingleCourseAction({\n        id: courseID,\n        Name: courseName,\n        Desc: courseDesc,\n        Thumbnail: courseThumb,\n      })\n    );\n  };\n\n  //   NAV\n  const navCreateLesson = () => {\n    saveCourseDetails();\n    history.push(\"/teacher-new-lesson\");\n  };\n  const navSaveExit = () => {\n    saveCourseDetails();\n    history.push(\"/teacher-courses\");\n  };\n\n  useEffect(() => {\n    if (!teacherAuthID) {\n      history.push(\"/teacherdash\");\n      return;\n    }\n  }, []);\n  return (\n    <div>\n      {/* Top Bar */}\n      <div>\n        <TopBar />\n      </div>\n\n      <div className=\"content\">\n        <h1>New Course: Course Details</h1>\n\n        <div className=\"bodyWrapper\">\n          <div className=\"wizardPair\">\n            <h3 className=\"h3\">Course Name:</h3>\n            <input\n              className=\"tb\"\n              id=\"tbCourseName\"\n              type=\"text\"\n              placeholder=\"Course Name\"\n            />\n          </div>\n\n          <div className=\"wizardPair\">\n            <h3 className=\"h3\">Course Description:</h3>\n            <textarea\n              className=\"ta\"\n              id=\"taCourseDesc\"\n              placeholder=\"Course Description\"\n            ></textarea>\n          </div>\n\n          <div className=\"wizardPair\">\n            <h3 className=\"h3\">Course Thumbnail:</h3>\n            <FileUpload />\n          </div>\n\n          <div className=\"btnFlex\">\n            <button onClick={navSaveExit} className=\"btnFormSecondary\">\n              Save &amp; Exit\n            </button>\n            <button onClick={navCreateLesson} className=\"btnFormPrimary\">\n              Create Lesson {`>`}\n            </button>\n          </div>\n        </div>\n      </div>\n\n      {/* Footer */}\n      <div>\n        <DashFooter />\n      </div>\n    </div>\n  );\n}\n",["719","720"],"/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/FileUpload.js",["721","722","723","724","725"],"import React, { useEffect } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { useHistory } from \"react-router-dom\";\nimport firebase from \"../utils/firebase\";\nimport \"./FileUpload.css\";\nimport RandomString from \"./RandomString\";\n\nexport const programUpload = () => {\n  const file = document.querySelector(`#select`).files[0];\n\n  if (file) {\n    let name = document.querySelector(`#fileName`).value;\n    if (name === \"\") {\n      name = file.name;\n    }\n    const metadata = {\n      contentType: file.type,\n    };\n\n    // Storage Ref\n    let ref;\n\n    if (file.type === \"video/mp4\") {\n      ref = firebase.storage().ref(\"Videos/\");\n      if (name !== file.name) {\n        name = name + \".mp4\";\n      }\n    } else if (file.type === \"audio/mpeg\") {\n      ref = firebase.storage().ref(\"Audio/\");\n      if (name !== file.name) {\n        name = name + \".mp3\";\n      }\n    } else if (file.type === \"image/jpeg\") {\n      ref = firebase.storage().ref(\"Images/\");\n      if (name !== file.name) {\n        name = name + \".jpg\";\n      }\n    } else if (file.type === \"image/png\") {\n      ref = firebase.storage().ref(\"Images/\");\n      if (name !== file.name) {\n        name = name + \".png\";\n      }\n    } else if (file.type === \"application/pdf\") {\n      ref = firebase.storage().ref(\"PDF/\");\n      if (name !== file.name) {\n        name = name + \".pdf\";\n      }\n    }\n\n    const task = ref.child(name).put(file, metadata);\n    task\n      .then((snapshot) => snapshot.ref.getDownloadURL())\n      .then((url) => {\n        console.log(url);\n      })\n      .catch(console.error);\n\n    return name;\n  }\n};\n\nexport default function FileUpload() {\n  return (\n    <div>\n      <input id={`select`} type=\"file\" />\n      <p className=\"smallDesc\">\n        Enter an optional custom file name. Leaving the field blank will use the\n        current file name.\n      </p>\n      <input id=\"fileName\" type=\"text\" placeholder=\"Type file name..\" />\n    </div>\n  );\n}\n","/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Teachers/Courses/WizardNewLesson.js",["726"],"import React, { useEffect } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { useHistory } from \"react-router-dom\";\nimport TopBar from \"../Dash/TopBar\";\nimport DashFooter from \"../Dash/DashFooter\";\nimport FileUpload, { programUpload } from \"../../FileUpload\";\nimport { courses_Collection } from \"../../../utils/firebase\";\nimport RandomString from \"../../RandomString\";\nimport { storeTeacherSingleCourseLessonCountAction } from \"../../../redux/actions\";\n\nexport default function WizardNewLesson() {\n  const teacherAuthID = useSelector((state) => state.storeTeacherAuthIDReducer);\n  const history = useHistory();\n  const dispatch = useDispatch();\n\n  const course = useSelector((state) => state.storeTeacherSingleCourseReducer);\n  const lessonCount = useSelector(\n    (state) => state.storeTeacherSingleCourseLessonCountReducer\n  );\n\n  // GET\n  const getLessonCount = () => {\n    courses_Collection\n      .doc(course.id)\n      .collection(\"Lessons\")\n      .get()\n      .then((snapshot) => {\n        const lessonCount = snapshot.size;\n        dispatch(storeTeacherSingleCourseLessonCountAction(lessonCount));\n      })\n      .catch((err) => console.log(err));\n  };\n\n  // POST\n  const saveLesson = () => {\n    const rand1 = RandomString();\n    const rand2 = RandomString();\n    const lessonID = `Lesson${rand1}${rand2}`;\n\n    // Variables\n    const lessonName = document.querySelector(\"#tbLessonName\").value;\n    const lessonDesc = document.querySelector(\"#taLessonDesc\").value;\n    const lessonVideo = programUpload();\n    const lessonText = document.querySelector(\"#taLessonText\").value;\n\n    // Save to DB\n    courses_Collection\n      .doc(course.id)\n      .collection(\"Lessons\")\n      .doc(lessonID)\n      .set({\n        Name: lessonName,\n        Desc: lessonDesc,\n        Video: lessonVideo,\n        Text: lessonText,\n        Order: lessonCount + 1,\n      })\n      .catch((err) => console.log(err));\n  };\n\n  //   NAV\n  const navCreateQuiz = () => {\n    saveLesson();\n    history.push(\"/teacher-new-quiz\");\n  };\n  const navSaveExit = () => {\n    saveLesson();\n    history.push(\"/teacher-courses\");\n  };\n\n  useEffect(() => {\n    if (!teacherAuthID) {\n      history.push(\"/teacherdash\");\n      return;\n    }\n\n    getLessonCount();\n  }, []);\n  return (\n    <div>\n      {/* Top Bar */}\n      <div>\n        <TopBar />\n      </div>\n\n      <div className=\"content\">\n        <h1>Lesson Details</h1>\n\n        <div className=\"bodyWrapper\">\n          <div className=\"wizardPair\">\n            <h3 className=\"h3\">Lesson Name:</h3>\n            <input\n              className=\"tb\"\n              id=\"tbLessonName\"\n              type=\"text\"\n              placeholder=\"Lesson Name\"\n            />\n          </div>\n\n          <div className=\"wizardPair\">\n            <h3 className=\"h3\">Lesson Description:</h3>\n            <textarea\n              className=\"ta\"\n              id=\"taLessonDesc\"\n              placeholder=\"Lesson Description\"\n            ></textarea>\n          </div>\n\n          <div className=\"wizardPair\">\n            <h3 className=\"h3\">Lesson Video:</h3>\n            <FileUpload />\n          </div>\n\n          <div className=\"wizardPair\">\n            <h3 className=\"h3\">Lesson Text:</h3>\n            <p className=\"smallText\">\n              This section of the lesson will be available for the teacher to\n              include a text version of the video provided. This will be\n              displayed right underneath the video for the students to read as\n              amn alternative for watching the video.\n            </p>\n            <textarea\n              className=\"ta\"\n              id=\"taLessonText\"\n              placeholder=\"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed dolor risus, euismod accumsan laoreet in, luctus eu mauris. Mauris purus lorem, commodo ut ante et, scelerisque congue mauris. Quisque consectetur purus vel tellus vulputate malesuada. Fusce a nisi sit amet erat porta blandit. Cras ultricies malesuada ultrices. Quisque libero purus, finibus sed ante quis, tincidunt sodales ex. Nulla ut ligula quam.\"\n            ></textarea>\n          </div>\n\n          <div className=\"btnFlex\">\n            <button onClick={navSaveExit} className=\"btnFormSecondary\">\n              Save &amp; Exit\n            </button>\n            <button onClick={navCreateQuiz} className=\"btnFormPrimary\">\n              Create Quiz {`>`}\n            </button>\n          </div>\n        </div>\n      </div>\n\n      {/* Footer */}\n      <div>\n        <DashFooter />\n      </div>\n    </div>\n  );\n}\n","/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Teachers/Courses/WizardNewQuiz.js",["727","728","729"],"import React, { useEffect } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { useHistory } from \"react-router-dom\";\n\nimport TopBar from \"../Dash/TopBar\";\nimport DashFooter from \"../Dash/DashFooter\";\n\nimport {\n  storeTeacherQuizComponentsAction,\n  storeTeacherSingleCourseQuizCountAction,\n} from \"../../../redux/actions\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faTimes } from \"@fortawesome/free-solid-svg-icons\";\nimport RandomString from \"../../RandomString\";\nimport firebase, { courses_Collection } from \"../../../utils/firebase\";\n\nexport default function WizardNewQuiz() {\n  const teacherAuthID = useSelector((state) => state.storeTeacherAuthIDReducer);\n  const history = useHistory();\n  const dispatch = useDispatch();\n\n  const course = useSelector((state) => state.storeTeacherSingleCourseReducer);\n  const quizCount = useSelector(\n    (state) => state.storeTeacherSingleCourseQuizCountReducer\n  );\n\n  const components = useSelector(\n    (state) => state.storeTeacherQuizComponentsReducer\n  );\n\n  // GET\n  const getQuizCount = () => {\n    courses_Collection\n      .doc(course.id)\n      .collection(\"Quizzes\")\n      .get()\n      .then((snapshot) => {\n        const quizCount = snapshot.size;\n        dispatch(storeTeacherSingleCourseQuizCountAction(quizCount));\n      })\n      .catch((err) => console.log(err));\n  };\n\n  // HANDLE\n  const handleComponents = () => {\n    return components.map((comp, i) => {\n      if (comp.Type === \"multiple\") {\n        return (\n          <div className=\"comps purple-border\" key={i}>\n            <div style={{ display: \"flex\" }}>\n              <h2>Multiple Choice</h2>\n              <button onClick={onCompDel} id={comp.CompID} className=\"compDel\">\n                <FontAwesomeIcon className=\"compDelIcon\" icon={faTimes} />\n              </button>\n            </div>\n\n            <p className=\"compLabel\">Question:</p>\n            <input\n              className=\"tbComp question\"\n              id={`tbQuestion${i}`}\n              type=\"text\"\n              placeholder=\"Question\"\n            />\n\n            <p className=\"compLabel\">Options:</p>\n            <input\n              className=\"tbComp opt\"\n              id={`tbOption1-${i}`}\n              type=\"text\"\n              placeholder=\"Option 1\"\n            />\n            <input\n              className=\"tbComp opt\"\n              id={`tbOption2-${i}`}\n              type=\"text\"\n              placeholder=\"Option 2\"\n            />\n            <input\n              className=\"tbComp opt\"\n              id={`tbOption3-${i}`}\n              type=\"text\"\n              placeholder=\"Option 3\"\n            />\n            <input\n              className=\"tbComp opt\"\n              id={`tbOption4-${i}`}\n              type=\"text\"\n              placeholder=\"Option 4\"\n            />\n\n            <p className=\"compLabel\">Answer:</p>\n            <input\n              className=\"tbComp answer\"\n              id={`tbAnswer${i}`}\n              type=\"text\"\n              placeholder=\"Answer\"\n            />\n\n            <p className=\"compLabel\">Points:</p>\n            <input\n              className=\"tbComp points\"\n              id={`tbPoints${i}`}\n              type=\"text\"\n              placeholder=\"# of Points\"\n            />\n          </div>\n        );\n      } else if (comp.Type === \"short\") {\n        return (\n          <div className=\"comps red-border\" key={i}>\n            <div style={{ display: \"flex\" }}>\n              <h2>Short Answer</h2>\n              <button onClick={onCompDel} id={comp.CompID} className=\"compDel\">\n                <FontAwesomeIcon className=\"compDelIcon\" icon={faTimes} />\n              </button>\n            </div>\n            <p className=\"compLabel\">Prompt:</p>\n            <input\n              className=\"tbComp prompt\"\n              id={`tbShortPrompt${i}`}\n              type=\"text\"\n              placeholder=\"Prompt\"\n            />\n\n            <p className=\"compLabel\">Answer:</p>\n            <input\n              className=\"tbComp short\"\n              id={`tbShortAns${i}`}\n              type=\"text\"\n              placeholder=\"Answer\"\n            />\n\n            <p className=\"compLabel\">Points:</p>\n            <input\n              className=\"tbComp points\"\n              id={`tbPoints${i}`}\n              type=\"text\"\n              placeholder=\"# of Points\"\n            />\n          </div>\n        );\n      } else if (comp.Type === \"long\") {\n        return (\n          <div className=\"comps yellow-border\" key={i}>\n            <div style={{ display: \"flex\" }}>\n              <h2>Long Answer</h2>\n              <button onClick={onCompDel} id={comp.CompID} className=\"compDel\">\n                <FontAwesomeIcon className=\"compDelIcon\" icon={faTimes} />\n              </button>\n            </div>\n            <p className=\"compLabel\">Prompt:</p>\n            <input\n              className=\"tbComp prompt\"\n              id={`tbLongPrompt${i}`}\n              type=\"text\"\n              placeholder=\"Prompt\"\n            />\n\n            <h3 className=\"compLabel\">Answer:</h3>\n            <textarea\n              className=\"ta long\"\n              id={`taLongAns${i}`}\n              placeholder=\"Answer\"\n            ></textarea>\n\n            <p className=\"compLabel\">Points:</p>\n            <input\n              className=\"tbComp points\"\n              id={`tbPoints${i}`}\n              type=\"text\"\n              placeholder=\"# of Points\"\n            />\n          </div>\n        );\n      } else if (comp.Type === \"trueFalse\") {\n        return (\n          <div className=\"comps aqua-border\">\n            <div style={{ display: \"flex\" }}>\n              <h2>True or False</h2>\n              <button onClick={onCompDel} id={comp.CompID} className=\"compDel\">\n                <FontAwesomeIcon className=\"compDelIcon\" icon={faTimes} />\n              </button>\n            </div>\n\n            <p className=\"compLabel\">Prompt:</p>\n            <input\n              className=\"tbComp prompt\"\n              id={`tbTrueFalsePrompt${i}`}\n              type=\"text\"\n              placeholder=\"Prompt\"\n            />\n\n            <div className=\"ras\">\n              <div className=\"raGroup\">\n                <input\n                  className=\"ra\"\n                  type=\"radio\"\n                  id={`raTrue${i}`}\n                  name={`raTrueFalse${i}`}\n                  value=\"True\"\n                />\n                <label for=\"male\">True</label>\n              </div>\n              <div className=\"raGroup\">\n                <input\n                  className=\"ra\"\n                  type=\"radio\"\n                  id={`raFalse${i}`}\n                  name={`raTrueFalse${i}`}\n                  value=\"False\"\n                />\n                <label for=\"male\">False</label>\n              </div>\n            </div>\n\n            <p className=\"compLabel\">Points:</p>\n            <input\n              className=\"tbComp points\"\n              id={`tbPoints${i}`}\n              type=\"text\"\n              placeholder=\"# of Points\"\n            />\n            <br />\n          </div>\n        );\n      } else if (comp.Type === \"audio\") {\n        return (\n          <div className=\"comps orange-border\">\n            <div style={{ display: \"flex\" }}>\n              <h2>Audio</h2>\n              <button onClick={onCompDel} id={comp.CompID} className=\"compDel\">\n                <FontAwesomeIcon className=\"compDelIcon\" icon={faTimes} />\n              </button>\n            </div>\n\n            <div className=\"wizardPair\">\n              <h3 className=\"h3\">Question Audio:</h3>\n              <div>\n                <input id={`select${i}`} type=\"file\" />\n                <p className=\"smallDesc\">\n                  Enter an optional custom file name. Leaving the field blank\n                  will use the current file name.\n                </p>\n                <input\n                  id={`fileName${i}`}\n                  type=\"text\"\n                  placeholder=\"Type file name..\"\n                />\n              </div>\n            </div>\n            <br />\n            <p className=\"compLabel\">Question:</p>\n            <input\n              className=\"tbComp question\"\n              id={`tbQuestion${i}`}\n              type=\"text\"\n              placeholder=\"Question\"\n            />\n\n            <p className=\"compLabel\">Options:</p>\n            <input\n              className=\"tbComp opt\"\n              id={`tbOption1-${i}`}\n              type=\"text\"\n              placeholder=\"Option 1\"\n            />\n            <input\n              className=\"tbComp opt\"\n              id={`tbOption2-${i}`}\n              type=\"text\"\n              placeholder=\"Option 2\"\n            />\n            <input\n              className=\"tbComp opt\"\n              id={`tbOption3-${i}`}\n              type=\"text\"\n              placeholder=\"Option 3\"\n            />\n            <input\n              className=\"tbComp opt\"\n              id={`tbOption4-${i}`}\n              type=\"text\"\n              placeholder=\"Option 4\"\n            />\n\n            <p className=\"compLabel\">Answer:</p>\n            <input\n              className=\"tbComp answer\"\n              id={`tbAnswer${i}`}\n              type=\"text\"\n              placeholder=\"Answer\"\n            />\n\n            <p className=\"compLabel\">Points:</p>\n            <input\n              className=\"tbComp points\"\n              id={`tbPoints${i}`}\n              type=\"text\"\n              placeholder=\"# of Points\"\n            />\n          </div>\n        );\n      } else if (comp.Type === \"video\") {\n        return (\n          <div className=\"comps pink-border\">\n            <div style={{ display: \"flex\" }}>\n              <h2>Video</h2>\n              <button onClick={onCompDel} id={comp.CompID} className=\"compDel\">\n                <FontAwesomeIcon className=\"compDelIcon\" icon={faTimes} />\n              </button>\n            </div>\n\n            <div className=\"wizardPair\">\n              <h3 className=\"h3\">Question Video:</h3>\n              <div>\n                <input id={`select${i}`} type=\"file\" />\n                <p className=\"smallDesc\">\n                  Enter an optional custom file name. Leaving the field blank\n                  will use the current file name.\n                </p>\n                <input\n                  id={`fileName${i}`}\n                  type=\"text\"\n                  placeholder=\"Type file name..\"\n                />\n              </div>\n            </div>\n            <br />\n            <p className=\"compLabel\">Question:</p>\n            <input\n              className=\"tbComp question\"\n              id={`tbQuestion${i}`}\n              type=\"text\"\n              placeholder=\"Question\"\n            />\n\n            <p className=\"compLabel\">Options:</p>\n            <input\n              className=\"tbComp opt\"\n              id={`tbOption1-${i}`}\n              type=\"text\"\n              placeholder=\"Option 1\"\n            />\n            <input\n              className=\"tbComp opt\"\n              id={`tbOption2-${i}`}\n              type=\"text\"\n              placeholder=\"Option 2\"\n            />\n            <input\n              className=\"tbComp opt\"\n              id={`tbOption3-${i}`}\n              type=\"text\"\n              placeholder=\"Option 3\"\n            />\n            <input\n              className=\"tbComp opt\"\n              id={`tbOption4-${i}`}\n              type=\"text\"\n              placeholder=\"Option 4\"\n            />\n\n            <p className=\"compLabel\">Answer:</p>\n            <input\n              className=\"tbComp answer\"\n              id={`tbAnswer${i}`}\n              type=\"text\"\n              placeholder=\"Answer\"\n            />\n\n            <p className=\"compLabel\">Points:</p>\n            <input\n              className=\"tbComp points\"\n              id={`tbPoints${i}`}\n              type=\"text\"\n              placeholder=\"# of Points\"\n            />\n          </div>\n        );\n      } else if (comp.Type === \"image\") {\n        return (\n          <div className=\"comps green-border\">\n            <div style={{ display: \"flex\" }}>\n              <h2>Image</h2>\n              <button onClick={onCompDel} id={comp.CompID} className=\"compDel\">\n                <FontAwesomeIcon className=\"compDelIcon\" icon={faTimes} />\n              </button>\n            </div>\n\n            <div className=\"wizardPair\">\n              <h3 className=\"h3\">Question Image:</h3>\n              <div>\n                <input id={`select${i}`} type=\"file\" />\n                <p className=\"smallDesc\">\n                  Enter an optional custom file name. Leaving the field blank\n                  will use the current file name.\n                </p>\n                <input\n                  id={`fileName${i}`}\n                  type=\"text\"\n                  placeholder=\"Type file name..\"\n                />\n              </div>\n            </div>\n            <br />\n            <p className=\"compLabel\">Question:</p>\n            <input\n              className=\"tbComp question\"\n              id={`tbQuestion${i}`}\n              type=\"text\"\n              placeholder=\"Question\"\n            />\n\n            <p className=\"compLabel\">Options:</p>\n            <input\n              className=\"tbComp opt\"\n              id={`tbOption1-${i}`}\n              type=\"text\"\n              placeholder=\"Option 1\"\n            />\n            <input\n              className=\"tbComp opt\"\n              id={`tbOption2-${i}`}\n              type=\"text\"\n              placeholder=\"Option 2\"\n            />\n            <input\n              className=\"tbComp opt\"\n              id={`tbOption3-${i}`}\n              type=\"text\"\n              placeholder=\"Option 3\"\n            />\n            <input\n              className=\"tbComp opt\"\n              id={`tbOption4-${i}`}\n              type=\"text\"\n              placeholder=\"Option 4\"\n            />\n\n            <p className=\"compLabel\">Answer:</p>\n            <input\n              className=\"tbComp answer\"\n              id={`tbAnswer${i}`}\n              type=\"text\"\n              placeholder=\"Answer\"\n            />\n\n            <p className=\"compLabel\">Points:</p>\n            <input\n              className=\"tbComp points\"\n              id={`tbPoints${i}`}\n              type=\"text\"\n              placeholder=\"# of Points\"\n            />\n          </div>\n        );\n      }\n    });\n  };\n\n  // CLICK\n  const onCompDel = (event) => {\n    const compID = event.target.getAttribute(\"id\");\n\n    const allComps = [...components];\n    const filtered = allComps.filter((c) => c.CompID !== compID);\n\n    dispatch(storeTeacherQuizComponentsAction(filtered));\n  };\n  const onChooseComp = (event) => {\n    const choice = event.target.getAttribute(\"id\");\n    const rand1 = RandomString();\n    const rand2 = RandomString();\n    const compID = `Comp${rand1}${rand2}`;\n\n    if (choice === \"btnMultiple\") {\n      const allComps = [...components];\n      allComps.push({\n        Type: \"multiple\",\n        CompID: compID,\n      });\n\n      dispatch(storeTeacherQuizComponentsAction(allComps));\n    } else if (choice === \"btnShort\") {\n      const allComps = [...components];\n      allComps.push({\n        Type: \"short\",\n        CompID: compID,\n      });\n\n      dispatch(storeTeacherQuizComponentsAction(allComps));\n    } else if (choice === \"btnLong\") {\n      const allComps = [...components];\n      allComps.push({\n        Type: \"long\",\n        CompID: compID,\n      });\n\n      dispatch(storeTeacherQuizComponentsAction(allComps));\n    } else if (choice === \"btnTrueFalse\") {\n      const allComps = [...components];\n      allComps.push({\n        Type: \"trueFalse\",\n        CompID: compID,\n      });\n\n      dispatch(storeTeacherQuizComponentsAction(allComps));\n    } else if (choice === \"btnAudio\") {\n      const allComps = [...components];\n      allComps.push({\n        Type: \"audio\",\n        CompID: compID,\n      });\n\n      dispatch(storeTeacherQuizComponentsAction(allComps));\n    } else if (choice === \"btnVideo\") {\n      const allComps = [...components];\n      allComps.push({\n        Type: \"video\",\n        CompID: compID,\n      });\n\n      dispatch(storeTeacherQuizComponentsAction(allComps));\n    } else if (choice === \"btnImage\") {\n      const allComps = [...components];\n      allComps.push({\n        Type: \"image\",\n        CompID: compID,\n      });\n\n      dispatch(storeTeacherQuizComponentsAction(allComps));\n    }\n  };\n\n  // POST\n  const saveQuiz = () => {\n    const quizName = document.querySelector(\"#tbQuizName\").value;\n    const quizDesc = document.querySelector(\"#taQuizDesc\").value;\n\n    const allComponents = [];\n\n    // Fill up components array\n    components.forEach((comp, i) => {\n      if (comp.Type === \"multiple\") {\n        const question = document.querySelector(`#tbQuestion${i}`).value;\n        const options = [];\n        for (let a = 1; a <= 4; a = a + 1) {\n          const opt = document.querySelector(`#tbOption${a}-${i}`).value;\n          options.push(opt);\n        }\n        const answer = document.querySelector(`#tbAnswer${i}`).value;\n        const points = document.querySelector(`#tbPoints${i}`).value;\n\n        const tempObj = {\n          Type: \"multiple\",\n          Question: question,\n          Options: options,\n          Answer: answer,\n          Order: i + 1,\n          Points: points,\n        };\n\n        allComponents.push(tempObj);\n      } else if (comp.Type === \"short\") {\n        const prompt = document.querySelector(`#tbShortPrompt${i}`).value;\n        const answer = document.querySelector(`#tbShortAns${i}`).value;\n        const points = document.querySelector(`#tbPoints${i}`).value;\n\n        const tempObj = {\n          Type: \"short\",\n          Prompt: prompt,\n          Answer: answer,\n          Order: i + 1,\n          Points: points,\n        };\n\n        allComponents.push(tempObj);\n      } else if (comp.Type === \"long\") {\n        const prompt = document.querySelector(`#tbLongPrompt${i}`).value;\n        const answer = document.querySelector(`#taLongAns${i}`).value;\n        const points = document.querySelector(`#tbPoints${i}`).value;\n\n        const tempObj = {\n          Type: \"long\",\n          Prompt: prompt,\n          Answer: answer,\n          Order: i + 1,\n          Points: points,\n        };\n\n        allComponents.push(tempObj);\n      } else if (comp.Type === \"trueFalse\") {\n        const prompt = document.querySelector(`#tbTrueFalsePrompt${i}`).value;\n        const raTrue = document.querySelector(`#raTrue${i}`).checked;\n        const raFalse = document.querySelector(`#raFalse${i}`).checked;\n        const points = document.querySelector(`#tbPoints${i}`).value;\n\n        let res = false;\n        if (raTrue) {\n          res = true;\n        }\n\n        const tempObj = {\n          Type: \"trueFalse\",\n          Prompt: prompt,\n          Answer: res,\n          Order: i + 1,\n          Points: points,\n        };\n\n        allComponents.push(tempObj);\n      } else if (comp.Type === \"audio\") {\n        const audio = programUpload(i);\n\n        const question = document.querySelector(`#tbQuestion${i}`).value;\n        const options = [];\n        for (let a = 1; a <= 4; a = a + 1) {\n          const opt = document.querySelector(`#tbOption${a}-${i}`).value;\n          options.push(opt);\n        }\n        const answer = document.querySelector(`#tbAnswer${i}`).value;\n        const points = document.querySelector(`#tbPoints${i}`).value;\n\n        const tempObj = {\n          Type: \"audio\",\n          Audio: audio,\n          Question: question,\n          Options: options,\n          Answer: answer,\n          Order: i + 1,\n          Points: points,\n        };\n\n        allComponents.push(tempObj);\n      } else if (comp.Type === \"video\") {\n        const video = programUpload(i);\n\n        const question = document.querySelector(`#tbQuestion${i}`).value;\n        const options = [];\n        for (let a = 1; a <= 4; a = a + 1) {\n          const opt = document.querySelector(`#tbOption${a}-${i}`).value;\n          options.push(opt);\n        }\n        const answer = document.querySelector(`#tbAnswer${i}`).value;\n        const points = document.querySelector(`#tbPoints${i}`).value;\n\n        const tempObj = {\n          Type: \"video\",\n          Video: video,\n          Question: question,\n          Options: options,\n          Answer: answer,\n          Order: i + 1,\n          Points: points,\n        };\n\n        allComponents.push(tempObj);\n      } else if (comp.Type === \"image\") {\n        const imagePath = programUpload(i);\n\n        const question = document.querySelector(`#tbQuestion${i}`).value;\n        const options = [];\n        for (let a = 1; a <= 4; a = a + 1) {\n          const opt = document.querySelector(`#tbOption${a}-${i}`).value;\n          options.push(opt);\n        }\n        const answer = document.querySelector(`#tbAnswer${i}`).value;\n        const points = document.querySelector(`#tbPoints${i}`).value;\n\n        const tempObj = {\n          Type: \"image\",\n          Image: imagePath,\n          Question: question,\n          Options: options,\n          Answer: answer,\n          Order: i + 1,\n          Points: points,\n        };\n\n        allComponents.push(tempObj);\n      }\n    });\n\n    // Save in DB\n    const rand1 = RandomString();\n    const rand2 = RandomString();\n    const quizID = `Quiz${rand1}${rand2}`;\n\n    courses_Collection\n      .doc(course.id)\n      .collection(\"Quizzes\")\n      .doc(quizID)\n      .set({\n        Name: quizName,\n        Desc: quizDesc,\n        Order: quizCount + 1,\n      })\n      .catch((err) => console.log(err));\n\n    allComponents.forEach((comp) => {\n      const rand3 = RandomString();\n      const rand4 = RandomString();\n      const compID = `Comp${rand3}${rand4}`;\n\n      if (comp.Type === \"multiple\") {\n        courses_Collection\n          .doc(course.id)\n          .collection(\"Quizzes\")\n          .doc(quizID)\n          .collection(\"Components\")\n          .doc(compID)\n          .set({\n            Type: \"multiple\",\n            Question: comp.Question,\n            Options: comp.Options,\n            Answer: comp.Answer,\n            Points: comp.Points,\n            Order: comp.Order,\n          })\n          .catch((err) => console.log(err));\n      } else if (comp.Type === \"short\") {\n        courses_Collection\n          .doc(course.id)\n          .collection(\"Quizzes\")\n          .doc(quizID)\n          .collection(\"Components\")\n          .doc(compID)\n          .set({\n            Type: \"short\",\n            Order: comp.Order,\n            Prompt: comp.Prompt,\n            Answer: comp.Answer,\n            Points: comp.Points,\n          })\n          .catch((err) => console.log(err));\n      } else if (comp.Type === \"long\") {\n        courses_Collection\n          .doc(course.id)\n          .collection(\"Quizzes\")\n          .doc(quizID)\n          .collection(\"Components\")\n          .doc(compID)\n          .set({\n            Type: \"long\",\n            Prompt: comp.Prompt,\n            Answer: comp.Answer,\n            Points: comp.Points,\n            Order: comp.Order,\n          })\n          .catch((err) => console.log(err));\n      } else if (comp.Type === \"trueFalse\") {\n        courses_Collection\n          .doc(course.id)\n          .collection(\"Quizzes\")\n          .doc(quizID)\n          .collection(\"Components\")\n          .doc(compID)\n          .set({\n            Type: \"trueFalse\",\n            Prompt: comp.Prompt,\n            Answer: comp.Answer,\n            Points: comp.Points,\n            Order: comp.Order,\n          })\n          .catch((err) => console.log(err));\n      } else if (comp.Type === \"audio\") {\n        courses_Collection\n          .doc(course.id)\n          .collection(\"Quizzes\")\n          .doc(quizID)\n          .collection(\"Components\")\n          .doc(compID)\n          .set({\n            Type: \"audio\",\n            Audio: comp.Audio,\n            Question: comp.Question,\n            Options: comp.Options,\n            Answer: comp.Answer,\n            Points: comp.Points,\n            Order: comp.Order,\n          })\n          .catch((err) => console.log(err));\n      } else if (comp.Type === \"video\") {\n        courses_Collection\n          .doc(course.id)\n          .collection(\"Quizzes\")\n          .doc(quizID)\n          .collection(\"Components\")\n          .doc(compID)\n          .set({\n            Type: \"video\",\n            Video: comp.Video,\n            Question: comp.Question,\n            Options: comp.Options,\n            Answer: comp.Answer,\n            Points: comp.Points,\n            Order: comp.Order,\n          })\n          .catch((err) => console.log(err));\n      } else if (comp.Type === \"image\") {\n        courses_Collection\n          .doc(course.id)\n          .collection(\"Quizzes\")\n          .doc(quizID)\n          .collection(\"Components\")\n          .doc(compID)\n          .set({\n            Type: \"image\",\n            Image: comp.Image,\n            Question: comp.Question,\n            Options: comp.Options,\n            Answer: comp.Answer,\n            Points: comp.Points,\n            Order: comp.Order,\n          })\n          .catch((err) => console.log(err));\n      }\n    });\n  };\n\n  // PROGRAM\n  const programUpload = (idx) => {\n    const file = document.querySelector(`#select${idx}`).files[0];\n\n    if (file) {\n      let name = document.querySelector(`#fileName${idx}`).value;\n      if (name === \"\") {\n        name = file.name;\n      }\n      const metadata = {\n        contentType: file.type,\n      };\n\n      // Storage Ref\n      let ref;\n\n      if (file.type === \"video/mp4\") {\n        ref = firebase.storage().ref(\"Videos/\");\n        if (name !== file.name) {\n          name = name + \".mp4\";\n        }\n      } else if (file.type === \"audio/mpeg\") {\n        ref = firebase.storage().ref(\"Audio/\");\n        if (name !== file.name) {\n          name = name + \".mp3\";\n        }\n      } else if (file.type === \"image/jpeg\") {\n        ref = firebase.storage().ref(\"Images/\");\n        if (name !== file.name) {\n          name = name + \".jpg\";\n        }\n      } else if (file.type === \"image/png\") {\n        ref = firebase.storage().ref(\"Images/\");\n        if (name !== file.name) {\n          name = name + \".png\";\n        }\n      } else if (file.type === \"application/pdf\") {\n        ref = firebase.storage().ref(\"PDF/\");\n        if (name !== file.name) {\n          name = name + \".pdf\";\n        }\n      }\n\n      const task = ref.child(name).put(file, metadata);\n      task\n        .then((snapshot) => snapshot.ref.getDownloadURL())\n        .then((url) => {\n          console.log(url);\n        })\n        .catch(console.error);\n\n      return name;\n    }\n  };\n\n  //   NAV\n  const navCreateLesson = () => {\n    saveQuiz();\n    dispatch(storeTeacherQuizComponentsAction([]));\n    history.push(\"/teacher-new-lesson\");\n  };\n  const navSaveExit = () => {\n    saveQuiz();\n    dispatch(storeTeacherQuizComponentsAction([]));\n    history.push(\"/teacher-courses\");\n  };\n\n  useEffect(() => {\n    if (!teacherAuthID) {\n      history.push(\"/teacherdash\");\n      return;\n    }\n\n    getQuizCount();\n  }, []);\n  return (\n    <div>\n      {/* Top Bar */}\n      <div>\n        <TopBar />\n      </div>\n\n      <div className=\"content\">\n        <h1>Quiz Details</h1>\n\n        {/* Quiz Components Panel */}\n        <div className=\"compPanel\">\n          <h3>Quiz Components</h3>\n          <button onClick={onChooseComp} id=\"btnMultiple\" className=\"btnComp\">\n            Multiple Choice\n          </button>\n          <button onClick={onChooseComp} id=\"btnShort\" className=\"btnComp\">\n            Short Answer\n          </button>\n          <button onClick={onChooseComp} id=\"btnLong\" className=\"btnComp\">\n            Long Answer\n          </button>\n          <button onClick={onChooseComp} id=\"btnTrueFalse\" className=\"btnComp\">\n            True or False\n          </button>\n          <button onClick={onChooseComp} id=\"btnAudio\" className=\"btnComp\">\n            Audio\n          </button>\n          <button onClick={onChooseComp} id=\"btnVideo\" className=\"btnComp\">\n            Video\n          </button>\n          <button onClick={onChooseComp} id=\"btnImage\" className=\"btnComp\">\n            Image\n          </button>\n        </div>\n\n        {/* Quiz Content */}\n        <div className=\"bodyWrapper\">\n          <div className=\"wizardPair\">\n            <h3 className=\"h3\">Quiz Name:</h3>\n            <input\n              className=\"tb\"\n              id=\"tbQuizName\"\n              type=\"text\"\n              placeholder=\"Quiz Name\"\n            />\n          </div>\n\n          <div className=\"wizardPair\">\n            <h3 className=\"h3\">Quiz Description:</h3>\n            <textarea\n              className=\"ta\"\n              id=\"taQuizDesc\"\n              placeholder=\"Quiz Description\"\n            ></textarea>\n          </div>\n\n          <div>\n            {/* Add Components here */}\n            {handleComponents()}\n          </div>\n\n          <div className=\"btnFlex\">\n            <button onClick={navSaveExit} className=\"btnFormSecondary\">\n              Save &amp; Exit\n            </button>\n            <button onClick={navCreateLesson} className=\"btnFormPrimary\">\n              Create Lesson {`>`}\n            </button>\n          </div>\n        </div>\n\n        {/* END */}\n      </div>\n\n      {/* Footer */}\n      <div>\n        <DashFooter />\n      </div>\n    </div>\n  );\n}\n","/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Contact.js",[],"/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Teachers/Forums/ForumBlocks.js",[],"/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Teachers/Courses/CourseOverview.js",["730","731"],"import React, { useEffect } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { useHistory } from \"react-router-dom\";\n\nimport TopBar from \"../Dash/TopBar\";\nimport DashFooter from \"../Dash/DashFooter\";\nimport FileUpload, { programUpload } from \"../../FileUpload\";\nimport firebase, {\n  teachers_Collection,\n  courses_Collection,\n} from \"../../../utils/firebase\";\nimport { firebaseLooper } from \"../../../utils/tools\";\nimport {\n  storeTeacherAllCoursesAction,\n  storeTeacherSingleCourseAction,\n  storeTeacherSingleCourseLessonAction,\n  storeTeacherSingleCourseLessonsAction,\n  storeTeacherSingleCourseQuizAction,\n  storeTeacherSingleCourseQuizzesAction,\n  storeTeacherStudentGeneralInfoAction,\n  toggleTeacherSingleCourseLessonsListAction,\n  toggleTeacherSingleCourseQuizzesListAction,\n  storeTeacherSingleCourseAssignedStudsAction,\n  storeTeacherSingleCourseAssigneesAction,\n} from \"../../../redux/actions\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport {\n  faArrowRight,\n  faBars,\n  faPlus,\n  faSortDown,\n  faTimes,\n  faWindowMinimize,\n} from \"@fortawesome/free-solid-svg-icons\";\n\nexport default function CourseOverview() {\n  const teacherAuthID = useSelector((state) => state.storeTeacherAuthIDReducer);\n  const history = useHistory();\n  const dispatch = useDispatch();\n\n  const toggleLessonsList = useSelector(\n    (state) => state.toggleTeacherSingleCourseLessonsListReducer\n  );\n  const toggleQuizzesList = useSelector(\n    (state) => state.toggleTeacherSingleCourseQuizzesListReducer\n  );\n\n  const courses = useSelector((state) => state.storeTeacherAllCoursesReducer);\n  const course = useSelector((state) => state.storeTeacherSingleCourseReducer);\n  const students = useSelector(\n    (state) => state.storeTeacherStudentGeneralInfoReducer\n  );\n  const assigned = useSelector(\n    (state) => state.storeTeacherSingleCourseAssignedStudsReducer\n  );\n  const assignees = useSelector(\n    (state) => state.storeTeacherSingleCourseAssigneesReducer\n  );\n\n  const lessons = useSelector(\n    (state) => state.storeTeacherSingleCourseLessonsReducer\n  );\n  const quizzes = useSelector(\n    (state) => state.storeTeacherSingleCourseQuizzesReducer\n  );\n\n  //   GET\n  const getAllLessons = () => {\n    courses_Collection\n      .doc(course.id)\n      .collection(\"Lessons\")\n      .orderBy(\"Order\", \"asc\")\n      .get()\n      .then((snapshot) => {\n        const lessonsData = firebaseLooper(snapshot);\n        dispatch(storeTeacherSingleCourseLessonsAction(lessonsData));\n      })\n      .catch((err) => console.log(err));\n  };\n  const getAllQuizzes = () => {\n    courses_Collection\n      .doc(course.id)\n      .collection(\"Quizzes\")\n      .orderBy(\"Order\", \"asc\")\n      .get()\n      .then((snapshot) => {\n        const quizzesData = firebaseLooper(snapshot);\n        dispatch(storeTeacherSingleCourseQuizzesAction(quizzesData));\n      })\n      .catch((err) => console.log(err));\n  };\n  const getAllStudents = () => {\n    teachers_Collection\n      .doc(teacherAuthID)\n      .collection(\"Students\")\n      .get()\n      .then((snapshot) => {\n        const studentData = firebaseLooper(snapshot);\n        dispatch(storeTeacherStudentGeneralInfoAction(studentData));\n      })\n      .catch((err) => console.log(err));\n  };\n  const getAssigneeStuds = () => {\n    teachers_Collection\n      .doc(teacherAuthID)\n      .collection(\"Students\")\n      .where(\"Courses\", \"array-contains\", course.id)\n      .get()\n      .then((snapshot) => {\n        const studsData = firebaseLooper(snapshot);\n        dispatch(storeTeacherSingleCourseAssigneesAction(studsData));\n      })\n      .catch((err) => console.log(err));\n  };\n\n  // HANDLE\n  const handleLessonsList = () => {\n    return lessons.map((less, i) => {\n      return (\n        <div className=\"lessonBlock\" key={i}>\n          <FontAwesomeIcon className=\"sortIcon\" icon={faBars} />\n          <h3 className=\"lessonListName\">{less.Name}</h3>\n          <button onClick={navLessonEdit} id={less.id} className=\"btnListEdit\">\n            Edit\n          </button>\n          <button onClick={removeLesson} id={less.id} className=\"compDel\">\n            <FontAwesomeIcon icon={faTimes} />\n          </button>\n        </div>\n      );\n    });\n  };\n  const handleQuizzesList = () => {\n    return quizzes.map((quiz, i) => {\n      return (\n        <div className=\"lessonBlock\" key={i}>\n          <FontAwesomeIcon className=\"sortIcon\" icon={faBars} />\n          <h3 className=\"lessonListName\">{quiz.Name}</h3>\n          <button id={quiz.id} onClick={navQuizEdit} className=\"btnListEdit\">\n            Edit\n          </button>\n          <button className={removeQuiz} id={quiz.id} className=\"compDel\">\n            <FontAwesomeIcon icon={faTimes} />\n          </button>\n        </div>\n      );\n    });\n  };\n  const handleCourseThumb = () => {\n    courses.forEach((c, i) => {\n      var storage = firebase.storage();\n      var storageRef = storage.ref(`Images/`);\n      //urll is the url for image\n      storageRef\n        .child(c.Thumbnail)\n        .getDownloadURL()\n        .then(function (url) {\n          // Or inserted into an <img> element:\n          let img = document.getElementById(`imgThumbnail`);\n          img.src = url;\n        })\n        .catch((err) => console.log(err));\n    });\n  };\n  const handleAssignedSearchStudList = () => {\n    return assigned.map((assignee, i) => {\n      return (\n        <div className=\"searchAssigneeWrapper\" key={i}>\n          <button\n            id={assignee.id}\n            onClick={onAssigneeClick}\n            className=\"btnSearchAssignee\"\n          >\n            {assignee.FirstName} {assignee.LastName}\n          </button>\n        </div>\n      );\n    });\n  };\n  const handleAssigneesList = () => {\n    return assignees.map((assign, i) => {\n      return (\n        <div key={i}>\n          <p className=\"assignee\">\n            <FontAwesomeIcon style={{ color: \"#3E00F9\" }} icon={faArrowRight} />\n            <span style={{ marginLeft: \"10px\" }}>\n              {assign.FirstName} {assign.LastName}\n            </span>\n          </p>\n        </div>\n      );\n    });\n  };\n\n  // POST\n  const saveChanges = () => {\n    // Save course details here\n    const courseName = document.querySelector(\"#tbCourseName\").value;\n    const courseDesc = document.querySelector(\"#taCourseDesc\").value;\n    let courseThumb = programUpload();\n    if (courseThumb === undefined) {\n      courseThumb = course.Thumbnail;\n    }\n\n    courses_Collection\n      .doc(course.id)\n      .update({\n        Name: courseName,\n        Desc: courseDesc,\n        Thumbnail: courseThumb,\n      })\n      .catch((err) => console.log(err));\n\n    const allCourses = [...courses];\n    allCourses.forEach((c) => {\n      if (c.id === course.id) {\n        c = {\n          id: c.id,\n          Name: courseName,\n          Desc: courseDesc,\n          Thumbnail: courseThumb,\n        };\n        dispatch(storeTeacherAllCoursesAction(allCourses));\n      }\n    });\n\n    history.push(\"/teacher-courses\");\n  };\n\n  // REMOVE\n  const removeLesson = (event) => {\n    const lessonID = event.target.getAttribute(\"id\");\n\n    // Remove from DB\n    courses_Collection\n      .doc(course.id)\n      .collection(\"Lessons\")\n      .doc(lessonID)\n      .delete()\n      .catch((err) => console.log(err));\n\n    // Dispatch\n    const allLessons = [...lessons];\n    const filtered = allLessons.filter((l) => l.id !== lessonID);\n\n    dispatch(storeTeacherSingleCourseLessonsAction(filtered));\n  };\n  const removeQuiz = (event) => {\n    const quizID = event.target.getAttribute(\"id\");\n\n    // Remove from DB\n    courses_Collection\n      .doc(course.id)\n      .collection(\"Quizzes\")\n      .doc(quizID)\n      .collection(\"Components\")\n      .get()\n      .then((snapshot) => {\n        const compsData = firebaseLooper(snapshot);\n        compsData.forEach((com) => {\n          courses_Collection\n            .doc(course.id)\n            .collection(\"Quizzes\")\n            .doc(quizID)\n            .collection(\"Components\")\n            .doc(com.id)\n            .delete()\n            .catch((err) => console.log(err));\n        });\n      })\n      .catch((err) => console.log(err));\n\n    courses_Collection\n      .doc(course.id)\n      .collection(\"Quizzes\")\n      .doc(quizID)\n      .delete()\n      .catch((err) => console.log(err));\n\n    // DIspatch\n    const allQuizzes = [...quizzes];\n    const filtered = allQuizzes.filter((q) => q.id !== quizID);\n\n    dispatch(storeTeacherSingleCourseQuizzesAction(filtered));\n  };\n\n  // NAV\n  const navLessonEdit = (event) => {\n    const lessonID = event.target.getAttribute(\"id\");\n\n    lessons.forEach((less) => {\n      if (less.id === lessonID) {\n        dispatch(storeTeacherSingleCourseLessonAction(less));\n      }\n    });\n\n    history.push(\"/teacher-edit-lesson\");\n  };\n  const navQuizEdit = (event) => {\n    const quizID = event.target.getAttribute(\"id\");\n\n    quizzes.forEach((quiz) => {\n      if (quiz.id === quizID) {\n        dispatch(storeTeacherSingleCourseQuizAction(quiz));\n      }\n    });\n\n    history.push(\"/teacher-edit-quiz\");\n  };\n  const navNewLesson = () => {\n    dispatch(storeTeacherSingleCourseAction(course));\n\n    history.push(\"/teacher-new-lesson\");\n  };\n  const navNewQuiz = () => {\n    dispatch(storeTeacherSingleCourseAction(course));\n\n    history.push(\"/teacher-new-quiz\");\n  };\n\n  // SORTABLE\n  const setSortables = () => {};\n\n  // ONCHANGE\n  const onStudSearch = () => {\n    const search = document.querySelector(\"#tbStudSearch\").value.toLowerCase();\n\n    let results = [];\n    students.forEach((stud) => {\n      const studName = `${stud.FirstName} ${stud.LastName} ${stud.StudentID}`.toLowerCase();\n      if (studName.includes(search)) {\n        results.push(stud);\n      }\n    });\n\n    dispatch(storeTeacherSingleCourseAssignedStudsAction(results));\n    if (search === \"\") {\n      dispatch(storeTeacherSingleCourseAssignedStudsAction([]));\n    }\n  };\n\n  // CLICK\n  const onAssigneeClick = (event) => {\n    const studID = event.target.getAttribute(\"id\");\n    let valid = true;\n\n    assignees.forEach((a) => {\n      if (a.id === studID) {\n        valid = false;\n      }\n    });\n\n    if (valid) {\n      // Save to DB\n\n      teachers_Collection\n        .doc(teacherAuthID)\n        .collection(\"Students\")\n        .doc(studID)\n        .update({\n          Courses: firebase.firestore.FieldValue.arrayUnion(course.id),\n        })\n        .catch((err) => console.log(err));\n\n      // DIspatch\n      const allAssignees = [...assignees];\n      students.forEach((stud) => {\n        if (stud.id === studID) {\n          allAssignees.push(stud);\n\n          dispatch(storeTeacherSingleCourseAssigneesAction(allAssignees));\n        }\n      });\n    }\n  };\n\n  useEffect(() => {\n    if (!teacherAuthID) {\n      history.push(\"/teacherdash\");\n      return;\n    }\n\n    getAllLessons();\n    getAllQuizzes();\n    getAllStudents();\n    getAssigneeStuds();\n\n    setSortables();\n    handleCourseThumb();\n  }, []);\n  return (\n    <div>\n      {/* Top Bar */}\n      <div>\n        {/* <button onClick={} style={{ display: \"none\" }}>\n          Rerender\n        </button> */}\n        <TopBar />\n      </div>\n\n      <div className=\"content\">\n        <h1>Course Overview</h1>\n\n        <div className=\"courseContent\">\n          <h1>{course.Name}</h1>\n          <img className=\"courseThumb\" id=\"imgThumbnail\" src=\"\" alt=\"\" />\n\n          <div className=\"wizardPair\">\n            <h3 className=\"h3\">Course Name:</h3>\n            <input\n              className=\"tb\"\n              id=\"tbCourseName\"\n              type=\"text\"\n              defaultValue={course.Name}\n            />\n          </div>\n\n          <div className=\"wizardPair\">\n            <h3 className=\"h3\">Course Description:</h3>\n            <textarea\n              className=\"ta\"\n              id=\"taCourseDesc\"\n              defaultValue={course.Desc}\n            ></textarea>\n          </div>\n\n          <div className=\"wizardPair\">\n            <h3 className=\"h3\">Course Thumbnail:</h3>\n            <FileUpload />\n          </div>\n\n          {/* Assign Students */}\n          <div className=\"wizardPair\">\n            <h3 className=\"h3\">Assigned Students:</h3>\n            {handleAssigneesList()}\n            <input\n              onChange={onStudSearch}\n              id=\"tbStudSearch\"\n              type=\"text\"\n              placeholder=\"Type student name...\"\n            />\n            <div className=\"studSearchList\">\n              {handleAssignedSearchStudList()}\n            </div>\n          </div>\n\n          <button onClick={saveChanges} className=\"btnSave\">\n            Save Changes\n          </button>\n          <br />\n          <br />\n\n          <h1>Course Components</h1>\n\n          <div className=\"compAccordion\">\n            <button\n              className=\"btnAccordion\"\n              onClick={() =>\n                dispatch(toggleTeacherSingleCourseLessonsListAction())\n              }\n            >\n              {toggleLessonsList ? (\n                <FontAwesomeIcon\n                  className=\"accordIcon\"\n                  icon={faWindowMinimize}\n                />\n              ) : (\n                <FontAwesomeIcon className=\"accordIcon\" icon={faSortDown} />\n              )}\n              Lessons\n            </button>\n            {toggleLessonsList ? (\n              <div id=\"sortableLessonsList\" className=\"hiddenList\">\n                {/* Insert List Here */}\n                {handleLessonsList()}\n                <button onClick={navNewLesson} className=\"btnNewComp\">\n                  <FontAwesomeIcon icon={faPlus} />\n                </button>\n              </div>\n            ) : null}\n          </div>\n\n          <div className=\"compAccordion\">\n            <button\n              className=\"btnAccordion\"\n              onClick={() =>\n                dispatch(toggleTeacherSingleCourseQuizzesListAction())\n              }\n            >\n              {toggleQuizzesList ? (\n                <FontAwesomeIcon\n                  className=\"accordIcon\"\n                  icon={faWindowMinimize}\n                />\n              ) : (\n                <FontAwesomeIcon className=\"accordIcon\" icon={faSortDown} />\n              )}\n              Quizzes\n            </button>\n            {toggleQuizzesList ? (\n              <div id=\"sortableQuizzesList\" className=\"hiddenList\">\n                {/* Insert List Here */}\n                {handleQuizzesList()}\n                <button onClick={navNewQuiz} className=\"btnNewComp\">\n                  <FontAwesomeIcon icon={faPlus} />\n                </button>\n              </div>\n            ) : null}\n          </div>\n        </div>\n      </div>\n\n      {/* Footer */}\n      <div>\n        <DashFooter />\n      </div>\n    </div>\n  );\n}\n","/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Teachers/Statistics/CourseStats.js",["732"],"import React, { useEffect } from \"react\";\n\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useHistory } from \"react-router-dom\";\n\nimport { statisticsObjectAction } from \"../../../redux/actions\";\n\nexport default function CourseStats() {\n  const history = useHistory();\n  const dispatch = useDispatch();\n\n  const teacherAuthID = useSelector((state) => state.storeTeacherAuthIDReducer);\n  const storageState = useSelector(\n    (state) => state.storeTeacherStatisticsGeneralInfoReducer\n  );\n  const storageObj = useSelector((state) => state.statisticsObjectReducer);\n\n  const getStorageObj = () => {\n    storageState.forEach((obj) => {\n      if (obj.id === \"CourseStats\") {\n        dispatch(statisticsObjectAction(obj));\n      }\n    });\n  };\n\n  useEffect(() => {\n    if (!teacherAuthID) {\n      history.push(\"/teacherdash\");\n    }\n    getStorageObj();\n  }, []);\n  return (\n    <div>\n      <h1>Course Stats</h1>\n      <hr />\n      <p># of Courses: {storageObj.Num}</p>\n    </div>\n  );\n}\n","/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Teachers/Groups/GroupsMain.js",["733"],"import React, { useEffect } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { useHistory } from \"react-router-dom\";\n\nimport { groups_Collection } from \"../../../utils/firebase\";\nimport { firebaseLooper } from \"../../../utils/tools\";\n\nimport TopBar from \"../Dash/TopBar\";\nimport DashFooter from \"../Dash/DashFooter\";\nimport RandomString from \"../../RandomString\";\nimport GetToday from \"../../GetToday\";\nimport {\n  storeTeacherGroupGeneralInfoAction,\n  toggleNewGroupFormAction,\n  storeSingleGroupAction,\n} from \"../../../redux/actions\";\n\nexport default function GroupsMain() {\n  const teacherAuthID = useSelector((state) => state.storeTeacherAuthIDReducer);\n  const history = useHistory();\n  const dispatch = useDispatch();\n\n  // Toggles\n  const toggleNewGroupForm = useSelector(\n    (state) => state.toggleNewGroupFormReducer\n  );\n\n  // Data\n  const groups = useSelector(\n    (state) => state.storeTeacherGroupGeneralInfoReducer\n  );\n\n  const getAllGroups = () => {\n    groups_Collection\n      .get()\n      .then((snapshot) => {\n        const groupData = firebaseLooper(snapshot);\n        dispatch(storeTeacherGroupGeneralInfoAction(groupData));\n      })\n      .catch((err) => console.log(err));\n  };\n\n  const removeGroup = (event) => {\n    const groupID = event.target.getAttribute(\"id\");\n\n    // Remove from DB\n    groups_Collection\n      .doc(groupID)\n      .delete()\n      .catch((err) => console.log(err));\n\n      \n\n    // Dispatch\n    const allGroups = [...groups];\n    const filtered = allGroups.filter((group) => group.id !== groupID);\n\n    dispatch(storeTeacherGroupGeneralInfoAction(filtered));\n\n    groups_Collection\n      .doc(groupID)\n      .delete()\n      .catch((err) => console.log(err));\n  };\n\n  const OnGroupSearch = () => {\n    const searchInput = document.querySelector(\"#tbGroupSearch\").value;\n\n    if (searchInput !== \"\") {\n      let filtered = [];\n\n      groups_Collection\n        .get()\n        .then((snapshot) => {\n          const groupData = firebaseLooper(snapshot);\n          groupData.forEach((gr) => {\n            const groupName = gr.Name.toLowerCase();\n            if (groupName.includes(searchInput)) {\n              filtered.push(gr);\n            }\n          });\n          dispatch(storeTeacherGroupGeneralInfoAction(filtered));\n        })\n        .catch((err) => console.log(err));\n    } else {\n      groups_Collection\n        .get()\n        .then((snapshot) => {\n          const groupData = firebaseLooper(snapshot);\n\n          dispatch(storeTeacherGroupGeneralInfoAction(groupData));\n        })\n        .catch((err) => console.log(err));\n    }\n  };\n\n  const handleGroupList = () => {\n    return groups.map((group, i) => {\n      return (\n        <div key={i}>\n          <h3>{group.Name}</h3>\n          <p>Host: {group.Host}</p>\n          <p>Created: {group.Date.toDate().toString().substr(4, 11)}</p>\n          <button id={group.id} onClick={navigateGroupPage}>\n            View Page\n          </button>\n          <button id={group.id} onClick={removeGroup}>\n            Remove\n          </button>\n        </div>\n      );\n    });\n  };\n\n  const handleNewGroupForm = () => {\n    return (\n      <div>\n        <br />\n        <div>\n          <button\n            onClick={() => {\n              dispatch(toggleNewGroupFormAction());\n            }}\n          >\n            Close\n          </button>\n        </div>\n        <div>\n          <label>Group Name:</label>\n          <input id=\"tbGroupNameText\" type=\"text\" placeholder=\"Group Name\" />\n        </div>\n        <div>\n          <label>Description:</label>\n          <textarea id=\"taDescText\" placeholder=\"Description\"></textarea>\n        </div>\n        <div>\n          <p>Access:</p>\n          <input type=\"radio\" id=\"raPublic\" name=\"raAccess\" value=\"public\" />\n          <label for=\"raPublic\">Public</label>\n          <p>Choosing public access will allow anyone submit a request.</p>\n          <br />\n          <input type=\"radio\" id=\"raPrivate\" name=\"raAccess\" value=\"private\" />\n          <label for=\"raPrivate\">Private</label>\n          <p>\n            Choosing private access will require users to use a key to join the\n            group.\n          </p>\n        </div>\n        <div>\n          <button onClick={createGroup}>Create</button>\n        </div>\n      </div>\n    );\n  };\n\n  const navigateGroupPage = (event) => {\n    const groupID = event.target.getAttribute(\"id\");\n\n    groups.forEach((gr) => {\n      if (gr.id === groupID) {\n        dispatch(storeSingleGroupAction(gr));\n      }\n    });\n\n    history.push(\"/teacher-group-page\");\n  };\n\n  const createGroup = () => {\n    const groupName = document.querySelector(\"#tbGroupNameText\").value;\n    const groupDesc = document.querySelector(\"#taDescText\").value;\n    let groupAccess = \"\";\n    const raPublic = document.querySelector(\"#raPublic\");\n    const raPrivate = document.querySelector(\"#raPrivate\");\n    if (raPublic.checked) {\n      groupAccess = \"public\";\n    } else if (raPrivate) {\n      groupAccess = \"private\";\n    }\n\n    // Save to DB\n    const rand1 = RandomString();\n    const rand2 = RandomString();\n    const groupID = `Group${rand1}${rand2}`;\n    const memberID = `Member${rand1}${rand2}`;\n    const postID = `Post${rand1}${rand2}`;\n\n    groups_Collection\n      .doc(groupID)\n      .set({\n        Name: groupName,\n        Date: GetToday(),\n        Host: teacherAuthID,\n        Desc: groupDesc,\n        Access: groupAccess,\n      })\n      .catch((err) => console.log(err));\n\n    groups_Collection\n      .doc(groupID)\n      .collection(\"Members\")\n      .doc(memberID)\n      .set({\n        Username: teacherAuthID,\n        Role: \"host\",\n      })\n      .catch((err) => console.log(err));\n\n    groups_Collection\n      .doc(groupID)\n      .collection(\"Posts\")\n      .doc(postID)\n      .set({})\n      .catch((err) => console.log(err));\n\n    // Dispatch\n    const newGroupList = [...groups];\n    newGroupList.push({\n      Name: groupName,\n      Date: GetToday(),\n      Host: teacherAuthID,\n      Desc: groupDesc,\n      Access: groupAccess,\n    });\n    dispatch(storeTeacherGroupGeneralInfoAction(newGroupList));\n    if (toggleNewGroupForm) {\n      dispatch(toggleNewGroupFormAction());\n    }\n  };\n\n  useEffect(() => {\n    if (!teacherAuthID) {\n      history.push(\"/teacherdash\");\n      return;\n    }\n\n    getAllGroups();\n  }, []);\n  return (\n    <div>\n      {/* Top Bar */}\n      <div>\n        <TopBar />\n      </div>\n\n      {/* Main Content */}\n      <div>\n        <div>\n          <h1>Groups</h1>\n        </div>\n        <div>\n          <input\n            onChange={OnGroupSearch}\n            id=\"tbGroupSearch\"\n            type=\"text\"\n            placeholder=\"Search\"\n          />\n          <button\n            onClick={() => {\n              dispatch(toggleNewGroupFormAction());\n            }}\n          >\n            Create New Group\n          </button>\n        </div>\n        <div>{toggleNewGroupForm ? handleNewGroupForm() : null}</div>\n        <hr />\n        <div>{handleGroupList()}</div>\n      </div>\n\n      {/* Footer */}\n      <div>\n        <DashFooter />\n      </div>\n    </div>\n  );\n}\n","/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Teachers/Courses/WizardEditLesson.js",["734"],"import React, { useEffect } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { useHistory } from \"react-router-dom\";\n\nimport TopBar from \"../Dash/TopBar\";\nimport DashFooter from \"../Dash/DashFooter\";\n\nimport FileUpload, { programUpload } from \"../../FileUpload\";\nimport {\n  storeTeacherSingleCourseLessonAction,\n  storeTeacherSingleCourseLessonsAction,\n} from \"../../../redux/actions\";\nimport { courses_Collection } from \"../../../utils/firebase\";\n\nexport default function WizardEditLesson() {\n  const teacherAuthID = useSelector((state) => state.storeTeacherAuthIDReducer);\n  const history = useHistory();\n  const dispatch = useDispatch();\n\n  const course = useSelector((state) => state.storeTeacherSingleCourseReducer);\n  const lessons = useSelector(\n    (state) => state.storeTeacherSingleCourseLessonsReducer\n  );\n  const lesson = useSelector(\n    (state) => state.storeTeacherSingleCourseLessonReducer\n  );\n\n  // HANDLE\n  const handleLessonForm = () => {\n    return (\n      <div>\n        <div className=\"wizardPair\">\n          <h3 className=\"h3\">Lesson Name:</h3>\n          <input\n            className=\"tb\"\n            id=\"tbLessonName\"\n            type=\"text\"\n            defaultValue={lesson.Name}\n          />\n        </div>\n\n        <div className=\"wizardPair\">\n          <h3 className=\"h3\">Lesson Description:</h3>\n          <textarea\n            className=\"ta\"\n            id=\"taLessonDesc\"\n            defaultValue={lesson.Desc}\n          ></textarea>\n        </div>\n\n        <div className=\"wizardPair\">\n          <h3 className=\"h3\">Lesson Video:</h3>\n          <FileUpload />\n        </div>\n\n        <div className=\"wizardPair\">\n          <h3 className=\"h3\">Lesson Text:</h3>\n          <p className=\"smallText\">\n            This section of the lesson will be available for the teacher to\n            include a text version of the video provided. This will be displayed\n            right underneath the video for the students to read as amn\n            alternative for watching the video.\n          </p>\n          <textarea\n            className=\"ta\"\n            id=\"taLessonText\"\n            defaultValue={lesson.Text}\n          ></textarea>\n        </div>\n      </div>\n    );\n  };\n\n  // POST\n  const saveChanges = () => {\n    const lessonName = document.querySelector(\"#tbLessonName\").value;\n    const lessonDesc = document.querySelector(\"#taLessonDesc\").value;\n    let lessonVideo = lesson.Video;\n    const lessonText = document.querySelector(\"#taLessonText\").value;\n\n    if (programUpload() !== undefined) {\n      lessonVideo = programUpload();\n    }\n\n    courses_Collection\n      .doc(course.id)\n      .collection(\"Lessons\")\n      .doc(lesson.id)\n      .update({\n        Name: lessonName,\n        Desc: lessonDesc,\n        Video: lessonVideo,\n        Text: lessonText,\n      })\n      .catch((err) => console.log(err));\n\n    // Dispatch\n    const allLessons = [...lessons];\n    allLessons.forEach((less) => {\n      if (less.id === lesson.id) {\n        less = {\n          id: lesson.id,\n          Name: lessonName,\n          Desc: lessonDesc,\n          Video: lessonVideo,\n          Text: lessonText,\n        };\n\n        dispatch(storeTeacherSingleCourseLessonsAction(allLessons));\n      }\n    });\n\n    history.push(\"/teacher-course-overview\");\n  };\n\n  useEffect(() => {\n    if (!teacherAuthID) {\n      history.push(\"/teacherdash\");\n      return;\n    }\n  }, []);\n  return (\n    <div>\n      {/* Top Bar */}\n      <div>\n        <TopBar />\n      </div>\n\n      <div className=\"content\">\n        <h1>Edit Lesson</h1>\n\n        <div className=\"bodyWrapper\">\n          {handleLessonForm()}\n          <div className=\"btnGroup\">\n            <button\n              onClick={() => {\n                dispatch(storeTeacherSingleCourseLessonAction({}));\n                history.push(\"/teacher-course-overview\");\n              }}\n              className=\"btnBack\"\n            >\n              Back\n            </button>\n            <button onClick={saveChanges} className=\"btnSaveGroup\">\n              Save Changes\n            </button>\n          </div>\n        </div>\n      </div>\n\n      {/* Footer */}\n      <div>\n        <DashFooter />\n      </div>\n    </div>\n  );\n}\n","/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Teachers/Courses/WizardEditQuiz.js",["735","736","737","738"],"import React, { useEffect } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { useHistory } from \"react-router-dom\";\n\nimport TopBar from \"../Dash/TopBar\";\nimport DashFooter from \"../Dash/DashFooter\";\nimport {\n  storeTeacherSingleCourseQuizComponentsAction,\n  storeTeacherSingleCourseQuizAction,\n  storeTeacherSingleCourseQuizzesAction,\n} from \"../../../redux/actions\";\n\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faPray, faTimes } from \"@fortawesome/free-solid-svg-icons\";\nimport RandomString from \"../../RandomString\";\nimport firebase, { courses_Collection } from \"../../../utils/firebase\";\nimport { firebaseLooper } from \"../../../utils/tools\";\n\nexport default function WizardEditQuiz() {\n  const teacherAuthID = useSelector((state) => state.storeTeacherAuthIDReducer);\n  const history = useHistory();\n  const dispatch = useDispatch();\n\n  const course = useSelector((state) => state.storeTeacherSingleCourseReducer);\n  const quizzes = useSelector(\n    (state) => state.storeTeacherSingleCourseQuizzesReducer\n  );\n  const quiz = useSelector(\n    (state) => state.storeTeacherSingleCourseQuizReducer\n  );\n  const quizComps = useSelector(\n    (state) => state.storeTeacherSingleCourseQuizComponentsReducer\n  );\n\n  // GET\n  const getAllComponents = () => {\n    courses_Collection\n      .doc(course.id)\n      .collection(\"Quizzes\")\n      .doc(quiz.id)\n      .collection(\"Components\")\n      .orderBy(\"Order\", \"asc\")\n      .get()\n      .then((snapshot) => {\n        const compData = firebaseLooper(snapshot);\n        dispatch(storeTeacherSingleCourseQuizComponentsAction(compData));\n      })\n      .catch((err) => console.log(err));\n  };\n\n  // HANDLE\n  const handleQuizForm = () => {\n    return quizComps.map((comp, i) => {\n      if (comp.Order) {\n        if (comp.Type === \"multiple\") {\n          return (\n            <div className=\"comps purple-border\" key={i}>\n              <div style={{ display: \"flex\" }}>\n                <h2>Multiple Choice</h2>\n                <button onClick={onCompDel} id={comp.id} className=\"compDel\">\n                  <FontAwesomeIcon className=\"compDelIcon\" icon={faTimes} />\n                </button>\n              </div>\n\n              <p className=\"compLabel\">Question:</p>\n              <input\n                className=\"tbComp question\"\n                id={`tbQuestion${i}`}\n                type=\"text\"\n                defaultValue={comp.Question}\n              />\n\n              <p className=\"compLabel\">Options:</p>\n              <input\n                className=\"tbComp opt\"\n                id={`tbOption1-${i}`}\n                type=\"text\"\n                defaultValue={comp.Options[0]}\n              />\n              <input\n                className=\"tbComp opt\"\n                id={`tbOption2-${i}`}\n                type=\"text\"\n                defaultValue={comp.Options[1]}\n              />\n              <input\n                className=\"tbComp opt\"\n                id={`tbOption3-${i}`}\n                type=\"text\"\n                defaultValue={comp.Options[2]}\n              />\n              <input\n                className=\"tbComp opt\"\n                id={`tbOption4-${i}`}\n                type=\"text\"\n                defaultValue={comp.Options[3]}\n              />\n\n              <p className=\"compLabel\">Answer:</p>\n              <input\n                className=\"tbComp answer\"\n                id={`tbAnswer${i}`}\n                type=\"text\"\n                defaultValue={comp.Answer}\n              />\n\n              <p className=\"compLabel\">Points:</p>\n              <input\n                className=\"tbComp points\"\n                id={`tbPoints${i}`}\n                type=\"text\"\n                defaultValue={comp.Points}\n              />\n            </div>\n          );\n        } else if (comp.Type === \"short\") {\n          return (\n            <div className=\"comps red-border\" key={i}>\n              <div style={{ display: \"flex\" }}>\n                <h2>Short Answer</h2>\n                <button onClick={onCompDel} id={comp.id} className=\"compDel\">\n                  <FontAwesomeIcon className=\"compDelIcon\" icon={faTimes} />\n                </button>\n              </div>\n              <p className=\"compLabel\">Prompt:</p>\n              <input\n                className=\"tbComp prompt\"\n                id={`tbShortPrompt${i}`}\n                type=\"text\"\n                defaultValue={comp.Prompt}\n              />\n\n              <p className=\"compLabel\">Answer:</p>\n              <input\n                className=\"tbComp short\"\n                id={`tbShortAns${i}`}\n                type=\"text\"\n                defaultValue={comp.Answer}\n              />\n              <p className=\"compLabel\">Points:</p>\n              <input\n                className=\"tbComp points\"\n                id={`tbPoints${i}`}\n                type=\"text\"\n                defaultValue={comp.Points}\n              />\n            </div>\n          );\n        } else if (comp.Type === \"long\") {\n          return (\n            <div className=\"comps yellow-border\" key={i}>\n              <div style={{ display: \"flex\" }}>\n                <h2>Long Answer</h2>\n                <button onClick={onCompDel} id={comp.id} className=\"compDel\">\n                  <FontAwesomeIcon className=\"compDelIcon\" icon={faTimes} />\n                </button>\n              </div>\n              <p className=\"compLabel\">Prompt:</p>\n              <input\n                className=\"tbComp prompt\"\n                id={`tbLongPrompt${i}`}\n                type=\"text\"\n                defaultValue={comp.Prompt}\n              />\n\n              <h3 className=\"compLabel\">Answer:</h3>\n              <textarea\n                className=\"ta long\"\n                id={`taLongAns${i}`}\n                defaultValue={comp.Answer}\n              ></textarea>\n\n              <p className=\"compLabel\">Points:</p>\n              <input\n                className=\"tbComp points\"\n                id={`tbPoints${i}`}\n                type=\"text\"\n                defaultValue={comp.Points}\n              />\n            </div>\n          );\n        } else if (comp.Type === \"trueFalse\") {\n          return (\n            <div className=\"comps aqua-border\">\n              <div style={{ display: \"flex\" }}>\n                <h2>True or False</h2>\n                <button onClick={onCompDel} id={comp.id} className=\"compDel\">\n                  <FontAwesomeIcon className=\"compDelIcon\" icon={faTimes} />\n                </button>\n              </div>\n\n              <p className=\"compLabel\">Prompt:</p>\n              <input\n                className=\"tbComp prompt\"\n                id={`tbTrueFalsePrompt${i}`}\n                type=\"text\"\n                defaultValue={comp.Prompt}\n              />\n\n              <div className=\"ras\">\n                <div className=\"raGroup\">\n                  <input\n                    className=\"ra\"\n                    type=\"radio\"\n                    id={`raTrue${i}`}\n                    name={`raTrueFalse${i}`}\n                    value=\"True\"\n                    checked={comp.Answer ? true : false}\n                  />\n                  <label for=\"male\">True</label>\n                </div>\n                <div className=\"raGroup\">\n                  <input\n                    className=\"ra\"\n                    type=\"radio\"\n                    id={`raFalse${i}`}\n                    name={`raTrueFalse${i}`}\n                    value=\"False\"\n                    checked={comp.Answer ? false : true}\n                  />\n                  <label for=\"male\">False</label>\n                </div>\n              </div>\n              <p className=\"compLabel\">Points:</p>\n              <input\n                className=\"tbComp points\"\n                id={`tbPoints${i}`}\n                type=\"text\"\n                defaultValue={comp.Points}\n              />\n              <br />\n            </div>\n          );\n        } else if (comp.Type === \"audio\") {\n          return (\n            <div className=\"comps orange-border\">\n              <div style={{ display: \"flex\" }}>\n                <h2>Audio</h2>\n                <button onClick={onCompDel} id={comp.id} className=\"compDel\">\n                  <FontAwesomeIcon className=\"compDelIcon\" icon={faTimes} />\n                </button>\n              </div>\n\n              <div className=\"wizardPair\">\n                <h3 className=\"h3\">Question Audio:</h3>\n                <div>\n                  <input id={`select${i}`} type=\"file\" />\n                  <p className=\"smallDesc\">\n                    Enter an optional custom file name. Leaving the field blank\n                    will use the current file name.\n                  </p>\n                  <input\n                    id={`fileName${i}`}\n                    type=\"text\"\n                    placeholder=\"Type file name..\"\n                  />\n                </div>\n              </div>\n              <br />\n              <p className=\"compLabel\">Question:</p>\n              <input\n                className=\"tbComp question\"\n                id={`tbQuestion${i}`}\n                type=\"text\"\n                defaultValue={comp.Question}\n              />\n\n              <p className=\"compLabel\">Options:</p>\n              <input\n                className=\"tbComp opt\"\n                id={`tbOption1-${i}`}\n                type=\"text\"\n                defaultValue={comp.Options[0]}\n              />\n              <input\n                className=\"tbComp opt\"\n                id={`tbOption2-${i}`}\n                type=\"text\"\n                defaultValue={comp.Options[1]}\n              />\n              <input\n                className=\"tbComp opt\"\n                id={`tbOption3-${i}`}\n                type=\"text\"\n                defaultValue={comp.Options[2]}\n              />\n              <input\n                className=\"tbComp opt\"\n                id={`tbOption4-${i}`}\n                type=\"text\"\n                defaultValue={comp.Options[3]}\n              />\n\n              <p className=\"compLabel\">Answer:</p>\n              <input\n                className=\"tbComp answer\"\n                id={`tbAnswer${i}`}\n                type=\"text\"\n                defaultValue={comp.Answer}\n              />\n\n              <p className=\"compLabel\">Points:</p>\n              <input\n                className=\"tbComp points\"\n                id={`tbPoints${i}`}\n                type=\"text\"\n                defaultValue={comp.Points}\n              />\n            </div>\n          );\n        } else if (comp.Type === \"video\") {\n          return (\n            <div className=\"comps pink-border\">\n              <div style={{ display: \"flex\" }}>\n                <h2>Video</h2>\n                <button onClick={onCompDel} id={comp.id} className=\"compDel\">\n                  <FontAwesomeIcon className=\"compDelIcon\" icon={faTimes} />\n                </button>\n              </div>\n\n              <div className=\"wizardPair\">\n                <h3 className=\"h3\">Question Video:</h3>\n                <div>\n                  <input id={`select${i}`} type=\"file\" />\n                  <p className=\"smallDesc\">\n                    Enter an optional custom file name. Leaving the field blank\n                    will use the current file name.\n                  </p>\n                  <input\n                    id={`fileName${i}`}\n                    type=\"text\"\n                    placeholder=\"Type file name..\"\n                  />\n                </div>\n              </div>\n              <br />\n              <p className=\"compLabel\">Question:</p>\n              <input\n                className=\"tbComp question\"\n                id={`tbQuestion${i}`}\n                type=\"text\"\n                defaultValue={comp.Question}\n              />\n\n              <p className=\"compLabel\">Options:</p>\n              <input\n                className=\"tbComp opt\"\n                id={`tbOption1-${i}`}\n                type=\"text\"\n                defaultValue={comp.Options[0]}\n              />\n              <input\n                className=\"tbComp opt\"\n                id={`tbOption2-${i}`}\n                type=\"text\"\n                defaultValue={comp.Options[1]}\n              />\n              <input\n                className=\"tbComp opt\"\n                id={`tbOption3-${i}`}\n                type=\"text\"\n                defaultValue={comp.Options[2]}\n              />\n              <input\n                className=\"tbComp opt\"\n                id={`tbOption4-${i}`}\n                type=\"text\"\n                defaultValue={comp.Options[3]}\n              />\n\n              <p className=\"compLabel\">Answer:</p>\n              <input\n                className=\"tbComp answer\"\n                id={`tbAnswer${i}`}\n                type=\"text\"\n                defaultValue={comp.Answer}\n              />\n\n              <p className=\"compLabel\">Points:</p>\n              <input\n                className=\"tbComp points\"\n                id={`tbPoints${i}`}\n                type=\"text\"\n                defaultValue={comp.Points}\n              />\n            </div>\n          );\n        } else if (comp.Type === \"image\") {\n          return (\n            <div className=\"comps green-border\">\n              <div style={{ display: \"flex\" }}>\n                <h2>Image</h2>\n                <button onClick={onCompDel} id={comp.id} className=\"compDel\">\n                  <FontAwesomeIcon className=\"compDelIcon\" icon={faTimes} />\n                </button>\n              </div>\n\n              <div className=\"wizardPair\">\n                <h3 className=\"h3\">Question Image:</h3>\n                <div>\n                  <input id={`select${i}`} type=\"file\" />\n                  <p className=\"smallDesc\">\n                    Enter an optional custom file name. Leaving the field blank\n                    will use the current file name.\n                  </p>\n                  <input\n                    id={`fileName${i}`}\n                    type=\"text\"\n                    placeholder=\"Type file name..\"\n                  />\n                </div>\n              </div>\n              <br />\n              <p className=\"compLabel\">Question:</p>\n              <input\n                className=\"tbComp question\"\n                id={`tbQuestion${i}`}\n                type=\"text\"\n                defaultValue={comp.Question}\n              />\n\n              <p className=\"compLabel\">Options:</p>\n              <input\n                className=\"tbComp opt\"\n                id={`tbOption1-${i}`}\n                type=\"text\"\n                defaultValue={comp.Options[0]}\n              />\n              <input\n                className=\"tbComp opt\"\n                id={`tbOption2-${i}`}\n                type=\"text\"\n                defaultValue={comp.Options[1]}\n              />\n              <input\n                className=\"tbComp opt\"\n                id={`tbOption3-${i}`}\n                type=\"text\"\n                defaultValue={comp.Options[2]}\n              />\n              <input\n                className=\"tbComp opt\"\n                id={`tbOption4-${i}`}\n                type=\"text\"\n                defaultValue={comp.Options[3]}\n              />\n\n              <p className=\"compLabel\">Answer:</p>\n              <input\n                className=\"tbComp answer\"\n                id={`tbAnswer${i}`}\n                type=\"text\"\n                defaultValue={comp.Answer}\n              />\n\n              <p className=\"compLabel\">Points:</p>\n              <input\n                className=\"tbComp points\"\n                id={`tbPoints${i}`}\n                type=\"text\"\n                defaultValue={comp.Points}\n              />\n            </div>\n          );\n        }\n      } else {\n        if (comp.Type === \"multiple\") {\n          return (\n            <div className=\"comps purple-border\" key={i}>\n              <div style={{ display: \"flex\" }}>\n                <h2>Multiple Choice</h2>\n                <button onClick={onCompDel} id={comp.id} className=\"compDel\">\n                  <FontAwesomeIcon className=\"compDelIcon\" icon={faTimes} />\n                </button>\n              </div>\n\n              <p className=\"compLabel\">Question:</p>\n              <input\n                className=\"tbComp question\"\n                id={`tbQuestion${i}`}\n                type=\"text\"\n                placeholder=\"Question\"\n              />\n\n              <p className=\"compLabel\">Options:</p>\n              <input\n                className=\"tbComp opt\"\n                id={`tbOption1-${i}`}\n                type=\"text\"\n                placeholder=\"Option 1\"\n              />\n              <input\n                className=\"tbComp opt\"\n                id={`tbOption2-${i}`}\n                type=\"text\"\n                placeholder=\"Option 2\"\n              />\n              <input\n                className=\"tbComp opt\"\n                id={`tbOption3-${i}`}\n                type=\"text\"\n                placeholder=\"Option 3\"\n              />\n              <input\n                className=\"tbComp opt\"\n                id={`tbOption4-${i}`}\n                type=\"text\"\n                placeholder=\"Option 4\"\n              />\n\n              <p className=\"compLabel\">Answer:</p>\n              <input\n                className=\"tbComp answer\"\n                id={`tbAnswer${i}`}\n                type=\"text\"\n                placeholder=\"Answer\"\n              />\n\n              <p className=\"compLabel\">Points:</p>\n              <input\n                className=\"tbComp points\"\n                id={`tbPoints${i}`}\n                type=\"text\"\n                placeholder=\"# of Points\"\n              />\n            </div>\n          );\n        } else if (comp.Type === \"short\") {\n          return (\n            <div className=\"comps red-border\" key={i}>\n              <div style={{ display: \"flex\" }}>\n                <h2>Short Answer</h2>\n                <button onClick={onCompDel} id={comp.id} className=\"compDel\">\n                  <FontAwesomeIcon className=\"compDelIcon\" icon={faTimes} />\n                </button>\n              </div>\n              <p className=\"compLabel\">Prompt:</p>\n              <input\n                className=\"tbComp prompt\"\n                id={`tbShortPrompt${i}`}\n                type=\"text\"\n                placeholder=\"Prompt\"\n              />\n\n              <p className=\"compLabel\">Answer:</p>\n              <input\n                className=\"tbComp short\"\n                id={`tbShortAns${i}`}\n                type=\"text\"\n                placeholder=\"Answer\"\n              />\n\n              <p className=\"compLabel\">Points:</p>\n              <input\n                className=\"tbComp points\"\n                id={`tbPoints${i}`}\n                type=\"text\"\n                placeholder=\"# of Points\"\n              />\n            </div>\n          );\n        } else if (comp.Type === \"long\") {\n          return (\n            <div className=\"comps yellow-border\" key={i}>\n              <div style={{ display: \"flex\" }}>\n                <h2>Long Answer</h2>\n                <button onClick={onCompDel} id={comp.id} className=\"compDel\">\n                  <FontAwesomeIcon className=\"compDelIcon\" icon={faTimes} />\n                </button>\n              </div>\n              <p className=\"compLabel\">Prompt:</p>\n              <input\n                className=\"tbComp prompt\"\n                id={`tbLongPrompt${i}`}\n                type=\"text\"\n                placeholder=\"Prompt\"\n              />\n\n              <h3 className=\"compLabel\">Answer:</h3>\n              <textarea\n                className=\"ta long\"\n                id={`taLongAns${i}`}\n                placeholder=\"Answer\"\n              ></textarea>\n\n              <p className=\"compLabel\">Points:</p>\n              <input\n                className=\"tbComp points\"\n                id={`tbPoints${i}`}\n                type=\"text\"\n                placeholder=\"# of Points\"\n              />\n            </div>\n          );\n        } else if (comp.Type === \"trueFalse\") {\n          return (\n            <div className=\"comps aqua-border\">\n              <div style={{ display: \"flex\" }}>\n                <h2>True or False</h2>\n                <button onClick={onCompDel} id={comp.id} className=\"compDel\">\n                  <FontAwesomeIcon className=\"compDelIcon\" icon={faTimes} />\n                </button>\n              </div>\n\n              <p className=\"compLabel\">Prompt:</p>\n              <input\n                className=\"tbComp prompt\"\n                id={`tbTrueFalsePrompt${i}`}\n                type=\"text\"\n                placeholder=\"Prompt\"\n              />\n\n              <div className=\"ras\">\n                <div className=\"raGroup\">\n                  <input\n                    className=\"ra\"\n                    type=\"radio\"\n                    id={`raTrue${i}`}\n                    name={`raTrueFalse${i}`}\n                    value=\"True\"\n                  />\n                  <label for=\"male\">True</label>\n                </div>\n                <div className=\"raGroup\">\n                  <input\n                    className=\"ra\"\n                    type=\"radio\"\n                    id={`raFalse${i}`}\n                    name={`raTrueFalse${i}`}\n                    value=\"False\"\n                  />\n                  <label for=\"male\">False</label>\n                </div>\n              </div>\n\n              <p className=\"compLabel\">Points:</p>\n              <input\n                className=\"tbComp points\"\n                id={`tbPoints${i}`}\n                type=\"text\"\n                placeholder=\"# of Points\"\n              />\n              <br />\n            </div>\n          );\n        } else if (comp.Type === \"audio\") {\n          return (\n            <div className=\"comps orange-border\">\n              <div style={{ display: \"flex\" }}>\n                <h2>Audio</h2>\n                <button onClick={onCompDel} id={comp.id} className=\"compDel\">\n                  <FontAwesomeIcon className=\"compDelIcon\" icon={faTimes} />\n                </button>\n              </div>\n\n              <div className=\"wizardPair\">\n                <h3 className=\"h3\">Question Audio:</h3>\n                <div>\n                  <input id={`select${i}`} type=\"file\" />\n                  <p className=\"smallDesc\">\n                    Enter an optional custom file name. Leaving the field blank\n                    will use the current file name.\n                  </p>\n                  <input\n                    id={`fileName${i}`}\n                    type=\"text\"\n                    placeholder=\"Type file name..\"\n                  />\n                </div>\n              </div>\n              <br />\n              <p className=\"compLabel\">Question:</p>\n              <input\n                className=\"tbComp question\"\n                id={`tbQuestion${i}`}\n                type=\"text\"\n                placeholder=\"Question\"\n              />\n\n              <p className=\"compLabel\">Options:</p>\n              <input\n                className=\"tbComp opt\"\n                id={`tbOption1-${i}`}\n                type=\"text\"\n                placeholder=\"Option 1\"\n              />\n              <input\n                className=\"tbComp opt\"\n                id={`tbOption2-${i}`}\n                type=\"text\"\n                placeholder=\"Option 2\"\n              />\n              <input\n                className=\"tbComp opt\"\n                id={`tbOption3-${i}`}\n                type=\"text\"\n                placeholder=\"Option 3\"\n              />\n              <input\n                className=\"tbComp opt\"\n                id={`tbOption4-${i}`}\n                type=\"text\"\n                placeholder=\"Option 4\"\n              />\n\n              <p className=\"compLabel\">Answer:</p>\n              <input\n                className=\"tbComp answer\"\n                id={`tbAnswer${i}`}\n                type=\"text\"\n                placeholder=\"Answer\"\n              />\n              <p className=\"compLabel\">Points:</p>\n              <input\n                className=\"tbComp points\"\n                id={`tbPoints${i}`}\n                type=\"text\"\n                placeholder=\"# of Points\"\n              />\n            </div>\n          );\n        } else if (comp.Type === \"video\") {\n          return (\n            <div className=\"comps pink-border\">\n              <div style={{ display: \"flex\" }}>\n                <h2>Video</h2>\n                <button onClick={onCompDel} id={comp.id} className=\"compDel\">\n                  <FontAwesomeIcon className=\"compDelIcon\" icon={faTimes} />\n                </button>\n              </div>\n\n              <div className=\"wizardPair\">\n                <h3 className=\"h3\">Question Video:</h3>\n                <div>\n                  <input id={`select${i}`} type=\"file\" />\n                  <p className=\"smallDesc\">\n                    Enter an optional custom file name. Leaving the field blank\n                    will use the current file name.\n                  </p>\n                  <input\n                    id={`fileName${i}`}\n                    type=\"text\"\n                    placeholder=\"Type file name..\"\n                  />\n                </div>\n              </div>\n              <br />\n              <p className=\"compLabel\">Question:</p>\n              <input\n                className=\"tbComp question\"\n                id={`tbQuestion${i}`}\n                type=\"text\"\n                placeholder=\"Question\"\n              />\n\n              <p className=\"compLabel\">Options:</p>\n              <input\n                className=\"tbComp opt\"\n                id={`tbOption1-${i}`}\n                type=\"text\"\n                placeholder=\"Option 1\"\n              />\n              <input\n                className=\"tbComp opt\"\n                id={`tbOption2-${i}`}\n                type=\"text\"\n                placeholder=\"Option 2\"\n              />\n              <input\n                className=\"tbComp opt\"\n                id={`tbOption3-${i}`}\n                type=\"text\"\n                placeholder=\"Option 3\"\n              />\n              <input\n                className=\"tbComp opt\"\n                id={`tbOption4-${i}`}\n                type=\"text\"\n                placeholder=\"Option 4\"\n              />\n\n              <p className=\"compLabel\">Answer:</p>\n              <input\n                className=\"tbComp answer\"\n                id={`tbAnswer${i}`}\n                type=\"text\"\n                placeholder=\"Answer\"\n              />\n\n              <p className=\"compLabel\">Points:</p>\n              <input\n                className=\"tbComp points\"\n                id={`tbPoints${i}`}\n                type=\"text\"\n                placeholder=\"# of Points\"\n              />\n            </div>\n          );\n        } else if (comp.Type === \"image\") {\n          return (\n            <div className=\"comps green-border\">\n              <div style={{ display: \"flex\" }}>\n                <h2>Image</h2>\n                <button onClick={onCompDel} id={comp.id} className=\"compDel\">\n                  <FontAwesomeIcon className=\"compDelIcon\" icon={faTimes} />\n                </button>\n              </div>\n\n              <div className=\"wizardPair\">\n                <h3 className=\"h3\">Question Image:</h3>\n                <div>\n                  <input id={`select${i}`} type=\"file\" />\n                  <p className=\"smallDesc\">\n                    Enter an optional custom file name. Leaving the field blank\n                    will use the current file name.\n                  </p>\n                  <input\n                    id={`fileName${i}`}\n                    type=\"text\"\n                    placeholder=\"Type file name..\"\n                  />\n                </div>\n              </div>\n              <br />\n              <p className=\"compLabel\">Question:</p>\n              <input\n                className=\"tbComp question\"\n                id={`tbQuestion${i}`}\n                type=\"text\"\n                placeholder=\"Question\"\n              />\n\n              <p className=\"compLabel\">Options:</p>\n              <input\n                className=\"tbComp opt\"\n                id={`tbOption1-${i}`}\n                type=\"text\"\n                placeholder=\"Option 1\"\n              />\n              <input\n                className=\"tbComp opt\"\n                id={`tbOption2-${i}`}\n                type=\"text\"\n                placeholder=\"Option 2\"\n              />\n              <input\n                className=\"tbComp opt\"\n                id={`tbOption3-${i}`}\n                type=\"text\"\n                placeholder=\"Option 3\"\n              />\n              <input\n                className=\"tbComp opt\"\n                id={`tbOption4-${i}`}\n                type=\"text\"\n                placeholder=\"Option 4\"\n              />\n\n              <p className=\"compLabel\">Answer:</p>\n              <input\n                className=\"tbComp answer\"\n                id={`tbAnswer${i}`}\n                type=\"text\"\n                placeholder=\"Answer\"\n              />\n\n              <p className=\"compLabel\">Points:</p>\n              <input\n                className=\"tbComp points\"\n                id={`tbPoints${i}`}\n                type=\"text\"\n                placeholder=\"# of Points\"\n              />\n            </div>\n          );\n        }\n      }\n    });\n  };\n\n  // CLICK\n  const onCompDel = (event) => {\n    const compID = event.target.getAttribute(\"id\");\n\n    const allComps = [...quizComps];\n\n    allComps.forEach((c) => {\n      if (c.id === compID) {\n        courses_Collection\n          .doc(course.id)\n          .collection(\"Quizzes\")\n          .doc(quiz.id)\n          .collection(\"Components\")\n          .doc(compID)\n          .delete()\n          .catch((err) => console.log(err));\n      }\n    });\n\n    const filtered = allComps.filter((c) => c.id !== compID);\n\n    dispatch(storeTeacherSingleCourseQuizComponentsAction(filtered));\n  };\n  const onChooseComp = (event) => {\n    const choice = event.target.getAttribute(\"id\");\n    const rand1 = RandomString();\n    const rand2 = RandomString();\n    const compID = `Comp${rand1}${rand2}`;\n\n    if (choice === \"btnMultiple\") {\n      const allComps = [...quizComps];\n      allComps.push({\n        id: compID,\n        Type: \"multiple\",\n        CompID: compID,\n      });\n\n      dispatch(storeTeacherSingleCourseQuizComponentsAction(allComps));\n    } else if (choice === \"btnShort\") {\n      const allComps = [...quizComps];\n      allComps.push({\n        id: compID,\n        Type: \"short\",\n        CompID: compID,\n      });\n\n      dispatch(storeTeacherSingleCourseQuizComponentsAction(allComps));\n    } else if (choice === \"btnLong\") {\n      const allComps = [...quizComps];\n      allComps.push({\n        id: compID,\n        Type: \"long\",\n        CompID: compID,\n      });\n\n      dispatch(storeTeacherSingleCourseQuizComponentsAction(allComps));\n    } else if (choice === \"btnTrueFalse\") {\n      const allComps = [...quizComps];\n      allComps.push({\n        id: compID,\n        Type: \"trueFalse\",\n        CompID: compID,\n      });\n\n      dispatch(storeTeacherSingleCourseQuizComponentsAction(allComps));\n    } else if (choice === \"btnAudio\") {\n      const allComps = [...quizComps];\n      allComps.push({\n        id: compID,\n        Type: \"audio\",\n        CompID: compID,\n      });\n\n      dispatch(storeTeacherSingleCourseQuizComponentsAction(allComps));\n    } else if (choice === \"btnVideo\") {\n      const allComps = [...quizComps];\n      allComps.push({\n        id: compID,\n        Type: \"video\",\n        CompID: compID,\n      });\n\n      dispatch(storeTeacherSingleCourseQuizComponentsAction(allComps));\n    } else if (choice === \"btnImage\") {\n      const allComps = [...quizComps];\n      allComps.push({\n        id: compID,\n        Type: \"image\",\n        CompID: compID,\n      });\n\n      dispatch(storeTeacherSingleCourseQuizComponentsAction(allComps));\n    }\n  };\n\n  // POST\n  const saveChanges = () => {\n    const quizName = document.querySelector(\"#tbQuizName\").value;\n    const quizDesc = document.querySelector(\"#taQuizDesc\").value;\n\n    const allComponents = [];\n\n    // Fill up components array\n    quizComps.forEach((comp, i) => {\n      if (comp.Type === \"multiple\") {\n        const question = document.querySelector(`#tbQuestion${i}`).value;\n        const options = [];\n        for (let a = 1; a <= 4; a = a + 1) {\n          const opt = document.querySelector(`#tbOption${a}-${i}`).value;\n          options.push(opt);\n        }\n        const answer = document.querySelector(`#tbAnswer${i}`).value;\n        const points = document.querySelector(`#tbPoints${i}`).value;\n\n        const tempObj = {\n          id: comp.id,\n          Type: \"multiple\",\n          Question: question,\n          Options: options,\n          Answer: answer,\n          Points: points,\n        };\n\n        allComponents.push(tempObj);\n      } else if (comp.Type === \"short\") {\n        const prompt = document.querySelector(`#tbShortPrompt${i}`).value;\n        const answer = document.querySelector(`#tbShortAns${i}`).value;\n        const points = document.querySelector(`#tbPoints${i}`).value;\n\n        const tempObj = {\n          id: comp.id,\n          Type: \"short\",\n          Prompt: prompt,\n          Answer: answer,\n          Points: points,\n        };\n\n        allComponents.push(tempObj);\n      } else if (comp.Type === \"long\") {\n        const prompt = document.querySelector(`#tbLongPrompt${i}`).value;\n        const answer = document.querySelector(`#taLongAns${i}`).value;\n        const points = document.querySelector(`#tbPoints${i}`).value;\n\n        const tempObj = {\n          id: comp.id,\n          Type: \"long\",\n          Prompt: prompt,\n          Answer: answer,\n          Points: points,\n        };\n\n        allComponents.push(tempObj);\n      } else if (comp.Type === \"trueFalse\") {\n        const prompt = document.querySelector(`#tbTrueFalsePrompt${i}`).value;\n        const raTrue = document.querySelector(`#raTrue${i}`).checked;\n        const raFalse = document.querySelector(`#raFalse${i}`).checked;\n        const points = document.querySelector(`#tbPoints${i}`).value;\n\n        let res = false;\n        if (raTrue) {\n          res = true;\n        }\n\n        const tempObj = {\n          id: comp.id,\n          Type: \"trueFalse\",\n          Prompt: prompt,\n          Answer: res,\n          Points: points,\n        };\n\n        allComponents.push(tempObj);\n      } else if (comp.Type === \"audio\") {\n        let audio = programUpload(i);\n        if (audio === undefined) {\n          audio = comp.Audio;\n        }\n\n        const question = document.querySelector(`#tbQuestion${i}`).value;\n        const options = [];\n        for (let a = 1; a <= 4; a = a + 1) {\n          const opt = document.querySelector(`#tbOption${a}-${i}`).value;\n          options.push(opt);\n        }\n        const answer = document.querySelector(`#tbAnswer${i}`).value;\n        const points = document.querySelector(`#tbPoints${i}`).value;\n\n        const tempObj = {\n          id: comp.id,\n          Type: \"audio\",\n          Audio: audio,\n          Question: question,\n          Options: options,\n          Answer: answer,\n          Points: points,\n        };\n        allComponents.push(tempObj);\n      } else if (comp.Type === \"video\") {\n        let video = programUpload(i);\n        if (video === undefined) {\n          video = comp.Video;\n        }\n\n        const question = document.querySelector(`#tbQuestion${i}`).value;\n        const options = [];\n        for (let a = 1; a <= 4; a = a + 1) {\n          const opt = document.querySelector(`#tbOption${a}-${i}`).value;\n          options.push(opt);\n        }\n        const answer = document.querySelector(`#tbAnswer${i}`).value;\n        const points = document.querySelector(`#tbPoints${i}`).value;\n\n        const tempObj = {\n          id: comp.id,\n          Type: \"video\",\n          Video: video,\n          Question: question,\n          Options: options,\n          Answer: answer,\n          Points: points,\n        };\n\n        allComponents.push(tempObj);\n      } else if (comp.Type === \"image\") {\n        let imagePath = programUpload(i);\n\n        if (imagePath === undefined) {\n          imagePath = comp.Image;\n        }\n\n        const question = document.querySelector(`#tbQuestion${i}`).value;\n        const options = [];\n        for (let a = 1; a <= 4; a = a + 1) {\n          const opt = document.querySelector(`#tbOption${a}-${i}`).value;\n          options.push(opt);\n        }\n        const answer = document.querySelector(`#tbAnswer${i}`).value;\n        const points = document.querySelector(`#tbPoints${i}`).value;\n\n        const tempObj = {\n          id: comp.id,\n          Type: \"image\",\n          Image: imagePath,\n          Question: question,\n          Options: options,\n          Answer: answer,\n          Points: points,\n        };\n\n        allComponents.push(tempObj);\n      }\n    });\n\n    // Save in DB\n\n    courses_Collection\n      .doc(course.id)\n      .collection(\"Quizzes\")\n      .doc(quiz.id)\n      .set({\n        Name: quizName,\n        Desc: quizDesc,\n      })\n      .catch((err) => console.log(err));\n\n    allComponents.forEach((comp, i) => {\n      let compID = comp.id;\n      if (comp.Order) {\n        if (comp.Type === \"multiple\") {\n          if (!comp.id) {\n            const rand1 = RandomString();\n            const rand2 = RandomString();\n            compID = `Comp${rand1}${rand2}`;\n          }\n          courses_Collection\n            .doc(course.id)\n            .collection(\"Quizzes\")\n            .doc(quiz.id)\n            .collection(\"Components\")\n            .doc(compID)\n            .update({\n              Type: \"multiple\",\n              Question: comp.Question,\n              Options: comp.Options,\n              Answer: comp.Answer,\n              Order: i + 1,\n              Points: comp.Points,\n            })\n            .catch((err) => console.log(err));\n        } else if (comp.Type === \"short\") {\n          if (!comp.id) {\n            const rand1 = RandomString();\n            const rand2 = RandomString();\n            compID = `Comp${rand1}${rand2}`;\n          }\n          courses_Collection\n            .doc(course.id)\n            .collection(\"Quizzes\")\n            .doc(quiz.id)\n            .collection(\"Components\")\n            .doc(compID)\n            .update({\n              Type: \"short\",\n              Prompt: comp.Prompt,\n              Answer: comp.Answer,\n              Order: i + 1,\n              Points: comp.Points,\n            })\n            .catch((err) => console.log(err));\n        } else if (comp.Type === \"long\") {\n          if (!comp.id) {\n            const rand1 = RandomString();\n            const rand2 = RandomString();\n            compID = `Comp${rand1}${rand2}`;\n          }\n          courses_Collection\n            .doc(course.id)\n            .collection(\"Quizzes\")\n            .doc(quiz.id)\n            .collection(\"Components\")\n            .doc(compID)\n            .update({\n              Type: \"long\",\n              Prompt: comp.Prompt,\n              Answer: comp.Answer,\n              Order: i + 1,\n              Points: comp.Points,\n            })\n            .catch((err) => console.log(err));\n        } else if (comp.Type === \"trueFalse\") {\n          if (!comp.id) {\n            const rand1 = RandomString();\n            const rand2 = RandomString();\n            compID = `Comp${rand1}${rand2}`;\n          }\n          courses_Collection\n            .doc(course.id)\n            .collection(\"Quizzes\")\n            .doc(quiz.id)\n            .collection(\"Components\")\n            .doc(compID)\n            .update({\n              Type: \"trueFalse\",\n              Prompt: comp.Prompt,\n              Answer: comp.Answer,\n              Order: i + 1,\n              Points: comp.Points,\n            })\n            .catch((err) => console.log(err));\n        } else if (comp.Type === \"audio\") {\n          if (!comp.id) {\n            const rand1 = RandomString();\n            const rand2 = RandomString();\n            compID = `Comp${rand1}${rand2}`;\n          }\n          courses_Collection\n            .doc(course.id)\n            .collection(\"Quizzes\")\n            .doc(quiz.id)\n            .collection(\"Components\")\n            .doc(compID)\n            .update({\n              Type: \"audio\",\n              Audio: comp.Audio,\n              Question: comp.Question,\n              Options: comp.Options,\n              Answer: comp.Answer,\n              Order: i + 1,\n              Points: comp.Points,\n            })\n            .catch((err) => console.log(err));\n        } else if (comp.Type === \"video\") {\n          if (!comp.id) {\n            const rand1 = RandomString();\n            const rand2 = RandomString();\n            compID = `Comp${rand1}${rand2}`;\n          }\n          courses_Collection\n            .doc(course.id)\n            .collection(\"Quizzes\")\n            .doc(quiz.id)\n            .collection(\"Components\")\n            .doc(compID)\n            .update({\n              Type: \"video\",\n              Video: comp.Video,\n              Question: comp.Question,\n              Options: comp.Options,\n              Answer: comp.Answer,\n              Order: i + 1,\n              Points: comp.Points,\n            })\n            .catch((err) => console.log(err));\n        } else if (comp.Type === \"image\") {\n          if (!comp.id) {\n            const rand1 = RandomString();\n            const rand2 = RandomString();\n            compID = `Comp${rand1}${rand2}`;\n          }\n          courses_Collection\n            .doc(course.id)\n            .collection(\"Quizzes\")\n            .doc(quiz.id)\n            .collection(\"Components\")\n            .doc(compID)\n            .update({\n              Type: \"image\",\n              Image: comp.Image,\n              Question: comp.Question,\n              Options: comp.Options,\n              Answer: comp.Answer,\n              Order: i + 1,\n              Points: comp.Points,\n            })\n            .catch((err) => console.log(err));\n        }\n      } else {\n        if (comp.Type === \"multiple\") {\n          if (!comp.id) {\n            const rand1 = RandomString();\n            const rand2 = RandomString();\n            compID = `Comp${rand1}${rand2}`;\n          }\n          courses_Collection\n            .doc(course.id)\n            .collection(\"Quizzes\")\n            .doc(quiz.id)\n            .collection(\"Components\")\n            .doc(compID)\n            .set({\n              Type: \"multiple\",\n              Question: comp.Question,\n              Options: comp.Options,\n              Answer: comp.Answer,\n              Order: i + 1,\n              Points: comp.Points,\n            })\n            .catch((err) => console.log(err));\n        } else if (comp.Type === \"short\") {\n          if (!comp.id) {\n            const rand1 = RandomString();\n            const rand2 = RandomString();\n            compID = `Comp${rand1}${rand2}`;\n          }\n          courses_Collection\n            .doc(course.id)\n            .collection(\"Quizzes\")\n            .doc(quiz.id)\n            .collection(\"Components\")\n            .doc(compID)\n            .set({\n              Type: \"short\",\n              Prompt: comp.Prompt,\n              Answer: comp.Answer,\n              Order: i + 1,\n              Points: comp.Points,\n            })\n            .catch((err) => console.log(err));\n        } else if (comp.Type === \"long\") {\n          if (!comp.id) {\n            const rand1 = RandomString();\n            const rand2 = RandomString();\n            compID = `Comp${rand1}${rand2}`;\n          }\n          courses_Collection\n            .doc(course.id)\n            .collection(\"Quizzes\")\n            .doc(quiz.id)\n            .collection(\"Components\")\n            .doc(compID)\n            .set({\n              Type: \"long\",\n              Prompt: comp.Prompt,\n              Answer: comp.Answer,\n              Order: i + 1,\n              Points: comp.Points,\n            })\n            .catch((err) => console.log(err));\n        } else if (comp.Type === \"trueFalse\") {\n          if (!comp.id) {\n            const rand1 = RandomString();\n            const rand2 = RandomString();\n            compID = `Comp${rand1}${rand2}`;\n          }\n          courses_Collection\n            .doc(course.id)\n            .collection(\"Quizzes\")\n            .doc(quiz.id)\n            .collection(\"Components\")\n            .doc(compID)\n            .set({\n              Type: \"trueFalse\",\n              Prompt: comp.Prompt,\n              Answer: comp.Answer,\n              Order: i + 1,\n              Points: comp.Points,\n            })\n            .catch((err) => console.log(err));\n        } else if (comp.Type === \"audio\") {\n          if (!comp.id) {\n            const rand1 = RandomString();\n            const rand2 = RandomString();\n            compID = `Comp${rand1}${rand2}`;\n          }\n          courses_Collection\n            .doc(course.id)\n            .collection(\"Quizzes\")\n            .doc(quiz.id)\n            .collection(\"Components\")\n            .doc(compID)\n            .set({\n              Type: \"audio\",\n              Audio: comp.Audio,\n              Question: comp.Question,\n              Options: comp.Options,\n              Answer: comp.Answer,\n              Order: i + 1,\n              Points: comp.Points,\n            })\n            .catch((err) => console.log(err));\n        } else if (comp.Type === \"video\") {\n          if (!comp.id) {\n            const rand1 = RandomString();\n            const rand2 = RandomString();\n            compID = `Comp${rand1}${rand2}`;\n          }\n          courses_Collection\n            .doc(course.id)\n            .collection(\"Quizzes\")\n            .doc(quiz.id)\n            .collection(\"Components\")\n            .doc(compID)\n            .set({\n              Type: \"video\",\n              Video: comp.Video,\n              Question: comp.Question,\n              Options: comp.Options,\n              Answer: comp.Answer,\n              Order: i + 1,\n              Points: comp.Points,\n            })\n            .catch((err) => console.log(err));\n        } else if (comp.Type === \"image\") {\n          if (!comp.id) {\n            const rand1 = RandomString();\n            const rand2 = RandomString();\n            compID = `Comp${rand1}${rand2}`;\n          }\n          courses_Collection\n            .doc(course.id)\n            .collection(\"Quizzes\")\n            .doc(quiz.id)\n            .collection(\"Components\")\n            .doc(compID)\n            .set({\n              Type: \"image\",\n              Image: comp.Image,\n              Question: comp.Question,\n              Options: comp.Options,\n              Answer: comp.Answer,\n              Order: i + 1,\n              Points: comp.Points,\n            })\n            .catch((err) => console.log(err));\n        }\n      }\n    });\n\n    // Dispatch\n    const allQuizzes = [...quizzes];\n    allQuizzes.forEach((qui) => {\n      if (qui.id === quiz.id) {\n        qui = {\n          id: quiz.id,\n          Name: quizName,\n          Desc: quizDesc,\n        };\n\n        dispatch(storeTeacherSingleCourseQuizzesAction(allQuizzes));\n      }\n    });\n    dispatch(storeTeacherSingleCourseQuizComponentsAction(allComponents));\n    history.push(\"/teacher-course-overview\");\n  };\n\n  // PROGRAM\n  const programUpload = (idx) => {\n    const file = document.querySelector(`#select${idx}`).files[0];\n\n    if (file) {\n      let name = document.querySelector(`#fileName${idx}`).value;\n      if (name === \"\") {\n        name = file.name;\n      }\n      const metadata = {\n        contentType: file.type,\n      };\n\n      // Storage Ref\n      let ref;\n\n      if (file.type === \"video/mp4\") {\n        ref = firebase.storage().ref(\"Videos/\");\n        if (name !== file.name) {\n          name = name + \".mp4\";\n        }\n      } else if (file.type === \"audio/mpeg\") {\n        ref = firebase.storage().ref(\"Audio/\");\n        if (name !== file.name) {\n          name = name + \".mp3\";\n        }\n      } else if (file.type === \"image/jpeg\") {\n        ref = firebase.storage().ref(\"Images/\");\n        if (name !== file.name) {\n          name = name + \".jpg\";\n        }\n      } else if (file.type === \"image/png\") {\n        ref = firebase.storage().ref(\"Images/\");\n        if (name !== file.name) {\n          name = name + \".png\";\n        }\n      } else if (file.type === \"application/pdf\") {\n        ref = firebase.storage().ref(\"PDF/\");\n        if (name !== file.name) {\n          name = name + \".pdf\";\n        }\n      }\n\n      const task = ref.child(name).put(file, metadata);\n      task\n        .then((snapshot) => snapshot.ref.getDownloadURL())\n        .then((url) => {\n          console.log(url);\n        })\n        .catch(console.error);\n\n      return name;\n    }\n  };\n\n  useEffect(() => {\n    if (!teacherAuthID) {\n      history.push(\"/teacherdash\");\n      return;\n    }\n\n    getAllComponents();\n  }, []);\n  return (\n    <div>\n      {/* Top Bar */}\n      <div>\n        <button\n          style={{ display: \"none\" }}\n          onClick={() => {\n            getAllComponents();\n          }}\n        >\n          Rerender\n        </button>\n        <TopBar />\n      </div>\n\n      <div className=\"content\">\n        <h1>Edit Quiz</h1>\n\n        {/* Quiz Components Panel */}\n        <div className=\"compPanel\">\n          <h3>Quiz Components</h3>\n          <button onClick={onChooseComp} id=\"btnMultiple\" className=\"btnComp\">\n            Multiple Choice\n          </button>\n          <button onClick={onChooseComp} id=\"btnShort\" className=\"btnComp\">\n            Short Answer\n          </button>\n          <button onClick={onChooseComp} id=\"btnLong\" className=\"btnComp\">\n            Long Answer\n          </button>\n          <button onClick={onChooseComp} id=\"btnTrueFalse\" className=\"btnComp\">\n            True or False\n          </button>\n          <button onClick={onChooseComp} id=\"btnAudio\" className=\"btnComp\">\n            Audio\n          </button>\n          <button onClick={onChooseComp} id=\"btnVideo\" className=\"btnComp\">\n            Video\n          </button>\n          <button onClick={onChooseComp} id=\"btnImage\" className=\"btnComp\">\n            Image\n          </button>\n        </div>\n\n        {/* Quiz Content */}\n        <div className=\"bodyWrapper\">\n          <div className=\"wizardPair\">\n            <h3 className=\"h3\">Quiz Name:</h3>\n            <input\n              className=\"tb\"\n              id=\"tbQuizName\"\n              type=\"text\"\n              defaultValue={quiz.Name}\n            />\n          </div>\n\n          <div className=\"wizardPair\">\n            <h3 className=\"h3\">Quiz Description:</h3>\n            <textarea\n              className=\"ta\"\n              id=\"taQuizDesc\"\n              defaultValue={quiz.Desc}\n            ></textarea>\n          </div>\n\n          <div>\n            {/* Add Components here */}\n            {handleQuizForm()}\n\n            <div className=\"btnGroup\">\n              <button\n                onClick={() => {\n                  dispatch(storeTeacherSingleCourseQuizAction({}));\n                  history.push(\"/teacher-course-overview\");\n                }}\n                className=\"btnBack\"\n              >\n                Back\n              </button>\n              <button onClick={saveChanges} className=\"btnSaveGroup\">\n                Save Changes\n              </button>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Footer */}\n      <div>\n        <DashFooter />\n      </div>\n    </div>\n  );\n}\n","/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Teachers/Forums/ForumSingleBlock.js",[],"/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Students/Courses/StudentCourseOverview.js",["739","740","741","742"],"/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Students/Courses/StudentCourseLesson.js",["743","744","745","746","747","748","749"],"/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Students/Courses/StudentCourseQuiz.js",["750","751","752","753","754","755","756","757","758","759"],"/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Students/Courses/StudentCourseQuizResults.js",["760","761","762","763"],"import React, { useEffect } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { useHistory } from \"react-router-dom\";\n\nimport TopBar from \"../TopBar\";\nimport Footer from \"../Footer\";\nimport RandomString from \"../../RandomString\";\n\nexport default function StudentCourseQuizResults() {\n  const studentAuthID = useSelector((state) => state.storeStudentAuthIDReducer);\n  const user = useSelector((state) => state.storeStudentUserDataReducer);\n  const history = useHistory();\n  const dispatch = useDispatch();\n\n  const quizResults = useSelector(\n    (state) => state.storeStudentQuizFinalResultsReducer\n  );\n\n\n  // HANDLE\n  const handleResults = () => {\n    return quizResults.Results.map((res, i) => {\n      return (\n        <div\n          className={`resBlock ${\n            res.Result === \"Correct\"\n              ? \"green-background\"\n              : res.Result === \"Incorrect\"\n              ? \"red-background\"\n              : \"purple-background\"\n          }`}\n          key={i}\n        >\n          <span className=\"quizNum\">{i + 1}</span>\n          <p className=\"quizGiven\">Your Answer: {res.Given.toString()}</p>\n          <p className=\"quizAnswer\">Correct Answer: {res.Answer.toString()}</p>\n          <p className=\"quizPoints\">\n            Points Earned: {res.Earned} / {res.Points}\n          </p>\n          <span className=\"quizResult\">{res.Result}</span>\n        </div>\n      );\n    });\n  };\n\n  // NAV\n  const navCourseOverview = () => {\n    history.push(\"/student-course-overview\");\n  };\n\n  useEffect(() => {\n    if (!studentAuthID) {\n      history.push(\"/studentdash\");\n      return;\n    }\n  }, []);\n  return (\n    <div>\n      {/* Top Bar */}\n      <div>\n        <TopBar />\n      </div>\n\n      <div className=\"content\">\n        <h1>Results</h1>\n\n        <div className=\"resWrapper\">\n          <p className=\"resTopHead\">\n            {quizResults.CourseName} :{\" \"}\n            <span style={{ color: \"#3E00F9\" }}>{quizResults.QuizName}</span>\n          </p>\n          <br />\n          <br />\n          {handleResults()}\n          <br />\n          <button onClick={navCourseOverview} className=\"btnResultFinish\">\n            Finish\n          </button>\n        </div>\n      </div>\n\n      {/* Footer */}\n      <div>\n        <Footer />\n      </div>\n    </div>\n  );\n}\n","/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Teachers/Profile/ProfileMain.js",["764","765"],"import React, { useEffect } from \"react\";\nimport { useHistory } from \"react-router-dom\";\n\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { Switch, Route, Link, useRouteMatch } from \"react-router-dom\";\n\nimport TopBar from \"../Dash/TopBar\";\n\nimport ProfileFeedView from \"./ProfileFeedView\";\nimport ProfileFeedEdit from \"./ProfileFeedEdit\";\nimport ProfileFeedCreate from \"./ProfileFeedCreate\";\n\nimport ProfileAboutView from \"./ProfileAboutView\";\nimport ProfileAboutEdit from \"./ProfileAboutEdit\";\n\nimport ProfileAwardsView from \"./ProfileAwardsView\";\nimport ProfileAwardsEdit from \"./ProfileAwardsEdit\";\nimport ProfileGallery from \"./ProfileGallery\";\nimport ProfileReviewsView from \"./ProfileReviewsView\";\n\nimport DashFooter from \"../Dash/DashFooter\";\n\nimport \"./Profile.css\";\n\nexport default function ProfileMain() {\n  let { url } = useRouteMatch();\n  const dispatch = useDispatch();\n  const history = useHistory();\n  const teacherAuthID = useSelector((state) => state.storeTeacherAuthIDReducer);\n\n  const userDataState = useSelector((state) => state.userDataReducer);\n\n  useEffect(() => {\n    if (!teacherAuthID) {\n      history.push(\"/teacherdash\");\n      return;\n    }\n  }, []);\n\n  return (\n    <div>\n      {/* Top Bar */}\n      <div>\n        <TopBar />\n      </div>\n\n      <div className=\"content\">\n        {/* Photos */}\n        {/* Solid Cover */}\n        <div className=\"profile-cover\">\n          <div className=\"text-cover\">\n            <h2>{`${userDataState.FirstName} ${userDataState.LastName}`}</h2>\n            <p>{userDataState.AccountType}</p>\n          </div>\n        </div>\n\n        {/* Content */}\n\n        {/* Bottom Nav */}\n        <div className=\"profile-nav\">\n          <ul style={{ display: \"flex\" }}>\n            <li>\n              <Link className=\"profile-Link\" id=\"link-feed\" to={`${url}/feed`}>\n                Feed\n              </Link>\n            </li>\n            <br />\n            <li>\n              <Link\n                className=\"profile-Link\"\n                id=\"link-about\"\n                to={`${url}/about`}\n              >\n                About\n              </Link>\n            </li>\n            <br />\n            <li>\n              <Link\n                className=\"profile-Link\"\n                id=\"link-awards\"\n                to={`${url}/awards`}\n              >\n                Awards\n              </Link>\n            </li>\n            <br />\n            <li>\n              <Link\n                className=\"profile-Link\"\n                id=\"link-gallery\"\n                to={`${url}/gallery`}\n              >\n                Gallery\n              </Link>\n            </li>\n            <br />\n            {userDataState.AccountType === \"Teacher\" ? (\n              <li>\n                <Link\n                  className=\"profile-Link\"\n                  id=\"link-reviews\"\n                  to={`${url}/reviews`}\n                >\n                  Reviews\n                </Link>\n              </li>\n            ) : null}\n            <br />\n          </ul>\n        </div>\n\n        <div>\n          {/* ********************** */}\n\n          {/* Switch */}\n          <Switch>\n            {/* Feed */}\n            <Route path={`${url}/feed`}>\n              <ProfileFeedView />\n            </Route>\n            <Route path={`${url}/edit-feed`}>\n              <ProfileFeedEdit />\n            </Route>\n            <Route path={`${url}/new-feed`}>\n              <ProfileFeedCreate />\n            </Route>\n            {/* About */}\n            <Route path={`${url}/about`}>\n              <ProfileAboutView />\n            </Route>\n            <Route path={`${url}/edit-about`}>\n              <ProfileAboutEdit />\n            </Route>\n            {/* Awards */}\n            <Route path={`${url}/awards`}>\n              <ProfileAwardsView />\n            </Route>\n            <Route path={`${url}/edit-awards`}>\n              <ProfileAwardsEdit />\n            </Route>\n            {/* Gallery */}\n            <Route path={`${url}/gallery`}>\n              <ProfileGallery />\n            </Route>\n            {/* Reviews */}\n            <Route path={`${url}/reviews`}>\n              <ProfileReviewsView />\n            </Route>\n          </Switch>\n        </div>\n      </div>\n\n      {/* Footer */}\n      <div>\n        <DashFooter />\n      </div>\n    </div>\n  );\n}\n","/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Students/Connections/StudentConnectionsMain.js",["766","767"],"import React, { useEffect } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { useHistory } from \"react-router-dom\";\n\nimport TopBar from \"../TopBar\";\nimport Footer from \"../Footer\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport {\n  faSearch,\n  faTimes,\n  faTimesCircle,\n} from \"@fortawesome/free-solid-svg-icons\";\n\nimport \"./Connections.css\";\nimport {\n  students_Collection,\n  users_Collection,\n  connectionReqQueue_Collection,\n  teachers_Collection,\n} from \"../../../utils/firebase\";\nimport {\n  storeStudentAllConnectionsAction,\n  storeStudentUserDataAction,\n  storeStudentAllSearchUsersAction,\n  storeStudentAllConnReqsAction,\n} from \"../../../redux/actions\";\nimport { firebaseLooper } from \"../../../utils/tools\";\nimport RandomString from \"../../RandomString\";\nimport GetToday from \"../../GetToday\";\n\nexport default function StudentCoursesMain() {\n  const studentAuthID = useSelector((state) => state.storeStudentAuthIDReducer);\n  const user = useSelector((state) => state.storeStudentUserDataReducer);\n  const history = useHistory();\n  const dispatch = useDispatch();\n\n  const connections = useSelector(\n    (state) => state.storeStudentAllConnectionsReducer\n  );\n  const allSearchUsers = useSelector(\n    (state) => state.storeStudentAllSearchUsersReducer\n  );\n  const userState = useSelector((state) => state.storeStudentUserDataReducer);\n  const allConnReqs = useSelector(\n    (state) => state.storeStudentAllConnReqsReducer\n  );\n\n  // GET\n  const getAllConnections = () => {\n    students_Collection\n      .doc(studentAuthID)\n      .collection(\"Connections\")\n      .get()\n      .then((snapshot) => {\n        const connData = firebaseLooper(snapshot);\n        dispatch(storeStudentAllConnectionsAction(connData));\n      })\n      .catch((err) => console.log(err));\n  };\n  const getAllConnRequests = () => {\n    connectionReqQueue_Collection\n      .get()\n      .then((snapshot) => {\n        const queueData = firebaseLooper(snapshot);\n        dispatch(storeStudentAllConnReqsAction(queueData));\n      })\n      .catch((err) => console.log(err));\n  };\n  const getMyUserData = () => {\n    users_Collection\n      .where(\"AuthID\", \"==\", studentAuthID)\n      .get()\n      .then((snapshot) => {\n        const myData = firebaseLooper(snapshot);\n        myData.forEach((me) => {\n          dispatch(storeStudentUserDataAction(me));\n        });\n      })\n      .catch((err) => console.log(err));\n  };\n\n  // HANDLE\n  const handleConnectionsList = () => {\n    return connections.map((conn, i) => {\n      return (\n        <div className=\"connBlock\" key={i}>\n          <p className=\"connName\">\n            {conn.FirstName} {conn.LastName}\n          </p>\n          <p className=\"connEmail\">{conn.Email}</p>\n\n          <div className=\"btnsConn\">\n            <button className=\"btnConnMessage\">Message</button>\n            <button\n              id={conn.AuthID}\n              onClick={navConnProfile}\n              className=\"btnConnProfile\"\n            >\n              Profile\n            </button>\n            <button id={conn.id} className=\"btnConnRemove\">\n              <FontAwesomeIcon icon={faTimesCircle} />\n            </button>\n          </div>\n        </div>\n      );\n    });\n  };\n  const handleSearchList = () => {\n    return allSearchUsers.map((user, i) => {\n      return (\n        <div className=\"searchResBlock\" key={i}>\n          <p className=\"searchResName\">\n            {user.FirstName} {user.LastName}\n          </p>\n          <p className=\"searchResAuth\">{user.AuthID}</p>\n          <p className=\"searchResType\">{user.AccountType}</p>\n          {handleRequest(user.AuthID)}\n        </div>\n      );\n    });\n  };\n  const handleRequest = (authID) => {\n    let found = false;\n    connections.forEach((conn) => {\n      if (conn.AuthID === authID) {\n        found = true;\n      } else {\n        // Do Nothing\n      }\n    });\n\n    // Search in connection request\n    allConnReqs.forEach((req) => {\n      // Check if authID matches any of the reqs in here\n      if (req.ConnID === authID) {\n        found = true;\n      } else {\n        // Do Nothing\n      }\n    });\n\n    if (found) {\n      return <p className=\"reqSent\">Request Sent</p>;\n    } else {\n      return (\n        <button id={authID} onClick={sendRequest} className=\"btnSearchResReq\">\n          Send Request\n        </button>\n      );\n    }\n  };\n\n  // SEARCH\n  const searchUser = () => {\n    const search = document.querySelector(\"#tbConnSearch\").value.toLowerCase();\n\n    const searchArr = search.split(\" \");\n\n    if (searchArr.length === 1) {\n      document.querySelector(\"#searchListBlock\").classList.remove(\"hide\");\n      // Assume they entered a first name or username\n      const word = searchArr[0];\n      const capitalized = word.replace(/^./, word[0].toUpperCase());\n\n      users_Collection\n        .where(\"FirstName\", \"==\", capitalized)\n        .get()\n        .then((snapshot) => {\n          const usersFirst = firebaseLooper(snapshot);\n          if (usersFirst.length > 0) {\n            // Found some first names\n            dispatch(storeStudentAllSearchUsersAction(usersFirst));\n          } else {\n            // Did  not find first names\n            users_Collection\n              .where(\"AuthID\", \"==\", word)\n              .get()\n              .then((snapshot) => {\n                const usersAuth = firebaseLooper(snapshot);\n                if (usersAuth.length > 0) {\n                  // Found some usernames\n                  dispatch(storeStudentAllSearchUsersAction(usersAuth));\n                } else {\n                  // Found nothing!\n                  dispatch(storeStudentAllSearchUsersAction([]));\n                }\n              })\n              .catch((err) => console.log(err));\n          }\n        })\n        .catch((err) => console.log(err));\n    } else if (searchArr.length === 2) {\n      const firstName = searchArr[0];\n      const lastName = searchArr[1];\n      const firstCap = firstName.replace(/^./, firstName[0].toUpperCase());\n      const lastCap = lastName.replace(/^./, lastName[0].toUpperCase());\n\n      // Assume they entered a full name\n      users_Collection\n        .where(\"FirstName\", \"==\", firstCap)\n        .get()\n        .then((snapshot) => {\n          const usersFirst = firebaseLooper(snapshot);\n          const userCount = snapshot.size;\n          if (userCount > 0) {\n            let fullUsers = [];\n            // Found first names\n            usersFirst.forEach((u, i) => {\n              if (u.LastName === lastCap) {\n                // Found user\n                fullUsers.push(u);\n              }\n              if (i + 1 === userCount) {\n                dispatch(storeStudentAllSearchUsersAction(fullUsers));\n                document\n                  .querySelector(\"#searchListBlock\")\n                  .classList.remove(\"hide\");\n              }\n            });\n          } else {\n            // Did not find last name\n            dispatch(storeStudentAllSearchUsersAction([]));\n          }\n        })\n        .catch((err) => console.log(err));\n    }\n  };\n\n  // REQUEST\n  const sendRequest = (event) => {\n    const authID = event.target.getAttribute(\"id\");\n\n    users_Collection.where('AuthID','==',studentAuthID).get().then((snapshot) => {\n      const myData = firebaseLooper(snapshot);\n      myData.forEach(me => {\n        allSearchUsers.forEach((u) => {\n          if (u.AuthID === authID) {\n            // First store request in req queue\n            const rand1 = RandomString();\n            const rand2 = RandomString();\n            const connReqID = `ConnReq${rand1}${rand2}`;\n    \n            connectionReqQueue_Collection\n              .doc(connReqID)\n              .set({\n                ConnID: u.AuthID,\n                SenderID: studentAuthID,\n                CFirstName: userState.FirstName,\n                CLastName: userState.LastName,\n              })\n              .catch((err) => console.log(err));\n    \n            if (u.AccountType === \"Student\") {\n              // User is Student\n              // Send Notification\n              const notifID = `Notif${rand1}${rand2}`;\n    \n              students_Collection\n                .doc(u.AuthID)\n                .collection(\"Notifications\")\n                .doc(notifID)\n                .set({\n                  Action: \"connrequest\",\n                  Text: `You have received a request from ${me.FirstName} ${me.LastName} to connect.`,\n                  Date: GetToday(),\n                  Icon: \"faUser\",\n                })\n                .catch((err) => console.log(err));\n            } else if (u.AccountType === \"Teacher\") {\n              // User is Teacher\n              // Send Notification\n              const notifID = `Notif${rand1}${rand2}`;\n    \n              teachers_Collection\n                .doc(u.AuthID)\n                .collection(\"Notifications\")\n                .doc(notifID)\n                .set({\n                  Action: \"connrequest\",\n                  Text: `You have received a request from ${me.FirstName} ${me.LastName} to connect.`,\n                  Date: GetToday(),\n                  Icon: \"faUser\",\n                })\n                .catch((err) => console.log(err));\n            }\n    \n            // Dispatch\n            const allReqs = [...allConnReqs];\n            allReqs.push({\n              ConnID: u.AuthID,\n              SenderID: studentAuthID,\n              CFirstName: userState.FirstName,\n              CLastName: userState.LastName,\n            });\n            dispatch(storeStudentAllConnReqsAction(allReqs));\n          }\n        });\n      })\n    }).catch(err => console.log(err));\n  };\n\n  // NAV\n  const navConnProfile = (event) => {\n    const authID = event.target.getAttribute(\"id\");\n\n    users_Collection\n      .where(\"AuthID\", \"==\", authID)\n      .get()\n      .then((snapshot) => {\n        const userData = firebaseLooper(snapshot);\n        userData.forEach((user) => {\n          dispatch(storeStudentUserDataAction(user));\n        });\n      })\n      .catch((err) => console.log(err));\n\n    history.push(\"/student-profile\");\n  };\n\n  useEffect(() => {\n    if (!studentAuthID) {\n      history.push(\"/studentdash\");\n      return;\n    }\n\n    getAllConnections();\n    getAllConnRequests();\n    getMyUserData();\n    document.querySelector(\"#searchListBlock\").classList.add(\"hide\");\n  }, []);\n  return (\n    <div>\n      {/* Top Bar */}\n      <div>\n        <TopBar />\n      </div>\n\n      <div className=\"content\">\n        <h1>Connections</h1>\n\n        <div className=\"white-background\">\n          <h3 className=\"headSearch\">Search for Connections</h3>\n          <input\n            className=\"tbConnSearch\"\n            id=\"tbConnSearch\"\n            type=\"text\"\n            placeholder=\"Type Name or ID here.  'Jack Milton' or 'jckmltn\"\n          />\n          <button className=\"btnConnSearch\" onClick={searchUser}>\n            <FontAwesomeIcon icon={faSearch} />\n          </button>\n          {/* Search List */}\n          <div id=\"searchListBlock\" className=\"searchListBlock\">\n            <FontAwesomeIcon\n              onClick={() => {\n                document\n                  .querySelector(\"#searchListBlock\")\n                  .classList.add(\"hide\");\n              }}\n              className=\"closeSearchList\"\n              icon={faTimes}\n            />\n            {handleSearchList()}\n          </div>\n        </div>\n\n        <div className=\"white-background\">{handleConnectionsList()}</div>\n      </div>\n\n      {/* Footer */}\n      <div>\n        <Footer />\n      </div>\n    </div>\n  );\n}\n","/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Students/Profile/StudentProfileFeedView.js",["768"],"import React, { useEffect } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { useHistory } from \"react-router-dom\";\n\nimport {\n  storeStudentProfileFeedPostsAction,\n  storeStudentProfileFeedPostAction,\n  storeStudentMeDataAction,\n} from \"../../../redux/actions\";\nimport { firebaseLooper } from \"../../../utils/tools\";\nimport {\n  students_Collection,\n  teachers_Collection,\n  users_Collection,\n} from \"../../../utils/firebase\";\n\nexport default function StudentProfileFeedView() {\n  const studentAuthID = useSelector((state) => state.storeStudentAuthIDReducer);\n  const user = useSelector((state) => state.storeStudentUserDataReducer);\n  const history = useHistory();\n  const dispatch = useDispatch();\n\n  //   States\n  const posts = useSelector(\n    (state) => state.storeStudentProfileFeedPostsReducer\n  );\n  const meData = useSelector((state) => state.storeStudentMeDataReducer);\n\n  // GET\n  const getProfileFeedData = () => {\n    let feed_Collection;\n\n    if (user.AccountType === \"Student\") {\n      feed_Collection = students_Collection\n        .doc(user.AuthID)\n        .collection(\"Profile\")\n        .doc(\"Feed\")\n        .collection(\"Posts\");\n    } else if (user.AccountType === \"Teacher\") {\n      feed_Collection = teachers_Collection\n        .doc(user.AuthID)\n        .collection(\"Profile\")\n        .doc(\"Feed\")\n        .collection(\"Posts\");\n    }\n\n    feed_Collection\n      .orderBy(\"Date\", \"desc\")\n      .get()\n      .then((snapshot) => {\n        const data = firebaseLooper(snapshot);\n        dispatch(storeStudentProfileFeedPostsAction(data));\n      })\n      .catch((err) => console.log(err));\n  };\n  const storeSinglePost = (event) => {\n    const postID = event.target.getAttribute(\"id\");\n    posts.forEach((post) => {\n      if (post.id === postID) {\n        dispatch(storeStudentProfileFeedPostAction(post));\n        history.push(\"/student-profile/feed-edit\");\n      }\n    });\n  };\n  const getMeData = () => {\n    users_Collection\n      .where(\"AuthID\", \"==\", studentAuthID)\n      .get()\n      .then((snapshot) => {\n        const myData = firebaseLooper(snapshot);\n        myData.forEach((me) => {\n          dispatch(storeStudentMeDataAction(me));\n        });\n      })\n      .catch((err) => console.log(err));\n  };\n\n  // HANDLE\n  const handleCurrPage = () => {\n    let feedBtn = document.querySelector(\"#link-feed\");\n    feedBtn.classList.add(\"navy-back\");\n\n    let aboutBtn = document.querySelector(\"#link-about\");\n    aboutBtn.classList.remove(\"navy-back\");\n\n    let awardsBtn = document.querySelector(\"#link-awards\");\n    awardsBtn.classList.remove(\"navy-back\");\n\n    let galleryBtn = document.querySelector(\"#link-gallery\");\n    galleryBtn.classList.remove(\"navy-back\");\n\n    if (user.AccountType === \"Teacher\") {\n      let reviewsBtn = document.querySelector(\"#link-reviews\");\n      reviewsBtn.classList.remove(\"navy-back\");\n    }\n  };\n  const handlePostList = () => {\n    return posts.map((post, i) => {\n      return (\n        <div className=\"post-wrapper\" key={i}>\n          <div className=\"post-top-wrapper\">\n            <div className=\"post-name-split\">\n              <h3 className=\"post-name\">{post.Poster}</h3>\n              <p className=\"post-date\">\n                {post.Date ? post.Date.toDate().toString().substr(4, 11) : null}\n              </p>\n            </div>\n            <div>\n              {post.Poster === `${meData.FirstName} ${meData.LastName}` ? (\n                <button\n                  className=\"btn-edit\"\n                  id={post.id}\n                  onClick={storeSinglePost}\n                >\n                  Edit\n                </button>\n              ) : null}\n            </div>\n          </div>\n\n          <div className=\"post-body\">\n            <p>{post.Text}</p>\n          </div>\n        </div>\n      );\n    });\n  };\n\n  useEffect(() => {\n    if (!studentAuthID) {\n      history.push(\"/studentdash\");\n      return;\n    }\n\n    getProfileFeedData();\n    handleCurrPage();\n    getMeData();\n  }, [posts]);\n  return (\n    <div>\n      <div>\n        <button\n          className=\"btn-newPost\"\n          onClick={() => history.push(\"/student-profile/feed-create\")}\n        >\n          Create Post\n        </button>\n        <br />\n        <div className=\"white-background\">{handlePostList()}</div>\n      </div>\n    </div>\n  );\n}\n",["769","770"],"/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Students/Profile/StudentProfileFeedEdit.js",["771"],"import React, { useEffect } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { useHistory } from \"react-router-dom\";\nimport {\n  storeStudentMeDataAction,\n  storeStudentProfileFeedPostsAction,\n} from \"../../../redux/actions\";\nimport {\n  students_Collection,\n  teachers_Collection,\n  users_Collection,\n} from \"../../../utils/firebase\";\nimport GetToday from \"../../GetToday\";\nimport { firebaseLooper } from \"../../../utils/tools\";\n\nexport default function StudentProfileFeedEdit() {\n  const studentAuthID = useSelector((state) => state.storeStudentAuthIDReducer);\n  const user = useSelector((state) => state.storeStudentUserDataReducer);\n  const history = useHistory();\n  const dispatch = useDispatch();\n\n  //   States\n  const singlePostState = useSelector(\n    (state) => state.storeStudentProfileFeedPostReducer\n  );\n  const allPostsState = useSelector(\n    (state) => state.storeStudentProfileFeedPostsReducer\n  );\n  const meData = useSelector((state) => state.storeStudentMeDataReducer);\n\n  // GET\n  const getMeData = () => {\n    users_Collection\n      .where(\"AuthID\", \"==\", studentAuthID)\n      .get()\n      .then((snapshot) => {\n        const myData = firebaseLooper(snapshot);\n        myData.forEach((me) => {\n          dispatch(storeStudentMeDataAction(me));\n        });\n      })\n      .catch((err) => console.log(err));\n  };\n  const saveSinglePost = () => {\n    const postText = document.querySelector(\"#tbPostText\").value;\n\n    const postObj = {\n      ...singlePostState,\n      Poster: `${meData.Firstname} ${meData.LastName}`,\n      Text: postText,\n      Date: GetToday(),\n    };\n\n    // Save to DB\n    if (user.AccountType === \"Student\") {\n      students_Collection\n        .doc(user.AuthID)\n        .collection(\"Profile\")\n        .doc(\"Feed\")\n        .collection(\"Posts\")\n        .doc(singlePostState.id)\n        .set({\n          Poster: `${meData.FirstName} ${meData.LastName}`,\n          Likes: singlePostState.Likes,\n          Text: postText,\n          Date: GetToday(),\n        })\n        .catch((err) => console.log(err));\n    } else if (user.AccountType === \"Teacher\") {\n      teachers_Collection\n        .doc(user.AuthID)\n        .collection(\"Profile\")\n        .doc(\"Feed\")\n        .collection(\"Posts\")\n        .doc(singlePostState.id)\n        .set({\n          Poster: `${meData.FirstName} ${meData.LastName}`,\n          Likes: singlePostState.Likes,\n          Text: postText,\n          Date: GetToday(),\n        })\n        .catch((err) => console.log(err));\n    }\n\n    allPostsState.forEach((post) => {\n      if (post.id === singlePostState.id) {\n        post = {\n          ...postObj,\n        };\n        dispatch(storeStudentProfileFeedPostsAction(allPostsState));\n      }\n    });\n\n    history.push(\"/student-profile/feed\");\n  };\n\n  // REMOVE\n  const removeSinglePost = () => {\n    const postID = singlePostState.id;\n\n    if (user.AccountType === \"Student\") {\n      students_Collection\n        .doc(user.AuthID)\n        .collection(\"Profile\")\n        .doc(\"Feed\")\n        .collection(\"Posts\")\n        .doc(postID)\n        .delete()\n        .catch((err) => console.log(err));\n    } else if (user.AccountType === \"Teacher\") {\n      teachers_Collection\n        .doc(user.AuthID)\n        .collection(\"Profile\")\n        .doc(\"Feed\")\n        .collection(\"Posts\")\n        .doc(postID)\n        .delete()\n        .catch((err) => console.log(err));\n    }\n\n    const allPosts = [...allPostsState];\n    const filtered = allPosts.filter((p) => p.id !== postID);\n    filtered.sort((a, b) => b.Date - a.Date);\n    dispatch(storeStudentProfileFeedPostsAction(filtered));\n\n    history.push(\"/student-profile/feed\");\n  };\n\n  // HANDLE\n  const handleCurrPage = () => {\n    let feedBtn = document.querySelector(\"#link-feed\");\n    feedBtn.classList.add(\"navy-back\");\n\n    let aboutBtn = document.querySelector(\"#link-about\");\n    aboutBtn.classList.remove(\"navy-back\");\n\n    let awardsBtn = document.querySelector(\"#link-awards\");\n    awardsBtn.classList.remove(\"navy-back\");\n\n    let galleryBtn = document.querySelector(\"#link-gallery\");\n    galleryBtn.classList.remove(\"navy-back\");\n\n    if (user.AccountType === \"Teacher\") {\n      let reviewsBtn = document.querySelector(\"#link-reviews\");\n      reviewsBtn.classList.remove(\"navy-back\");\n    }\n  };\n\n  useEffect(() => {\n    if (!studentAuthID) {\n      history.push(\"/studentdash\");\n      return;\n    }\n\n    handleCurrPage();\n    getMeData();\n  }, []);\n\n  return (\n    <div className=\"post-edit-wrapper\">\n      <button\n        className=\"btn-back maroon-back\"\n        onClick={() => {\n          history.push(\"/student-profile/feed\");\n        }}\n      >\n        Back\n      </button>\n\n      <div className=\"post-create\">\n        <h2 className=\"post-create-head\">Edit Post</h2>\n        <textarea\n          className=\"ta\"\n          id=\"tbPostText\"\n          defaultValue={singlePostState.Text}\n        ></textarea>\n        <div className=\"btn-wrapper\">\n          <button className=\"btn-remove\" onClick={removeSinglePost}>\n            Remove\n          </button>\n          <button className=\"btn-save\" onClick={saveSinglePost}>\n            Save\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n}\n",["772","773"],"/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Students/Profile/StudentProfileFeedCreate.js",["774","775"],"import React, { useEffect } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { useHistory } from \"react-router-dom\";\nimport {\n  storeStudentProfileFeedPostAction,\n  storeStudentProfileFeedPostsAction,\n} from \"../../../redux/actions\";\nimport {\n  students_Collection,\n  teachers_Collection,\n  users_Collection,\n} from \"../../../utils/firebase\";\nimport { firebaseLooper } from \"../../../utils/tools\";\nimport GetToday from \"../../GetToday\";\nimport RandomString from \"../../RandomString\";\n\nexport default function StudentProfileFeedCreate() {\n  const studentAuthID = useSelector((state) => state.storeStudentAuthIDReducer);\n  const user = useSelector((state) => state.storeStudentUserDataReducer);\n  const history = useHistory();\n  const dispatch = useDispatch();\n\n  const allPostsState = useSelector(\n    (state) => state.storeStudentProfileFeedPostsReducer\n  );\n\n  // POST\n  const savePost = () => {\n    const postText = document.querySelector(\"#tbPostText\").value;\n    const rand1 = RandomString();\n    const rand2 = RandomString();\n    const postID = `Post${rand1}${rand2}`;\n\n    // Search for Connection\n    users_Collection\n      .where(\"AuthID\", \"==\", studentAuthID)\n      .get()\n      .then((snapshot) => {\n        const myData = firebaseLooper(snapshot);\n        myData.forEach((me) => {\n          // I have my info, now search for the user's\n\n          const fullName = `${me.FirstName} ${me.LastName}`;\n\n          users_Collection\n            .where(\"AuthID\", \"==\", user.AuthID)\n            .get()\n            .then((snapshot) => {\n              const userData = firebaseLooper(snapshot);\n              userData.forEach((u) => {\n                if (u.AccountType === \"Student\") {\n                  students_Collection\n                    .doc(u.AuthID)\n                    .collection(\"Profile\")\n                    .doc(\"Feed\")\n                    .collection(\"Posts\")\n                    .doc(postID)\n                    .set({\n                      Text: postText,\n                      Poster: fullName,\n                      Date: GetToday(),\n                      Likes: 0,\n                    })\n                    .catch((err) => console.log(err));\n                } else if (u.AccountType === \"Teacher\") {\n                  teachers_Collection\n                    .doc(u.AuthID)\n                    .collection(\"Profile\")\n                    .doc(\"Feed\")\n                    .collection(\"Posts\")\n                    .doc(postID)\n                    .set({\n                      Text: postText,\n                      Poster: fullName,\n                      Date: GetToday(),\n                      Likes: 0,\n                    })\n                    .catch((err) => console.log(err));\n                }\n\n                // Dispatch\n                const allPosts = [...allPostsState];\n                allPosts.push({\n                  id: postID,\n                  Text: postText,\n                  Poster: fullName,\n                  Date: GetToday(),\n                  Likes: 0,\n                });\n                allPosts.sort((a, b) => b.Date - a.Date);\n                dispatch(storeStudentProfileFeedPostsAction(allPosts));\n              });\n            })\n            .catch((err) => console.log(err));\n        });\n      })\n      .catch((err) => console.log(err));\n\n    history.push(\"/student-profile/feed\");\n  };\n\n  // HANDLE\n  const handleCurrPage = () => {\n    let feedBtn = document.querySelector(\"#link-feed\");\n    feedBtn.classList.add(\"navy-back\");\n\n    let aboutBtn = document.querySelector(\"#link-about\");\n    aboutBtn.classList.remove(\"navy-back\");\n\n    let awardsBtn = document.querySelector(\"#link-awards\");\n    awardsBtn.classList.remove(\"navy-back\");\n\n    let galleryBtn = document.querySelector(\"#link-gallery\");\n    galleryBtn.classList.remove(\"navy-back\");\n\n    if (user.AccountType === \"Teacher\") {\n      let reviewsBtn = document.querySelector(\"#link-reviews\");\n      reviewsBtn.classList.remove(\"navy-back\");\n    }\n  };\n\n  useEffect(() => {\n    if (!studentAuthID) {\n      history.push(\"/studentdash\");\n      return;\n    }\n\n    handleCurrPage();\n  }, []);\n  return (\n    <div className=\"post-form-wrapper\">\n      <button\n        className=\"btn-back\"\n        onClick={() => history.push(\"/student-profile/feed\")}\n      >\n        Back\n      </button>\n      <div className=\"post-create\">\n        <h2 className=\"post-create-head\">Create a Post</h2>\n\n        <textarea\n          className=\"ta\"\n          id=\"tbPostText\"\n          placeholder=\"Enter post here...\"\n        ></textarea>\n        <div className=\"btn-wrapper\">\n          <button className=\"btn-dark btn-post\" onClick={savePost}>\n            Post\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n}\n","/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Students/Profile/StudentProfileAboutView.js",["776"],"import React, { useEffect } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { useHistory } from \"react-router-dom\";\nimport {\n  storeStudentAboutAction,\n  storeStudentExpAction,\n} from \"../../../redux/actions\";\nimport {\n  students_Collection,\n  teachers_Collection,\n} from \"../../../utils/firebase\";\nimport { firebaseLooper } from \"../../../utils/tools\";\n\nexport default function StudentProfileAboutView() {\n  const studentAuthID = useSelector((state) => state.storeStudentAuthIDReducer);\n  const user = useSelector((state) => state.storeStudentUserDataReducer);\n  const history = useHistory();\n  const dispatch = useDispatch();\n\n  const about = useSelector((state) => state.storeStudentAboutReducer);\n  const exp = useSelector((state) => state.storeStudentExpReducer);\n\n  const meData = useSelector((state) => state.storeStudentMeDataReducer);\n\n  // GET\n  const getAllAboutData = () => {\n    let profile_Collection;\n\n    if (user.AccountType === \"Student\") {\n      profile_Collection = students_Collection\n        .doc(user.AuthID)\n        .collection(\"Profile\");\n    } else if (user.AccountType === \"Teacher\") {\n      profile_Collection = teachers_Collection\n        .doc(user.AuthID)\n        .collection(\"Profile\");\n    }\n\n    profile_Collection\n      .get()\n      .then((snapshot) => {\n        const data = firebaseLooper(snapshot);\n        data.forEach((d) => {\n          if (d.id === \"About\") {\n            dispatch(storeStudentAboutAction(d));\n          }\n        });\n      })\n      .catch((err) => console.log(err));\n  };\n  const getAllExperienceData = () => {\n    let experience_Collection;\n\n    if (user.AccountType === \"Student\") {\n      experience_Collection = students_Collection\n        .doc(user.AuthID)\n        .collection(\"Profile\")\n        .doc(\"Experience\")\n        .collection(\"ExpBlocks\");\n    } else if (user.AccountType === \"Teacher\") {\n      experience_Collection = teachers_Collection\n        .doc(user.AuthID)\n        .collection(\"Profile\")\n        .doc(\"Experience\")\n        .collection(\"ExpBlocks\");\n    }\n\n    experience_Collection\n      .get()\n      .then((snapshot) => {\n        const data = firebaseLooper(snapshot);\n        dispatch(storeStudentExpAction(data));\n      })\n      .catch((err) => console.log(err));\n  };\n\n  // HANDLE\n  const handleCurrPage = () => {\n    let feedBtn = document.querySelector(\"#link-feed\");\n    feedBtn.classList.remove(\"navy-back\");\n\n    let aboutBtn = document.querySelector(\"#link-about\");\n    aboutBtn.classList.add(\"navy-back\");\n\n    let awardsBtn = document.querySelector(\"#link-awards\");\n    awardsBtn.classList.remove(\"navy-back\");\n\n    let galleryBtn = document.querySelector(\"#link-gallery\");\n    galleryBtn.classList.remove(\"navy-back\");\n\n    if (user.AccountType === \"Teacher\") {\n      let reviewsBtn = document.querySelector(\"#link-reviews\");\n      reviewsBtn.classList.remove(\"navy-back\");\n    }\n  };\n\n  useEffect(() => {\n    if (!studentAuthID) {\n      history.push(\"/studentdash\");\n      return;\n    }\n\n    getAllAboutData();\n    getAllExperienceData();\n    handleCurrPage();\n  }, [about, exp]);\n  return (\n    <div>\n      {user.AuthID === meData.AuthID ? (\n        <button\n          className=\"btn-newPost\"\n          onClick={() => history.push(\"/student-profile/about-edit\")}\n        >\n          Edit\n        </button>\n      ) : null}\n      <div className=\"about-section\">\n        <h2>About</h2>\n        <p>{about.About}</p>\n      </div>\n      <div className=\"about-section\">\n        <h2>Experience</h2>\n        {exp.map((ex, i) => {\n          return (\n            <div className=\"exp-section\" key={i}>\n              <h3>{ex.Institution}</h3>\n              <p>{ex.Desc}</p>\n              <div className=\"about-dates\">\n                <p>\n                  <span className=\"about-date\">Started:</span>{\" \"}\n                  {ex.Start.toDate().toString().substr(4, 11)}\n                </p>\n                <p>\n                  <span className=\"about-date\">Ended:</span>{\" \"}\n                  {ex.End.toDate().toString().substr(4, 11)}\n                </p>\n              </div>\n            </div>\n          );\n        })}\n      </div>\n      <div className=\"about-section personal-section\">\n        <h2>Personal</h2>\n        <p>\n          <span className=\"personal-p\">Email:</span> {about.Email}\n        </p>\n        <p>\n          <span className=\"personal-p\">Location:</span> {about.Location}\n        </p>\n        <p>\n          <span className=\"personal-p\">Instruments:</span>{\" \"}\n        </p>\n        {about.Instruments ? (\n          <div>\n            <ul className=\"about-inst\">\n              {about.Instruments.map((ins, i) => {\n                return <li key={i}>{ins}</li>;\n              })}\n            </ul>\n            <p>\n              <span className=\"personal-p\">Joined:</span>{\" \"}\n              {about.Joined.toDate().toString().substr(4, 11)}\n            </p>\n          </div>\n        ) : null}\n      </div>\n    </div>\n  );\n}\n","/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Students/Profile/StudentProfileAboutEdit.js",["777","778","779"],"import React, { useEffect } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { useHistory } from \"react-router-dom\";\nimport {\n  toggleNewExperienceFormAction,\n  storeProfileExperienceDataAction,\n  storeProfileAboutDataAction,\n  toggleNewInstrumentFormAction,\n  storeStudentAboutAction,\n  storeStudentExpAction,\n} from \"../../../redux/actions\";\nimport { students_Collection } from \"../../../utils/firebase\";\nimport firebase from \"../../../utils/firebase\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport {\n  faMinus,\n  faPlus,\n  faTimesCircle,\n} from \"@fortawesome/free-solid-svg-icons\";\n\nexport default function StudentProfileAboutEdit() {\n  const studentAuthID = useSelector((state) => state.storeStudentAuthIDReducer);\n  const user = useSelector((state) => state.storeStudentUserDataReducer);\n  const history = useHistory();\n  const dispatch = useDispatch();\n\n  const about = useSelector((state) => state.storeStudentAboutReducer);\n  const exp = useSelector((state) => state.storeStudentExpReducer);\n\n  const toggleExpState = useSelector(\n    (state) => state.toggleNewExperienceFormReducer\n  );\n  const toggleInsState = useSelector(\n    (state) => state.toggleNewInstrumentFormReducer\n  );\n\n  const meData = useSelector((state) => state.storeStudentMeDataReducer);\n\n  const saveAllChanges = () => {\n    // About Section\n    const aboutText = document.querySelector(\"#taAboutDescText\").value;\n\n    // Experience Section\n    const newExperienceArray = [];\n\n    const expCount = exp.length;\n    for (let i = 0; i < expCount; i = i + 1) {\n      const tbInstitution = document.querySelector(`#tbExpInstText${i}`).value;\n      const tbDesc = document.querySelector(`#taExpDescText${i}`).value;\n      const daStarted = document.querySelector(`#dtStarted${i}`).value;\n      const daEnded = document.querySelector(`#dtEnded${i}`).value;\n\n      const startedSplit = daStarted.split(\"-\");\n      const endedSplit = daEnded.split(\"-\");\n\n      const startedDate = firebase.firestore.Timestamp.fromDate(\n        new Date(`${startedSplit[1]} ${startedSplit[2]}, ${startedSplit[0]}`)\n      );\n      const endedDate = firebase.firestore.Timestamp.fromDate(\n        new Date(`${endedSplit[1]} ${endedSplit[2]}, ${endedSplit[0]}`)\n      );\n\n      newExperienceArray.push({\n        id: exp[i].id,\n        Institution: tbInstitution,\n        Desc: tbDesc,\n        Start: startedDate,\n        End: endedDate,\n      });\n    }\n\n    // Personal\n    const email = document.querySelector(\"#tbEmailText\").value;\n    const location = document.querySelector(\"#tbLocationText\").value;\n\n    const insArray = [];\n    const insCount = about.Instruments.length;\n    for (let i = 0; i < insCount; i = i + 1) {\n      const tbInstrument = document.querySelector(`#tbInstruments${i}`).value;\n\n      insArray.push(tbInstrument);\n    }\n\n    // Save to DB\n    students_Collection\n      .doc(studentAuthID)\n      .collection(\"Profile\")\n      .doc(\"About\")\n      .update({\n        About: aboutText,\n        Email: email,\n        Location: location,\n        Instruments: insArray,\n        Joined: about.Joined,\n      })\n      .catch((err) => console.log(err));\n\n    newExperienceArray.forEach((ex) => {\n      students_Collection\n        .doc(studentAuthID)\n        .collection(\"Profile\")\n        .doc(\"Experience\")\n        .collection(\"ExpBlocks\")\n        .doc(ex.id)\n        .update({\n          Institution: ex.Institution,\n          Desc: ex.Desc,\n          Start: ex.Start,\n          End: ex.End,\n        })\n        .catch((err) => console.log(err));\n    });\n\n    // Dispatch\n    const tempAbout = {\n      About: aboutText,\n      Email: email,\n      Location: location,\n      Instruments: insArray,\n      Joined: about.Joined,\n    };\n\n    const tempExp = [...newExperienceArray];\n\n    dispatch(storeStudentAboutAction(tempAbout));\n    dispatch(storeStudentExpAction(tempExp));\n\n    history.push(\"/student-profile/about\");\n  };\n\n  const applyNewExperience = () => {\n    let rand1 = Math.random().toString(36).substring(3);\n    let rand2 = Math.random().toString(36).substring(3);\n    const expBlockID = `ExpBlock${rand1}${rand2}`;\n\n    const institution = document.querySelector(\"#tbInstText\").value;\n    const desc = document.querySelector(\"#tbDescText\").value;\n    const started = document.querySelector(\"#daStartDate\").value;\n    const ended = document.querySelector(\"#daEndDate\").value;\n\n    const startedSplit = started.split(\"-\");\n    const endedSplit = ended.split(\"-\");\n\n    const startedDate = firebase.firestore.Timestamp.fromDate(\n      new Date(`${startedSplit[1]} ${startedSplit[2]}, ${startedSplit[0]}`)\n    );\n    const endedDate = firebase.firestore.Timestamp.fromDate(\n      new Date(`${endedSplit[1]} ${endedSplit[2]}, ${endedSplit[0]}`)\n    );\n\n    // Save to database\n    students_Collection\n      .doc(studentAuthID)\n      .collection(\"Profile\")\n      .doc(\"Experience\")\n      .collection(\"ExpBlocks\")\n      .doc(expBlockID)\n      .set({\n        Institution: institution,\n        Desc: desc,\n        Start: startedDate,\n        End: endedDate,\n      })\n      .catch((err) => console.log(err));\n\n    // dispatch new exp\n    const allExp = [...exp];\n\n    allExp.push({\n      id: expBlockID,\n      Institution: institution,\n      Desc: desc,\n      Start: startedDate,\n      End: endedDate,\n    });\n\n    console.log(allExp);\n\n    dispatch(storeProfileExperienceDataAction(allExp));\n    dispatch(toggleNewExperienceFormAction());\n  };\n\n  const removeExperience = (event) => {\n    const exID = event.target.getAttribute(\"id\");\n\n    students_Collection\n      .doc(studentAuthID)\n      .collection(\"Profile\")\n      .doc(\"Experience\")\n      .collection(\"ExpBlocks\")\n      .doc(exID)\n      .delete()\n      .catch((err) => console.log(err));\n\n    const allExp = [...exp];\n\n    const filtered = allExp.filter((ex) => ex.id !== exID);\n\n    dispatch(storeProfileExperienceDataAction(filtered));\n  };\n\n  const removeInstrument = (event) => {\n    const instrument = event.target.getAttribute(\"id\");\n    const allInstruments = [...about.Instruments];\n\n    const newList = allInstruments.filter((ins) => ins !== instrument);\n\n    const newObj = {\n      ...about,\n      Instruments: newList,\n    };\n\n    // Remove from DB\n    students_Collection\n      .doc(studentAuthID)\n      .collection(\"Profile\")\n      .doc(\"About\")\n      .update({\n        Instruments: firebase.firestore.FieldValue.arrayRemove(instrument),\n      })\n      .catch((err) => console.log(err));\n\n    dispatch(storeProfileAboutDataAction(newObj));\n  };\n\n  const addInstrument = () => {\n    const newIns = document.querySelector(\"#tbNewInsText\").value;\n\n    // Add to DB\n    students_Collection\n      .doc(studentAuthID)\n      .collection(\"Profile\")\n      .doc(\"About\")\n      .update({\n        Instruments: firebase.firestore.FieldValue.arrayUnion(newIns),\n      })\n      .catch((err) => console.log(err));\n\n    // dispatch\n    const newInstruments = [...about.Instruments];\n    newInstruments.push(newIns);\n\n    const newObj = {\n      ...about,\n      Instruments: newInstruments,\n    };\n\n    dispatch(storeProfileAboutDataAction(newObj));\n    dispatch(toggleNewInstrumentFormAction());\n  };\n\n  // HANDLE\n  const handleCurrPage = () => {\n    let feedBtn = document.querySelector(\"#link-feed\");\n    feedBtn.classList.remove(\"navy-back\");\n\n    let aboutBtn = document.querySelector(\"#link-about\");\n    aboutBtn.classList.add(\"navy-back\");\n\n    let awardsBtn = document.querySelector(\"#link-awards\");\n    awardsBtn.classList.remove(\"navy-back\");\n\n    let galleryBtn = document.querySelector(\"#link-gallery\");\n    galleryBtn.classList.remove(\"navy-back\");\n\n    if (user.AccountType === \"Teacher\") {\n      let reviewsBtn = document.querySelector(\"#link-reviews\");\n      reviewsBtn.classList.remove(\"navy-back\");\n    }\n  };\n\n  useEffect(() => {\n    if (!studentAuthID) {\n      history.push(\"/studentdash\");\n      return;\n    }\n\n    handleCurrPage();\n  }, []);\n\n  return (\n    <div>\n      <div>\n        <button\n          className=\"btn-back maroon-back\"\n          onClick={() => history.push(\"/student-profile/about\")}\n        >\n          Back\n        </button>\n      </div>\n\n      <div>\n        <div className=\"white-background\">\n          <h2 className=\"about-edit-head\">About</h2>\n          <textarea\n            className=\"taAboutDescText\"\n            id=\"taAboutDescText\"\n            defaultValue={about.About}\n          ></textarea>\n        </div>\n\n        <div className=\"white-background\">\n          <h2 className=\"about-edit-head\">Experience</h2>\n          {exp.map((ex, i) => {\n            const start = `${ex.Start.toDate().getFullYear()}-${\n              ex.Start.toDate().getMonth() + 1 < 10 ? \"0\" : \"\"\n            }${ex.Start.toDate().getMonth() + 1}-${\n              ex.Start.toDate().getDate() < 10 ? \"0\" : \"\"\n            }${ex.Start.toDate().getDate()}`;\n\n            const end = `${ex.End.toDate().getFullYear()}-${\n              ex.End.toDate().getMonth() + 1 < 10 ? \"0\" : \"\"\n            }${ex.End.toDate().getMonth() + 1}-${\n              ex.End.toDate().getDate() < 10 ? \"0\" : \"\"\n            }${ex.End.toDate().getDate()}`;\n\n            return (\n              <div className=\"exp-block\" key={i}>\n                <h4 className=\"about-exp-head\">Institution</h4>\n                <input\n                  className=\"tbExpInstText\"\n                  id={`tbExpInstText${i}`}\n                  type=\"text\"\n                  defaultValue={ex.Institution}\n                />\n                <h4 className=\"about-exp-head\">Description</h4>\n                <textarea\n                  className=\"taExpDescText\"\n                  id={`taExpDescText${i}`}\n                  defaultValue={ex.Desc}\n                ></textarea>\n                <h4 className=\"about-exp-head\">Started</h4>\n                <input\n                  className=\"dt\"\n                  id={`dtStarted${i}`}\n                  type=\"date\"\n                  defaultValue={start}\n                />\n                <h4 className=\"about-exp-head\">Ended</h4>\n                <input\n                  className=\"dt\"\n                  id={`dtEnded${i}`}\n                  type=\"date\"\n                  defaultValue={end}\n                />\n                <button\n                  className=\"btnRemoveExp\"\n                  id={ex.id}\n                  onClick={removeExperience}\n                >\n                  <FontAwesomeIcon icon={faMinus} />\n                </button>\n              </div>\n            );\n          })}\n\n          {toggleExpState ? (\n            <div className=\"exp-form-block\">\n              <button\n                className=\"btnCancelExpForm\"\n                onClick={() => {\n                  dispatch(toggleNewExperienceFormAction());\n                }}\n              >\n                Cancel\n              </button>\n              {/* Form */}\n              <div>\n                <h3 className=\"exp-form-head\">Institution</h3>\n                <input\n                  className=\"tbExpInstText\"\n                  id=\"tbInstText\"\n                  type=\"text\"\n                  placeholder=\"Institution\"\n                />\n              </div>\n              <div>\n                <h3 className=\"exp-form-head\">Description</h3>\n                <textarea\n                  className=\"taExpDescText\"\n                  id=\"tbDescText\"\n                  placeholder=\"Description\"\n                ></textarea>\n              </div>\n              <div>\n                <h3 className=\"exp-form-head\">Started: </h3>\n                <input className=\"dt\" id=\"daStartDate\" type=\"date\" />\n              </div>\n              <div>\n                <h3 className=\"exp-form-head\">Ended: </h3>\n                <input className=\"dt\" id=\"daEndDate\" type=\"date\" />\n              </div>\n              <div>\n                <button className=\"btnExpApply\" onClick={applyNewExperience}>\n                  Apply\n                </button>\n              </div>\n            </div>\n          ) : (\n            <button\n              className=\"btnAddExp\"\n              onClick={() => dispatch(toggleNewExperienceFormAction())}\n            >\n              <FontAwesomeIcon icon={faPlus} />\n            </button>\n          )}\n        </div>\n\n        <div className=\"white-background\">\n          <h2 className=\"about-edit-head\">Personal</h2>\n          <p className=\"about-personal-head\">Email:</p>\n          <input\n            className=\"tbEmailText\"\n            id=\"tbEmailText\"\n            type=\"text\"\n            defaultValue={about.Email}\n          />\n          <p className=\"about-personal-head\">Location:</p>\n          <input\n            className=\"tbLocationText\"\n            id=\"tbLocationText\"\n            type=\"text\"\n            defaultValue={about.Location}\n          />\n          <p className=\"about-personal-head\">Instruments: </p>\n          {about.Instruments\n            ? about.Instruments.map((ins, i) => {\n                return (\n                  <div key={i}>\n                    <input\n                      className=\"tbInstruments\"\n                      id={`tbInstruments${i}`}\n                      type=\"text\"\n                      defaultValue={ins}\n                    />\n                    <button\n                      className=\"btnRemIns\"\n                      id={ins}\n                      onClick={removeInstrument}\n                    >\n                      <FontAwesomeIcon icon={faMinus} />\n                    </button>\n                  </div>\n                );\n              })\n            : null}\n          {about.Joined ? (\n            <div>\n              {/* Toggle Instrument Add */}\n              {toggleInsState ? (\n                <div>\n                  <div>\n                    <button\n                      onClick={() => {\n                        dispatch(toggleNewInstrumentFormAction());\n                      }}\n                    >\n                      Cancel\n                    </button>\n                  </div>\n                  <h3>Instrument</h3>\n                  <input\n                    id=\"tbNewInsText\"\n                    type=\"text\"\n                    placeholder=\"Instrument\"\n                  />\n                  <div>\n                    <button onClick={addInstrument}>Apply</button>\n                  </div>\n                </div>\n              ) : (\n                <button\n                  className=\"btnAddIns\"\n                  onClick={() => {\n                    dispatch(toggleNewInstrumentFormAction());\n                  }}\n                >\n                  <FontAwesomeIcon icon={faPlus} />\n                </button>\n              )}\n\n              <p className=\"about-personal-head\">\n                Joined: {about.Joined.toDate().toString().substr(4, 11)}\n              </p>\n            </div>\n          ) : null}\n        </div>\n        <button className=\"btnSaveChanges\" onClick={saveAllChanges}>\n          Save All Changes\n        </button>\n      </div>\n    </div>\n  );\n}\n","/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Students/Profile/StudentProfileAwardsView.js",["780","781","782"],"import React, { useEffect } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { useHistory } from \"react-router-dom\";\nimport {\n  students_Collection,\n  teachers_Collection,\n} from \"../../../utils/firebase\";\nimport {\n  storeAwardListAction,\n  storeCertListAction,\n  storeStudentAwardsAction,\n  storeStudentCertsAction,\n} from \"../../../redux/actions\";\nimport { firebaseLooper } from \"../../../utils/tools\";\n\nexport default function StudentProfileAwardsView() {\n    const studentAuthID = useSelector((state) => state.storeStudentAuthIDReducer);\n    const user = useSelector(state => state.storeStudentUserDataReducer);\n    const history = useHistory();\n    const dispatch = useDispatch();\n    const meData = useSelector((state) => state.storeStudentMeDataReducer);\n\n    const awards = useSelector((state) => state.storeStudentAwardsReducer);\n    const certs = useSelector((state) => state.storeStudentCertsReducer);\n  \n    // GET\n    const getAllAwards = () => {\n      let awards_Collection;\n      if (user.AccountType === \"Student\") {\n        awards_Collection = students_Collection\n          .doc(user.AuthID)\n          .collection(\"Profile\")\n          .doc(\"Awards\")\n          .collection(\"AwardBlocks\");\n      } else if (user.AccountType === \"Teacher\") {\n        awards_Collection = teachers_Collection\n          .doc(user.AuthID)\n          .collection(\"Profile\")\n          .doc(\"Awards\")\n          .collection(\"AwardList\");\n      }\n  \n      let cert_Collection;\n      if (user.AccountType === \"Student\") {\n        cert_Collection = students_Collection\n          .doc(user.AuthID)\n          .collection(\"Profile\")\n          .doc(\"Awards\")\n          .collection(\"CertBlocks\");\n      } else if (user.AccountType === \"Teacher\") {\n        cert_Collection = teachers_Collection\n          .doc(user.AuthID)\n          .collection(\"Profile\")\n          .doc(\"Awards\")\n          .collection(\"CertificationList\");\n      }\n  \n      awards_Collection\n        .get()\n        .then((snapshot) => {\n          const awardData = firebaseLooper(snapshot);\n\n          dispatch(storeStudentAwardsAction(awardData));\n        })\n        .catch((err) => console.log(err));\n  \n      cert_Collection\n        .get()\n        .then((snapshot) => {\n          const certData = firebaseLooper(snapshot);\n          dispatch(storeStudentCertsAction(certData));\n        })\n        .catch((err) => console.log(err));\n    };\n  \n    // HANDLE\n    const handleCurrPage = () => {\n      let feedBtn = document.querySelector(\"#link-feed\");\n      feedBtn.classList.remove(\"navy-back\");\n  \n      let aboutBtn = document.querySelector(\"#link-about\");\n      aboutBtn.classList.remove(\"navy-back\");\n  \n      let awardsBtn = document.querySelector(\"#link-awards\");\n      awardsBtn.classList.add(\"navy-back\");\n  \n      let galleryBtn = document.querySelector(\"#link-gallery\");\n      galleryBtn.classList.remove(\"navy-back\");\n  \n      if (user.AccountType === \"Teacher\") {\n        let reviewsBtn = document.querySelector(\"#link-reviews\");\n        reviewsBtn.classList.remove(\"navy-back\");\n      }\n    };\n  \n    useEffect(() => {\n      if (!studentAuthID) {\n        history.push(\"/studentdash\");\n        return;\n      }\n\n      getAllAwards();\n    handleCurrPage();\n    }, [awards]);\n\n\n    return (\n         <div>\n      <div>\n        {user.AuthID === meData.AuthID ? (\n          <button\n            className=\"btn-newPost\"\n            onClick={() => {\n              history.push(\"/student-profile/awards-edit\");\n            }}\n          >\n            Edit\n          </button>\n        ) : null}\n      </div>\n      <div className=\"white-background\">\n        <h2 className=\"award-head\">Awards</h2>\n        {awards.map((award, i) => {\n          return (\n            <div key={i}>\n              <h3 className=\"award-name\">{award.Name}</h3>\n              <p className=\"award-location\">{award.Location}</p>\n              <p className=\"award-date\">\n                Awarded on {award.Date.toDate().toString().substr(4, 11)}\n              </p>\n              <p className=\"award-desc\">{award.Desc}</p>\n            </div>\n          );\n        })}\n      </div>\n      <div className=\"white-background\">\n        <h2 className=\"award-head\">Certifications</h2>\n        {certs.map((cert, i) => {\n          return (\n            <div key={i}>\n              <h3 className=\"award-name\">{cert.Name}</h3>\n              <p className=\"award-location\">{cert.Location}</p>\n              <p className=\"award-date\">\n                Awarded on {cert.Date.toDate().toString().substr(4, 11)}\n              </p>\n              <p className=\"award-desc\">{cert.Desc}</p>\n            </div>\n          );\n        })}\n      </div>\n    </div>\n    )\n}\n","/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Students/Profile/StudentProfileAwardsEdit.js",["783","784"],"import React, { useEffect } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { useHistory } from \"react-router-dom\";\nimport {\n  storeStudentAwardsAction,\n  storeStudentCertsAction,\n  toggleNewAwardFormAction,\n  toggleNewCertFormAction,\n} from \"../../../redux/actions\";\nimport { students_Collection } from \"../../../utils/firebase\";\n\nimport InputDateFormatter from \"../../InputDateFormatter\";\nimport RandomString from \"../../RandomString\";\nimport FirebaseDate from \"../../FirebaseDate\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faMinus, faPlus } from \"@fortawesome/free-solid-svg-icons\";\n\nexport default function StudentProfileAwardsEdit() {\n  const studentAuthID = useSelector((state) => state.storeStudentAuthIDReducer);\n  const user = useSelector((state) => state.storeStudentUserDataReducer);\n  const history = useHistory();\n  const dispatch = useDispatch();\n\n  const awards = useSelector((state) => state.storeStudentAwardsReducer);\n  const certs = useSelector((state) => state.storeStudentCertsReducer);\n\n  const toggleAwardForm = useSelector(\n    (state) => state.toggleNewAwardFormReducer\n  );\n  const toggleCertForm = useSelector((state) => state.toggleNewCertFormReducer);\n  const meData = useSelector((state) => state.storeTeacherMeDataReducer);\n\n  const applyNewAward = () => {\n    const awardName = document.querySelector(\"#tbAwardNameText\").value;\n    const awardLocation = document.querySelector(\"#tbAwardLocationText\").value;\n    const awardDate = document.querySelector(\"#daAwardDateNew\").value;\n    const awardDesc = document.querySelector(\"#taAwardDescText\").value;\n\n    const rand1 = RandomString();\n    const rand2 = RandomString();\n    const awardID = `Award${rand1}${rand2}`;\n\n    // Save to DB\n    students_Collection\n      .doc(studentAuthID)\n      .collection(\"Profile\")\n      .doc(\"Awards\")\n      .collection(\"AwardList\")\n      .doc(awardID)\n      .set({\n        Name: awardName,\n        Location: awardLocation,\n        Date: FirebaseDate(awardDate),\n        Desc: awardDesc,\n      })\n      .catch((err) => console.log(err));\n\n    // Dispatch\n    const allAwards = [...awards];\n    allAwards.push({\n      id: awardID,\n      Name: awardName,\n      Location: awardLocation,\n      Date: FirebaseDate(awardDate),\n      Desc: awardDesc,\n    });\n\n    dispatch(storeStudentAwardsAction(allAwards));\n    dispatch(toggleNewAwardFormAction());\n  };\n\n  const applyNewCert = () => {\n    const certName = document.querySelector(\"#tbCertNameText\").value;\n    const certLocation = document.querySelector(\"#tbCertLocationText\").value;\n    const certDate = document.querySelector(\"#daCertDateNew\").value;\n    const certDesc = document.querySelector(\"#taCertDescText\").value;\n\n    const rand1 = RandomString();\n    const rand2 = RandomString();\n    const certID = `Cert${rand1}${rand2}`;\n\n    // Save to DB\n    students_Collection\n      .doc(studentAuthID)\n      .collection(\"Profile\")\n      .doc(\"Awards\")\n      .collection(\"CertificationList\")\n      .doc(certID)\n      .set({\n        Name: certName,\n        Location: certLocation,\n        Date: FirebaseDate(certDate),\n        Desc: certDesc,\n      })\n      .catch((err) => console.log(err));\n\n    // Dispatch\n    const allCerts = [...certs];\n    allCerts.push({\n      id: certID,\n      Name: certName,\n      Location: certLocation,\n      Date: FirebaseDate(certDate),\n      Desc: certDesc,\n    });\n\n    dispatch(storeStudentCertsAction(allCerts));\n    dispatch(toggleNewCertFormAction());\n  };\n\n  // REMOVE\n  const removeAward = (event) => {\n    const awardID = event.target.getAttribute(\"id\");\n\n    students_Collection\n      .doc(studentAuthID)\n      .collection(\"Profile\")\n      .doc(\"Awards\")\n      .collection(\"AwardList\")\n      .doc(awardID)\n      .delete()\n      .catch((err) => console.log(err));\n\n    const allAwards = [...awards];\n    const filteredAwards = allAwards.filter((a) => a.id !== awardID);\n\n    dispatch(storeStudentAwardsAction(filteredAwards));\n  };\n  const removeCert = (event) => {\n    const certID = event.target.getAttribute(\"id\");\n\n    students_Collection\n      .doc(studentAuthID)\n      .collection(\"Profile\")\n      .doc(\"Awards\")\n      .collection(\"CertificationList\")\n      .doc(certID)\n      .delete()\n      .catch((err) => console.log(err));\n\n    const allCerts = [...certs];\n    const filteredCerts = allCerts.filter((c) => c.id !== certID);\n\n    dispatch(storeStudentCertsAction(filteredCerts));\n  };\n\n  const saveAllChanges = () => {\n    const allAwards = [];\n    const allCerts = [];\n\n    const awardCount = awards.length;\n    const certCount = certs.length;\n\n    // Save to DB\n    for (let i = 0; i < awardCount; i = i + 1) {\n      const tempObj = {\n        Name: document.querySelector(`#tbAwardName${i}`).value,\n        Location: document.querySelector(`#tbAwardLocation${i}`).value,\n        Date: FirebaseDate(document.querySelector(`#daAwardDate${i}`).value),\n        Desc: document.querySelector(`#taAwardDesc${i}`).value,\n      };\n\n      allAwards.push(tempObj);\n    }\n\n    for (let i = 0; i < certCount; i = i + 1) {\n      const tempObj = {\n        Name: document.querySelector(`#tbCertName${i}`).value,\n        Location: document.querySelector(`#tbCertLocation${i}`).value,\n        Date: FirebaseDate(document.querySelector(`#daCertDate${i}`).value),\n        Desc: document.querySelector(`#taCertDesc${i}`).value,\n      };\n\n      allCerts.push(tempObj);\n    }\n\n    allAwards.forEach((a, i) => {\n      students_Collection\n        .doc(studentAuthID)\n        .collection(\"Profile\")\n        .doc(\"Awards\")\n        .collection(\"AwardBlocks\")\n        .doc(awards[i].id)\n        .update({\n          Name: a.Name,\n          Location: a.Location,\n          Date: a.Date,\n          Desc: a.Desc,\n        })\n        .catch((err) => console.log(err));\n    });\n\n    allCerts.forEach((c, i) => {\n      students_Collection\n        .doc(studentAuthID)\n        .collection(\"Profile\")\n        .doc(\"Awards\")\n        .collection(\"CertBlocks\")\n        .doc(certs[i].id)\n        .update({\n          Name: c.Name,\n          Location: c.Location,\n          Date: c.Date,\n          Desc: c.Desc,\n        })\n        .catch((err) => console.log(err));\n    });\n\n    // Dispatch\n    dispatch(storeStudentAwardsAction(allAwards));\n    dispatch(storeStudentCertsAction(allCerts));\n\n    history.push(\"/student-profile/awards\");\n  };\n\n  // HANDLE\n  const handleCurrPage = () => {\n    let feedBtn = document.querySelector(\"#link-feed\");\n    feedBtn.classList.remove(\"navy-back\");\n\n    let aboutBtn = document.querySelector(\"#link-about\");\n    aboutBtn.classList.remove(\"navy-back\");\n\n    let awardsBtn = document.querySelector(\"#link-awards\");\n    awardsBtn.classList.add(\"navy-back\");\n\n    let galleryBtn = document.querySelector(\"#link-gallery\");\n    galleryBtn.classList.remove(\"navy-back\");\n\n    if (user.AccountType === \"Teacher\") {\n      let reviewsBtn = document.querySelector(\"#link-reviews\");\n      reviewsBtn.classList.remove(\"navy-back\");\n    }\n  };\n\n  useEffect(() => {\n    if (!studentAuthID) {\n      history.push(\"/studentdash\");\n      return;\n    }\n\n    handleCurrPage();\n  }, []);\n  return (\n    <div>\n      <div>\n        <button\n          className=\"btn-back\"\n          onClick={() => {\n            history.push(\"/student-profile/awards\");\n          }}\n        >\n          Back\n        </button>\n      </div>\n      <div className=\"white-background\">\n        <h2 className=\"award-head\">Awards</h2>\n        {awards.map((award, i) => {\n          return (\n            <div className=\"award-block\" key={i}>\n              <div>\n                <p className=\"award-edit-head\">Award Name:</p>\n                <input\n                  className=\"tb-award\"\n                  id={`tbAwardName${i}`}\n                  type=\"text\"\n                  defaultValue={award.Name}\n                />\n              </div>\n              <div>\n                <p className=\"award-edit-head\">Location: </p>\n                <input\n                  className=\"tb-award\"\n                  id={`tbAwardLocation${i}`}\n                  type=\"text\"\n                  defaultValue={award.Location}\n                />\n              </div>\n              <div>\n                <p className=\"award-edit-head\">Date Awarded:</p>\n                <input\n                  className=\"dt\"\n                  id={`daAwardDate${i}`}\n                  type=\"date\"\n                  defaultValue={InputDateFormatter(award.Date)}\n                />\n              </div>\n              <div>\n                <p className=\"award-edit-head\">Description:</p>\n                <textarea\n                  className=\"taExpDescText\"\n                  id={`taAwardDesc${i}`}\n                  defaultValue={award.Desc}\n                ></textarea>\n              </div>\n              <button\n                className=\"btnRemoveExp\"\n                id={award.id}\n                onClick={removeAward}\n              >\n                <FontAwesomeIcon icon={faMinus} />\n              </button>\n            </div>\n          );\n        })}\n\n        {/* New Award Form */}\n        {toggleAwardForm ? (\n          <div>\n            <button\n              className=\"btnCancelExpForm\"\n              onClick={() => {\n                dispatch(toggleNewAwardFormAction());\n              }}\n            >\n              Cancel\n            </button>\n            {/* Award Name */}\n            <div>\n              <p className=\"award-edit-head\">Award Name:</p>\n              <input\n                className=\"tb-award\"\n                id={`tbAwardNameText`}\n                type=\"text\"\n                placeholder=\"Award Name\"\n              />\n            </div>\n            {/* Award Location */}\n            <div>\n              <p className=\"award-edit-head\">Location:</p>\n              <input\n                className=\"tb-award\"\n                id={`tbAwardLocationText`}\n                type=\"text\"\n                placeholder=\"Location\"\n              />\n            </div>\n            {/* Award Date */}\n            <div>\n              <p className=\"award-edit-head\">Date Awarded:</p>\n              <input className=\"dt\" id={`daAwardDateNew`} type=\"date\" />\n            </div>\n            {/* Award Desc */}\n            <div>\n              <p className=\"award-edit-head\">Description:</p>\n              <textarea\n                className=\"taExpDescText\"\n                id={`taAwardDescText`}\n                placeholder=\"Description\"\n              />\n            </div>\n            <button className=\"btnExpApply\" onClick={applyNewAward}>\n              Apply\n            </button>\n          </div>\n        ) : (\n          <button\n            className=\"btnAddExp\"\n            onClick={() => {\n              dispatch(toggleNewAwardFormAction());\n            }}\n          >\n            <FontAwesomeIcon icon={faPlus} />\n          </button>\n        )}\n      </div>\n      <div className=\"white-background\">\n        <h2 className=\"award-head\">Certifications</h2>\n        {certs.map((cert, i) => {\n          return (\n            <div className=\"award-block\" key={i}>\n              <div>\n                <p className=\"award-edit-head\">Certification Name:</p>\n                <input\n                  className=\"tb-award\"\n                  id={`tbCertName${i}`}\n                  type=\"text\"\n                  defaultValue={cert.Name}\n                />\n              </div>\n              <div>\n                <p className=\"award-edit-head\">Location:</p>\n                <input\n                  className=\"tb-award\"\n                  id={`tbCertLocation${i}`}\n                  type=\"text\"\n                  defaultValue={cert.Location}\n                />\n              </div>\n              <div>\n                <p className=\"award-edit-head\">Date Received:</p>\n                <input\n                  className=\"dt\"\n                  id={`daCertDate${i}`}\n                  type=\"date\"\n                  defaultValue={InputDateFormatter(cert.Date)}\n                />\n              </div>\n              <div>\n                <p className=\"award-edit-head\">Description:</p>\n                <textarea\n                  className=\"taExpDescText\"\n                  id={`taCertDesc${i}`}\n                  defaultValue={cert.Desc}\n                ></textarea>\n              </div>\n              <button\n                className=\"btnRemoveExp\"\n                id={cert.id}\n                onClick={removeCert}\n              >\n                <FontAwesomeIcon icon={faMinus} />\n              </button>\n            </div>\n          );\n        })}\n\n        {/* New Cert Form */}\n        {toggleCertForm ? (\n          <div>\n            {/* Cert Name */}\n            <div>\n              <button\n                className=\"btnCancelExpForm\"\n                onClick={() => {\n                  dispatch(toggleNewCertFormAction());\n                }}\n              >\n                Cancel\n              </button>\n              <p className=\"award-edit-head\">Certification Name:</p>\n              <input\n                className=\"tb-award\"\n                id={`tbCertNameText`}\n                type=\"text\"\n                placeholder=\"Certification Name\"\n              />\n            </div>\n            {/* Cert Location */}\n            <div>\n              <p className=\"award-edit-head\">Location:</p>\n              <input\n                className=\"tb-award\"\n                id={`tbCertLocationText`}\n                type=\"text\"\n                placeholder=\"Location\"\n              />\n            </div>\n            {/* Cert Date */}\n            <div>\n              <p className=\"award-edit-head\">Date Received:</p>\n              <input className=\"dt\" id={`daCertDateNew`} type=\"date\" />\n            </div>\n            {/* Date Desc */}\n            <div>\n              <p className=\"award-edit-head\">Description:</p>\n              <textarea\n                className=\"taExpDescText\"\n                id={`taCertDescText`}\n                placeholder=\"Description\"\n              />\n            </div>\n            <button className=\"btnExpApply\" onClick={applyNewCert}>\n              Apply\n            </button>\n          </div>\n        ) : (\n          <button\n            className=\"btnAddExp\"\n            onClick={() => {\n              dispatch(toggleNewCertFormAction());\n            }}\n          >\n            <FontAwesomeIcon icon={faPlus} />\n          </button>\n        )}\n      </div>\n      <button className=\"btnSaveChanges\" onClick={saveAllChanges}>\n        Save All Changes\n      </button>\n    </div>\n  );\n}\n","/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Students/Profile/StudentProfileReviewsView.js",["785","786","787"],"import { faStar } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport React, { useEffect } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { useHistory } from \"react-router-dom\";\nimport {\n  storeTeacherAllReviewsAction,\n  storeStudentSingleReviewAction,\n} from \"../../../redux/actions\";\n\nimport {\n  students_Collection,\n  teachers_Collection,\n} from \"../../../utils/firebase\";\nimport { firebaseLooper } from \"../../../utils/tools\";\n\nexport default function StudentProfileReviewsView() {\n  const studentAuthID = useSelector((state) => state.storeStudentAuthIDReducer);\n  const user = useSelector((state) => state.storeStudentUserDataReducer);\n  const history = useHistory();\n  const dispatch = useDispatch();\n\n  const meData = useSelector((state) => state.storeStudentMeDataReducer);\n  const reviews = useSelector((state) => state.storeTeacherAllReviewsReducer);\n\n  // GET\n  const getAllReviews = () => {\n    let reviews_Collection;\n\n    if (user.AccountType === \"Student\") {\n      reviews_Collection = students_Collection\n        .doc(user.AuthID)\n        .collection(\"Profile\")\n        .doc(\"Reviews\")\n        .collection(\"ReviewBlocks\");\n    } else if (user.AccountType === \"Teacher\") {\n      reviews_Collection = teachers_Collection\n        .doc(user.AuthID)\n        .collection(\"Profile\")\n        .doc(\"Reviews\")\n        .collection(\"ReviewBlocks\");\n    }\n\n    reviews_Collection\n      .orderBy(\"Date\", \"desc\")\n      .get()\n      .then((snapshot) => {\n        const reviewsData = firebaseLooper(snapshot);\n        dispatch(storeTeacherAllReviewsAction(reviewsData));\n      })\n      .catch((err) => console.log(err));\n  };\n\n  // HANDLE\n  const handleAllReviews = () => {\n    return reviews.map((rev, i) => {\n      return (\n        <div className=\"rev-block\" key={i}>\n          <button onClick={navReviewEdit} id={rev.id} className=\"rev-edit\">\n            Edit\n          </button>\n          <p className=\"rev-rating\">{rev.Rating}.0</p>\n          <p className=\"rev-reviewer\">{rev.Reviewer}</p>\n          <p className=\"rev-date\">\n            {rev.Date ? rev.Date.toDate().toString().substr(4, 11) : null}\n          </p>\n          <p className=\"rev-review\">{rev.Review}</p>\n        </div>\n      );\n    });\n  };\n  const handleCurrPage = () => {\n    let feedBtn = document.querySelector(\"#link-feed\");\n    feedBtn.classList.remove(\"navy-back\");\n\n    let aboutBtn = document.querySelector(\"#link-about\");\n    aboutBtn.classList.remove(\"navy-back\");\n\n    let awardsBtn = document.querySelector(\"#link-awards\");\n    awardsBtn.classList.remove(\"navy-back\");\n\n    let galleryBtn = document.querySelector(\"#link-gallery\");\n    galleryBtn.classList.remove(\"navy-back\");\n\n    if (user.AccountType === \"Teacher\") {\n      let reviewsBtn = document.querySelector(\"#link-reviews\");\n      reviewsBtn.classList.add(\"navy-back\");\n    }\n  };\n\n  // NAV\n  const navReviewEdit = (event) => {\n    const revID = event.target.getAttribute(\"id\");\n\n    reviews.forEach((rev) => {\n      if (rev.id === revID) {\n        dispatch(storeStudentSingleReviewAction(rev));\n      }\n    });\n\n    history.push(\"/student-profile/reviews-edit\");\n  };\n\n  useEffect(() => {\n    if (!studentAuthID) {\n      history.push(\"/studentdash\");\n      return;\n    }\n\n    getAllReviews();\n    handleCurrPage();\n  }, [reviews]);\n  return (\n    <div>\n      {meData.AccountType === \"Student\" ? (\n        <button\n          className=\"btn-newPost\"\n          onClick={() => history.push(\"/student-profile/reviews-create\")}\n        >\n          Create Review\n        </button>\n      ) : null}\n      <div className=\"white-background\">{handleAllReviews()}</div>\n    </div>\n  );\n}\n","/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Students/Profile/StudentProfileReviewsEdit.js",["788"],"import React, { useEffect } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { useHistory } from \"react-router-dom\";\nimport { storeTeacherAllReviewsAction } from \"../../../redux/actions\";\nimport { teachers_Collection } from \"../../../utils/firebase\";\nimport GetToday from \"../../GetToday\";\n\nexport default function StudentProfileReviewsEdit() {\n  const studentAuthID = useSelector((state) => state.storeStudentAuthIDReducer);\n  const user = useSelector((state) => state.storeStudentUserDataReducer);\n  const history = useHistory();\n  const dispatch = useDispatch();\n\n  const review = useSelector((state) => state.storeStudentSingleReviewReducer);\n  const reviews = useSelector((state) => state.storeTeacherAllReviewsReducer);\n  const meData = useSelector((state) => state.storeStudentMeDataReducer);\n\n  //   CHANGE\n  const onRatingChange = () => {\n    const input = document.querySelector(\"#tbRating\").value;\n\n    if (input.length > 1) {\n      document.querySelector(\"#tbRating\").value = input.substr(0, 1);\n    }\n\n    if (parseInt(input) > 5) {\n      document.querySelector(\"#tbRating\").value = 5;\n    } else if (input === \".\") {\n      document.querySelector(\"#tbRating\").value = 0;\n    }\n  };\n\n  // HANDLE\n  const handleCurrPage = () => {\n    let feedBtn = document.querySelector(\"#link-feed\");\n    feedBtn.classList.remove(\"navy-back\");\n\n    let aboutBtn = document.querySelector(\"#link-about\");\n    aboutBtn.classList.remove(\"navy-back\");\n\n    let awardsBtn = document.querySelector(\"#link-awards\");\n    awardsBtn.classList.remove(\"navy-back\");\n\n    let galleryBtn = document.querySelector(\"#link-gallery\");\n    galleryBtn.classList.remove(\"navy-back\");\n\n    if (user.AccountType === \"Teacher\") {\n      let reviewsBtn = document.querySelector(\"#link-reviews\");\n      reviewsBtn.classList.add(\"navy-back\");\n    }\n  };\n\n  //   POST\n  const saveRating = () => {\n    const rating = parseInt(document.querySelector(\"#tbRating\").value);\n    const reviewText = document.querySelector(\"#taReview\").value;\n\n    teachers_Collection\n      .doc(user.AuthID)\n      .collection(\"Profile\")\n      .doc(\"Reviews\")\n      .collection(\"ReviewBlocks\")\n      .doc(review.id)\n      .update({\n        Rating: rating,\n        Review: reviewText,\n        Date: GetToday(),\n      })\n      .catch((err) => console.log(err));\n\n    const allReviews = [...reviews];\n    allReviews.forEach((rev) => {\n      if (rev.id === review.id) {\n        rev = {\n          id: rev.id,\n          Rating: rating,\n          Review: reviewText,\n          Date: GetToday(),\n          Reviewer: `${meData.FirstName} ${meData.LastName}`,\n        };\n        dispatch(storeTeacherAllReviewsAction(allReviews));\n      }\n    });\n\n    history.push(\"/student-profile/reviews\");\n  };\n\n  useEffect(() => {\n    if (!studentAuthID) {\n      history.push(\"/studentdash\");\n      return;\n    }\n\n    handleCurrPage();\n  }, []);\n\n  return (\n    <div>\n      <div className=\"white-background\">\n        <p className=\"rating-head\">Rating:</p>\n        <p style={{ fontSize: \"14px\", color: \"orange\", margin: \"0\" }}>\n          Rating cannot be over 5 or below 0.\n        </p>\n        <input\n          onChange={onRatingChange}\n          className=\"rating-rating\"\n          id=\"tbRating\"\n          type=\"text\"\n          defaultValue={review.Rating}\n        />\n\n        <p className=\"rating-head\">Review:</p>\n        <textarea\n          className=\"ta\"\n          id=\"taReview\"\n          defaultValue={review.Review}\n        ></textarea>\n      </div>\n\n      <button onClick={saveRating} className=\"btnSaveChanges\">\n        Save Changes\n      </button>\n    </div>\n  );\n}\n","/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Students/Profile/StudentProfileReviewsCreate.js",["789"],"import React, { useEffect } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { useHistory } from \"react-router-dom\";\nimport { storeTeacherAllReviewsAction } from \"../../../redux/actions\";\nimport { teachers_Collection } from \"../../../utils/firebase\";\nimport GetToday from \"../../GetToday\";\nimport RandomString from \"../../RandomString\";\n\nexport default function StudentProfileReviewsCreate() {\n  const studentAuthID = useSelector((state) => state.storeStudentAuthIDReducer);\n  const user = useSelector((state) => state.storeStudentUserDataReducer);\n  const history = useHistory();\n  const dispatch = useDispatch();\n\n  const meData = useSelector((state) => state.storeStudentMeDataReducer);\n  const reviews = useSelector((state) => state.storeTeacherAllReviewsReducer);\n\n  //   CHANGE\n  const onRatingChange = () => {\n    const input = document.querySelector(\"#tbRating\").value;\n\n    if (input.length > 1) {\n      document.querySelector(\"#tbRating\").value = input.substr(0, 1);\n    }\n\n    if (parseInt(input) > 5) {\n      document.querySelector(\"#tbRating\").value = 5;\n    } else if (input === \".\") {\n      document.querySelector(\"#tbRating\").value = 0;\n    }\n  };\n\n  // HANDLE\n  const handleCurrPage = () => {\n    let feedBtn = document.querySelector(\"#link-feed\");\n    feedBtn.classList.remove(\"navy-back\");\n\n    let aboutBtn = document.querySelector(\"#link-about\");\n    aboutBtn.classList.remove(\"navy-back\");\n\n    let awardsBtn = document.querySelector(\"#link-awards\");\n    awardsBtn.classList.remove(\"navy-back\");\n\n    let galleryBtn = document.querySelector(\"#link-gallery\");\n    galleryBtn.classList.remove(\"navy-back\");\n\n    if (user.AccountType === \"Teacher\") {\n      let reviewsBtn = document.querySelector(\"#link-reviews\");\n      reviewsBtn.classList.add(\"navy-back\");\n    }\n  };\n\n  //   POST\n  const saveChanges = () => {\n    const rating = parseInt(document.querySelector(\"#tbRating\").value);\n    const review = document.querySelector(\"#taReview\").value;\n\n    // Save to DB\n    const rand1 = RandomString();\n    const rand2 = RandomString();\n    const revID = `Rev${rand1}${rand2}`;\n\n    teachers_Collection\n      .doc(user.AuthID)\n      .collection(\"Profile\")\n      .doc(\"Reviews\")\n      .collection(\"ReviewBlocks\")\n      .doc(revID)\n      .set({\n        Review: review,\n        Rating: rating,\n        Reviewer: `${meData.FirstName} ${meData.LastName}`,\n        Date: GetToday(),\n      })\n      .catch((err) => console.log(err));\n\n    //   Dispatch\n    const allReviews = [...reviews];\n    allReviews.push({\n      id: revID,\n      Review: review,\n      Rating: rating,\n      Reviewer: `${meData.FirstName} ${meData.LastName}`,\n      Date: GetToday(),\n    });\n\n    dispatch(storeTeacherAllReviewsAction(allReviews));\n    history.push(\"/student-profile/reviews\");\n  };\n\n  useEffect(() => {\n    if (!studentAuthID) {\n      history.push(\"/studentdash\");\n      return;\n    }\n\n    handleCurrPage();\n  }, []);\n\n  return (\n    <div>\n      <div className=\"white-background\">\n        <p className=\"rating-head\">Rating:</p>\n        <p style={{ fontSize: \"14px\", color: \"orange\", margin: \"0\" }}>\n          Rating cannot be over 5 or below 0.\n        </p>\n        <input\n          onChange={onRatingChange}\n          className=\"rating-rating\"\n          id=\"tbRating\"\n          type=\"text\"\n          placeholder=\"*\"\n        />\n\n        <p className=\"rating-head\">Review:</p>\n        <textarea\n          className=\"ta\"\n          id=\"taReview\"\n          placeholder=\"Type review here...\"\n        ></textarea>\n      </div>\n\n      <button onClick={saveChanges} className=\"btnSaveChanges\">\n        Save Changes\n      </button>\n    </div>\n  );\n}\n","/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Teachers/Milestones/MilestonesView.js",["790"],"/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Teachers/Milestones/MilestonesEdit.js",["791","792","793"],"import {\n  faMinus,\n  faPlus,\n  faTimesCircle,\n} from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport React, { useEffect } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { useHistory } from \"react-router-dom\";\nimport {\n  storeTeacherMilestonesGeneralInfoAction,\n  storeTeacherMilestoneTasksAction,\n  storeTeacherSingleMilestoneSetAction,\n} from \"../../../redux/actions\";\nimport { teachers_Collection } from \"../../../utils/firebase\";\nimport RandomString from \"../../RandomString\";\nimport DashFooter from \"../Dash/DashFooter\";\nimport TopBar from \"../Dash/TopBar\";\n\nexport default function MilestonesEdit() {\n  const teacherAuthID = useSelector((state) => state.storeTeacherAuthIDReducer);\n  const history = useHistory();\n  const dispatch = useDispatch();\n\n  const milestone = useSelector(\n    (state) => state.storeTeacherSingleMilestoneSetReducer\n  );\n  const tasks = useSelector((state) => state.storeTeacherMilestoneTasksReducer);\n\n  //   HANDLE\n  const handleTasks = () => {\n    return tasks.map((task, i) => {\n      return (\n        <div className=\"task-edit-block\" key={i}>\n          <p className=\"task-edit-head\">Task:</p>\n          <input\n            className=\"tb\"\n            id={`tbTaskTask${i}`}\n            type=\"text\"\n            defaultValue={task.Task}\n            placeholder=\"Task...\"\n          />\n\n          <p className=\"task-edit-head\">Description:</p>\n          <textarea\n            className=\"ta\"\n            id={`taTaskDesc${i}`}\n            defaultValue={task.Desc}\n            placeholder=\"Description...\"\n          ></textarea>\n          <button id={task.id} onClick={removeTask} className=\"btn-remove-task\">\n            <FontAwesomeIcon icon={faMinus} />\n          </button>\n        </div>\n      );\n    });\n  };\n\n  // REMOVE\n  const removeTask = (event) => {\n    const taskID = event.target.getAttribute(\"id\");\n\n    // Remove from DB\n    tasks.forEach((t) => {\n      if (t.id === taskID) {\n        if (t.SegmentName !== \"newTask\") {\n          teachers_Collection\n            .doc(teacherAuthID)\n            .collection(\"Milestones\")\n            .doc(milestone.id)\n            .collection(\"MilestoneTasks\")\n            .doc(taskID)\n            .delete()\n            .catch((err) => console.log(err));\n        }\n      }\n    });\n\n    //   Dispatch\n    const allTasks = [...tasks];\n    const filtered = allTasks.filter((t) => t.id !== taskID);\n\n    dispatch(storeTeacherMilestoneTasksAction(filtered));\n  };\n\n  //   CLICK\n  const addTask = () => {\n    const rand1 = RandomString();\n    const rand2 = RandomString();\n    const taskID = `Task${rand1}${rand2}`;\n\n    const allTasks = [...tasks];\n    allTasks.push({\n      id: taskID,\n      Task: \"\",\n      Desc: \"\",\n      SegmentName: \"newTask\",\n    });\n\n    dispatch(storeTeacherMilestoneTasksAction(allTasks));\n  };\n\n  //   POST\n  const saveChanges = () => {\n    const milestoneName = document.querySelector(\"#tbMilestoneName\").value;\n\n    // Save Name\n\n    teachers_Collection\n      .doc(teacherAuthID)\n      .collection(\"Milestones\")\n      .doc(milestone.id)\n      .update({ Name: milestoneName })\n      .catch((err) => console.log(err));\n\n    //   Dispatch it\n    const tempObj = { ...milestone };\n    tempObj.Name = milestoneName;\n    dispatch(storeTeacherSingleMilestoneSetAction(tempObj));\n\n    let allTasks = [];\n\n    // Store Tasks\n    tasks.forEach((t, i) => {\n      const rand1 = RandomString();\n      const rand2 = RandomString();\n      const taskID = `Task${rand1}${rand2}`;\n\n      const task = document.querySelector(`#tbTaskTask${i}`).value;\n      const desc = document.querySelector(`#taTaskDesc${i}`).value;\n\n      if (t.SegmentName === \"newTask\") {\n        teachers_Collection\n          .doc(teacherAuthID)\n          .collection(\"Milestones\")\n          .doc(milestone.id)\n          .collection(\"MilestoneTasks\")\n          .doc(taskID)\n          .set({ Task: task, Desc: desc, SegmentName: milestone.id })\n          .catch((err) => console.log(err));\n      } else {\n        teachers_Collection\n          .doc(teacherAuthID)\n          .collection(\"Milestones\")\n          .doc(milestone.id)\n          .collection(\"MilestoneTasks\")\n          .doc(t.id)\n          .update({\n            Task: task,\n            Desc: desc,\n          });\n      }\n\n      allTasks.push({ Task: task, Desc: desc, SegmentName: milestone.id });\n    });\n\n    dispatch(storeTeacherMilestoneTasksAction(allTasks));\n    history.push(\"/teacher-milestone-view\");\n  };\n\n  useEffect(() => {\n    if (!teacherAuthID) {\n      history.push(\"/teacherdash\");\n      return;\n    }\n  }, []);\n  return (\n    <div>\n      {/* Top Bar */}\n      <div>\n        <TopBar />\n      </div>\n\n      <div className=\"content\">\n        <h1>Edit</h1>\n\n        <div className=\"white-background\">\n          <p className=\"task-edit-head\">Milestone Set Name:</p>\n          <input\n            className=\"tb\"\n            id=\"tbMilestoneName\"\n            type=\"text\"\n            defaultValue={milestone.Name}\n          />\n        </div>\n        <div className=\"white-background\">\n          <h3 className=\"task-edit-main-head\">Tasks</h3>\n          {handleTasks()}\n\n          <button onClick={addTask} className=\"btn-add-task\">\n            <FontAwesomeIcon icon={faPlus} />\n          </button>\n        </div>\n\n        <button onClick={saveChanges} className=\"btnSaveChanges\">\n          Save Changes\n        </button>\n      </div>\n\n      {/* Footer */}\n      <div>\n        <DashFooter />\n      </div>\n    </div>\n  );\n}\n","/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Teachers/Milestones/MilestonesCreate.js",["794","795","796"],"import { faPlus } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport React, { useEffect } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { useHistory } from \"react-router-dom\";\nimport {\n  storeTeacherMilestonesGeneralInfoAction,\n  storeTeacherMilestoneTasksAction,\n  storeTeacherSingleMilestoneSetAction,\n} from \"../../../redux/actions\";\nimport { teachers_Collection } from \"../../../utils/firebase\";\nimport RandomString from \"../../RandomString\";\nimport DashFooter from \"../Dash/DashFooter\";\nimport TopBar from \"../Dash/TopBar\";\n\nexport default function MilestonesCreate() {\n  const teacherAuthID = useSelector((state) => state.storeTeacherAuthIDReducer);\n  const history = useHistory();\n  const dispatch = useDispatch();\n\n  const milestones = useSelector(\n    (state) => state.storeTeacherMilestonesGeneralInfoReducer\n  );\n\n  //   POST\n  const saveChanges = () => {\n    const setName = document.querySelector(\"#tbSetName\").value;\n\n    const rand1 = RandomString();\n    const rand2 = RandomString();\n    const setID = `Set${rand1}${rand2}`;\n\n    teachers_Collection\n      .doc(teacherAuthID)\n      .collection(\"Milestones\")\n      .doc(setID)\n      .set({\n        Name: setName,\n        AssignedTo: [],\n      })\n      .catch((err) => console.log(err));\n\n    const allSets = [...milestones];\n    allSets.push({\n      id: setID,\n      Name: setName,\n      AssignedTo: [],\n    });\n\n    dispatch(storeTeacherMilestonesGeneralInfoAction(allSets));\n    dispatch(\n      storeTeacherSingleMilestoneSetAction({\n        id: setID,\n        Name: setName,\n        AssignedTo: [],\n      })\n    );\n    dispatch(storeTeacherMilestoneTasksAction([]));\n    history.push(\"/teacher-milestone-view\");\n  };\n\n  useEffect(() => {\n    if (!teacherAuthID) {\n      history.push(\"/teacherdash\");\n      return;\n    }\n  }, []);\n  return (\n    <div>\n      {/* Top Bar */}\n      <div>\n        <TopBar />\n      </div>\n\n      <div className=\"content\">\n        <h1>Create Milestone Set</h1>\n        <button\n          onClick={() => history.push(\"/teacher-milestones\")}\n          className=\"btn-back\"\n        >\n          Back\n        </button>\n        <div className=\"white-background\">\n          <p className=\"set-name-head\">Milestone Set Name:</p>\n          <input\n            className=\"tb\"\n            id=\"tbSetName\"\n            type=\"text\"\n            placeholder=\"Milestone Set Name...\"\n          />\n        </div>\n        <button onClick={saveChanges} className=\"btnSaveChanges\">\n          Create\n        </button>\n      </div>\n\n      {/* Footer */}\n      <div>\n        <DashFooter />\n      </div>\n    </div>\n  );\n}\n","/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Teachers/Messages/MessagesCreate.js",["797"],"import React, { useEffect } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { useHistory } from \"react-router-dom\";\nimport { teachers_Collection, users_Collection } from \"../../../utils/firebase\";\nimport {\n  storeTeacherMessageConnectionsAction,\n  storeTeacherMessageThreadAction,\n  storeTeacherMessageRecipientAction,\n  storeTeacherMessagesGeneralInfoAction,\n} from \"../../../redux/actions\";\nimport DashFooter from \"../Dash/DashFooter\";\nimport TopBar from \"../Dash/TopBar\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faPaperPlane } from \"@fortawesome/free-solid-svg-icons\";\nimport { firebaseLooper } from \"../../../utils/tools\";\n\nimport \"./Messages.css\";\nimport RandomString from \"../../RandomString\";\nimport GetToday from \"../../GetToday\";\n\nexport default function MessagesCreate() {\n  const teacherAuthID = useSelector((state) => state.storeTeacherAuthIDReducer);\n  const history = useHistory();\n  const dispatch = useDispatch();\n\n  const connections = useSelector(\n    (state) => state.storeTeacherMessageConnectionsReducer\n  );\n  const messages = useSelector(\n    (state) => state.storeTeacherMessagesGeneralInfoReducer\n  );\n\n  //  GET\n  const getAllConnections = () => {\n    teachers_Collection\n      .doc(teacherAuthID)\n      .collection(\"Connections\")\n      .orderBy(\"LastName\", \"asc\")\n      .get()\n      .then((snapshot) => {\n        const connData = firebaseLooper(snapshot);\n        let allCons = [];\n        connData.forEach((c) => {\n          allCons.push(c);\n        });\n\n        teachers_Collection\n          .doc(teacherAuthID)\n          .collection(\"Students\")\n          .get()\n          .then((snapshot) => {\n            const studData = firebaseLooper(snapshot);\n            const studSize = snapshot.size;\n            if (studSize > 0) {\n              studData.forEach((stud, i) => {\n                const tempObj = {\n                  Email: stud.Email,\n                  FirstName: stud.FirstName,\n                  LastName: stud.LastName,\n                  AuthID: stud.id,\n                };\n\n                allCons.push(tempObj);\n                if (i + 1 === studSize) {\n                  dispatch(storeTeacherMessageConnectionsAction(allCons));\n                }\n              });\n            } else {\n            }\n          })\n          .catch((err) => console.log(err));\n      })\n      .catch((err) => console.log(err));\n  };\n\n  //   HANDLE\n  const handleConnectionList = () => {\n    if (connections) {\n      return connections.map((conn, i) => {\n        return (\n          <div className=\"conn-block\" key={i}>\n            <p className=\"conn-name\">\n              {conn.LastName}, {conn.FirstName}\n            </p>\n            <p className=\"conn-auth\">{conn.AuthID}</p>\n            <button onClick={navMessageView} id={conn.id} className=\"conn-send\">\n              <FontAwesomeIcon icon={faPaperPlane} />\n            </button>\n          </div>\n        );\n      });\n    }\n  };\n\n  //   NAV\n  const navMessageView = (event) => {\n    const connID = event.currentTarget.getAttribute(\"id\");\n    connections.forEach((conn) => {\n      if (conn.id === connID) {\n        users_Collection\n          .where(\"AuthID\", \"==\", conn.AuthID)\n          .get()\n          .then((snapshot) => {\n            const userData = firebaseLooper(snapshot);\n            userData.forEach((u) => {\n              dispatch(storeTeacherMessageRecipientAction(u));\n            });\n          })\n          .catch((err) => console.log(err));\n\n        dispatch(storeTeacherMessageConnectionsAction(conn));\n\n        teachers_Collection\n          .doc(teacherAuthID)\n          .collection(\"Messages\")\n          .where(\"RecipientID\", \"==\", conn.AuthID)\n          .get()\n          .then((snapshot) => {\n            const messData = firebaseLooper(snapshot);\n            const messSize = snapshot.size;\n            if (messSize === 0) {\n              const rand1 = RandomString();\n              const rand2 = RandomString();\n              const threadID = `Thread${rand1}${rand2}`;\n\n              teachers_Collection\n                .doc(teacherAuthID)\n                .collection(\"Messages\")\n                .doc(threadID)\n                .set({\n                  RecipientID: conn.AuthID,\n                  SenderID: teacherAuthID,\n                  Date: GetToday(),\n                })\n                .catch((err) => console.log(err));\n\n              const allThreads = [...messages];\n              allThreads.push({\n                id: threadID,\n                RecipientID: conn.AuthID,\n                SenderID: teacherAuthID,\n                Date: GetToday(),\n              });\n              console.log(allThreads);\n              dispatch(storeTeacherMessagesGeneralInfoAction(allThreads));\n            } else {\n              messData.forEach((mess) => {\n                teachers_Collection\n                  .doc(teacherAuthID)\n                  .collection(\"Messages\")\n                  .doc(mess.id)\n                  .collection(\"MessageBlocks\")\n                  .get()\n                  .then((snapshot) => {\n                    const threadData = firebaseLooper(snapshot);\n                    dispatch(storeTeacherMessageThreadAction(threadData));\n                  })\n                  .catch((err) => console.log(err));\n              });\n            }\n          })\n          .catch((err) => console.log(err));\n      }\n    });\n\n    history.push(\"/teacher-message-view\");\n  };\n\n  useEffect(() => {\n    if (!teacherAuthID) {\n      history.push(\"/teacherdash\");\n      return;\n    }\n\n    getAllConnections();\n  }, [connections]);\n\n  return (\n    <div>\n      {/* Top Bar */}\n      <div>\n        <TopBar />\n      </div>\n\n      <div className=\"content\">\n        <h1>New Message</h1>\n        <div className=\"white-background\">{handleConnectionList()}</div>\n      </div>\n\n      {/* Footer */}\n      <div>\n        <DashFooter />\n      </div>\n    </div>\n  );\n}\n","/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Teachers/Messages/MessagesView.js",["798","799"],"import React, { useEffect } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { useHistory } from \"react-router-dom\";\nimport {\n  storeTeacherMeDataAction,\n  storeTeacherMessageRecipientAction,\n  storeTeacherMessageThreadAction,\n} from \"../../../redux/actions\";\nimport {\n  students_Collection,\n  teachers_Collection,\n  users_Collection,\n} from \"../../../utils/firebase\";\nimport DashFooter from \"../Dash/DashFooter\";\nimport TopBar from \"../Dash/TopBar\";\n\nimport { firebaseLooper } from \"../../../utils/tools\";\nimport RandomString from \"../../RandomString\";\nimport GetToday from \"../../GetToday\";\n\nexport default function MessagesView() {\n  const teacherAuthID = useSelector((state) => state.storeTeacherAuthIDReducer);\n  const history = useHistory();\n  const dispatch = useDispatch();\n  const meData = useSelector((state) => state.storeTeacherMeDataReducer);\n\n  const connection = useSelector(\n    (state) => state.storeTeacherMessageConnectionReducer\n  );\n  const thread = useSelector((state) => state.storeTeacherMessageThreadReducer);\n  const rec = useSelector((state) => state.storeTeacherMessageRecipientReducer);\n  const messages = useSelector(\n    (state) => state.storeTeacherMessagesGeneralInfoReducer\n  );\n\n  // GET\n  const getMeData = () => {\n    users_Collection\n      .where(\"AuthID\", \"==\", teacherAuthID)\n      .get()\n      .then((snapshot) => {\n        const myData = firebaseLooper(snapshot);\n        myData.forEach((me) => {\n          dispatch(storeTeacherMeDataAction(me));\n        });\n      })\n      .catch((err) => console.log(err));\n  };\n\n  // HANDLE\n  const handleThread = () => {\n    return thread.map((t, i) => {\n      return (\n        <div\n          className={\n            t.Sender === `${meData.FirstName} ${meData.LastName}`\n              ? \"mess-sender\"\n              : \"mess-recipient\"\n          }\n          key={i}\n        >\n          <p className=\"thread-sender\">{t.Sender}</p>\n          <p className=\"thread-date\">\n            {t.Date ? t.Date.toDate().toString().substr(4, 11) : null}\n          </p>\n          <p className=\"thread-text\">{t.Text}</p>\n        </div>\n      );\n    });\n  };\n\n  // POST\n  const sendMessage = () => {\n    const message = document.querySelector(\"#tbMessage\").value;\n    let messageData;\n    console.log(messageData);\n    messages.forEach((mess) => {\n      if (mess.RecipientID === rec.AuthID) {\n        messageData = mess;\n      }\n    });\n    // Save in my DB\n    const rand1 = RandomString();\n    const rand2 = RandomString();\n    const messageID = `Mess${rand1}${rand2}`;\n\n    teachers_Collection\n      .doc(teacherAuthID)\n      .collection(\"Messages\")\n      .doc(messageData.id)\n      .collection(\"MessageBlocks\")\n      .doc(messageID)\n      .set({\n        Recipient: `${rec.FirstName} ${rec.LastName}`,\n        Sender: `${meData.FirstName} ${meData.LastName}`,\n        Text: message,\n        Date: GetToday(),\n      })\n      .catch((err) => console.log(err));\n\n    // Save in his DB\n    if (rec.AccountType === \"Student\") {\n      students_Collection\n        .doc(rec.AuthID)\n        .collection(\"Messages\")\n        .where(\"RecipientID\", \"==\", teacherAuthID)\n        .get()\n        .then((snapshot) => {\n          const studMessData = firebaseLooper(snapshot);\n          const studMessSize = snapshot.size;\n\n          if (studMessSize === 0) {\n            // No thread\n            const rand3 = RandomString();\n            const rand4 = RandomString();\n            const threadID = `Thread${rand3}${rand4}`;\n\n            students_Collection\n              .doc(rec.AuthID)\n              .collection(\"Messages\")\n              .doc(threadID)\n              .set({\n                RecipientID: teacherAuthID,\n                SenderID: rec.AuthID,\n                Date: GetToday(),\n              })\n              .catch((err) => console.log(err));\n\n            students_Collection\n              .doc(rec.AuthID)\n              .collection(\"Messages\")\n              .doc(threadID)\n              .collection(\"MessageBlocks\")\n              .doc(messageID)\n              .set({\n                Recipient: `${rec.FirstName} ${rec.LastName}`,\n                Sender: `${meData.FirstName} ${meData.LastName}`,\n                Text: message,\n                Date: GetToday(),\n              })\n              .catch((err) => console.log(err));\n          } else {\n            // Yes thread\n            studMessData.forEach((messD) => {\n              students_Collection\n                .doc(rec.AuthID)\n                .collection(\"Messages\")\n                .doc(messD.id)\n                .collection(\"MessageBlocks\")\n                .doc(messageID)\n                .set({\n                  Recipient: `${rec.FirstName} ${rec.LastName}`,\n                  Sender: `${meData.FirstName} ${meData.LastName}`,\n                  Text: message,\n                  Date: GetToday(),\n                })\n                .catch((err) => console.log(err));\n            });\n          }\n        })\n        .catch((err) => console.log(err));\n    }\n\n    // Dispatch\n\n    const allThreads = [...thread];\n    allThreads.push({\n      Recipient: `${rec.FirstName} ${rec.LastName}`,\n      Sender: `${meData.FirstName} ${meData.LastName}`,\n      Text: message,\n      Date: GetToday(),\n    });\n\n    dispatch(storeTeacherMessageThreadAction(allThreads));\n    document.querySelector(\"#tbMessage\").value = \"\";\n  };\n\n  useEffect(() => {\n    if (!teacherAuthID) {\n      history.push(\"/teacherdash\");\n      return;\n    }\n    getMeData();\n    console.log(messages);\n  }, [thread]);\n\n  return (\n    <div>\n      {/* Top Bar */}\n      <div>\n        <TopBar />\n      </div>\n\n      <div className=\"content\">\n        <h1>\n          {rec.FirstName} {rec.LastName}\n        </h1>\n        <button\n          className=\"btn-back\"\n          onClick={() => {\n            dispatch(storeTeacherMessageRecipientAction({}));\n            dispatch(storeTeacherMessageThreadAction([]));\n            history.push(\"/teacher-messages\");\n          }}\n        >\n          Back\n        </button>\n\n        <div className=\"white-background\">{handleThread()}</div>\n        <div className=\"white-background\">\n          <input\n            className=\"tb-mess\"\n            id=\"tbMessage\"\n            type=\"text\"\n            placeholder=\"Type message here...\"\n          />\n          <button onClick={sendMessage} className=\"btn-send\">\n            Send\n          </button>\n        </div>\n      </div>\n\n      {/* Footer */}\n      <div>\n        <DashFooter />\n      </div>\n    </div>\n  );\n}\n","/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Teachers/Events/EventsView.js",["800"],"import React, { useEffect } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { useHistory } from \"react-router-dom\";\nimport { storeTeacherEventColorAction } from \"../../../redux/actions\";\nimport DashFooter from \"../Dash/DashFooter\";\nimport TopBar from \"../Dash/TopBar\";\n\nexport default function EventsView() {\n  const teacherAuthID = useSelector((state) => state.storeTeacherAuthIDReducer);\n  const history = useHistory();\n  const dispatch = useDispatch();\n\n  const event = useSelector((state) => state.storeTeacherEventReducer);\n\n  useEffect(() => {\n    if (!teacherAuthID) {\n      history.push(\"/teacherdash\");\n      return;\n    }\n  }, []);\n\n  return (\n    <div>\n      {/* Top Bar */}\n      <div>\n        <TopBar />\n      </div>\n\n      <div className=\"content\">\n        <h1>{event.Name}</h1>\n        <button\n          className=\"btn-back\"\n          onClick={() => history.push(\"/teacher-events\")}\n        >\n          Back\n        </button>\n        <button\n          onClick={() => {\n            dispatch(storeTeacherEventColorAction(event.Color));\n            history.push(\"/teacher-event-edit\");\n          }}\n          className=\"btn-eve-edit\"\n        >\n          Edit\n        </button>\n\n        <div className=\"white-background\">\n          <p className=\"eve-view-head\">Start:</p>\n          <p className=\"eve-view-date\">\n            {event.Start ? event.Start.toDate().toString().substr(4, 11) : null}\n            <br />\n            {event.Start ? event.Start.toDate().toString().substr(16, 5) : null}\n          </p>\n\n          <p className=\"eve-view-head\">End:</p>\n          <p className=\"eve-view-date\">\n            {event.End ? event.End.toDate().toString().substr(4, 11) : null}\n            <br />\n            {event.End ? event.End.toDate().toString().substr(16, 5) : null}\n          </p>\n\n          <p className=\"eve-view-head\">Color:</p>\n          <div\n            style={{\n              backgroundColor: `${\n                event.Color === \"purple\" ? \"#3E00F9\" : event.Color\n              }`,\n            }}\n            className=\"eve-view-color\"\n          ></div>\n\n          <p className=\"eve-view-head\">Description:</p>\n          <p className=\"eve-view-desc\">{event.Desc}</p>\n        </div>\n      </div>\n\n      {/* Footer */}\n      <div>\n        <DashFooter />\n      </div>\n    </div>\n  );\n}\n","/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Teachers/Events/EventsCreate.js",["801"],"import React, { useEffect } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { useHistory } from \"react-router-dom\";\nimport DashFooter from \"../Dash/DashFooter\";\nimport TopBar from \"../Dash/TopBar\";\n\nimport {\n  storeTeacherEventColorAction,\n  storeTeacherEventsAction,\n} from \"../../../redux/actions\";\nimport FirebaseDate from \"../../FirebaseDate\";\nimport { teachers_Collection } from \"../../../utils/firebase\";\nimport RandomString from \"../../RandomString\";\n\nexport default function EventsCreate() {\n  const teacherAuthID = useSelector((state) => state.storeTeacherAuthIDReducer);\n  const history = useHistory();\n  const dispatch = useDispatch();\n\n  const color = useSelector((state) => state.storeTeacherEventColorReducer);\n  const events = useSelector((state) => state.storeTeacherEventsReducer);\n\n  //   POST\n  const createEvent = () => {\n    const eventName = document.querySelector(\"#tbEveName\").value;\n    const eventStart = FirebaseDate(document.querySelector(\"#daStart\").value);\n    const eventEnd = FirebaseDate(document.querySelector(\"#daEnd\").value);\n    const eventColor = color;\n    const eventDesc = document.querySelector(\"#taDesc\").value;\n\n    const rand1 = RandomString();\n    const rand2 = RandomString();\n    const eveID = `Event${rand1}${rand2}`;\n\n    teachers_Collection\n      .doc(teacherAuthID)\n      .collection(\"Events\")\n      .doc(eveID)\n      .set({\n        Name: eventName,\n        Start: eventStart,\n        End: eventEnd,\n        Color: eventColor,\n        Desc: eventDesc,\n      })\n      .catch((err) => console.log(err));\n\n    //   Dispatch\n    const allEvents = [...events];\n    allEvents.push({\n      id: eveID,\n      Name: eventName,\n      Start: eventStart,\n      End: eventEnd,\n      Color: eventColor,\n      Desc: eventDesc,\n    });\n\n    dispatch(storeTeacherEventsAction(allEvents));\n    history.push(\"/teacher-events\");\n  };\n\n  //   CLICK\n  const onColorClick = (event) => {\n    const colorID = event.currentTarget.getAttribute(\"id\");\n\n    const divGreen = document.querySelector(\"#btnGreen\");\n    const divBlue = document.querySelector(\"#btnBlue\");\n    const divRed = document.querySelector(\"#btnRed\");\n    const divPurple = document.querySelector(\"#btnPurple\");\n    const divYellow = document.querySelector(\"#btnYellow\");\n\n    if (colorID === \"btnGreen\") {\n      divGreen.classList.add(\"dark-border\");\n      divBlue.classList.remove(\"dark-border\");\n      divRed.classList.remove(\"dark-border\");\n      divPurple.classList.remove(\"dark-border\");\n      divYellow.classList.remove(\"dark-border\");\n\n      dispatch(storeTeacherEventColorAction(\"green\"));\n    } else if (colorID === \"btnBlue\") {\n      divGreen.classList.remove(\"dark-border\");\n      divBlue.classList.add(\"dark-border\");\n      divRed.classList.remove(\"dark-border\");\n      divPurple.classList.remove(\"dark-border\");\n      divYellow.classList.remove(\"dark-border\");\n\n      dispatch(storeTeacherEventColorAction(\"blue\"));\n    } else if (colorID === \"btnRed\") {\n      divGreen.classList.remove(\"dark-border\");\n      divBlue.classList.remove(\"dark-border\");\n      divRed.classList.add(\"dark-border\");\n      divPurple.classList.remove(\"dark-border\");\n      divYellow.classList.remove(\"dark-border\");\n      dispatch(storeTeacherEventColorAction(\"red\"));\n    } else if (colorID === \"btnPurple\") {\n      divGreen.classList.remove(\"dark-border\");\n      divBlue.classList.remove(\"dark-border\");\n      divRed.classList.remove(\"dark-border\");\n      divPurple.classList.add(\"dark-border\");\n      divYellow.classList.remove(\"dark-border\");\n      dispatch(storeTeacherEventColorAction(\"purple\"));\n    } else if (colorID === \"btnYellow\") {\n      divGreen.classList.remove(\"dark-border\");\n      divBlue.classList.remove(\"dark-border\");\n      divRed.classList.remove(\"dark-border\");\n      divPurple.classList.remove(\"dark-border\");\n      divYellow.classList.add(\"dark-border\");\n      dispatch(storeTeacherEventColorAction(\"yellow\"));\n    }\n  };\n\n  useEffect(() => {\n    if (!teacherAuthID) {\n      history.push(\"/teacherdash\");\n      return;\n    }\n  }, []);\n\n  return (\n    <div>\n      {/* Top Bar */}\n      <div>\n        <TopBar />\n      </div>\n\n      <div className=\"content\">\n        <h1>New Event</h1>\n        <button\n          className=\"btn-back\"\n          onClick={() => history.push(\"/teacher-events\")}\n        >\n          Back\n        </button>\n\n        <div className=\"white-background\">\n          <p className=\"eve-view-head\">Event Name:</p>\n          <input\n            className=\"tb\"\n            id=\"tbEveName\"\n            type=\"text\"\n            placeholder=\"Event Name\"\n          />\n          <br />\n          <br />\n          <p className=\"eve-view-head\">Start:</p>\n          <input type=\"date\" id=\"daStart\" className=\"dt\" />\n          <br />\n          <p className=\"eve-view-head\">End:</p>\n          <input type=\"date\" id=\"daEnd\" className=\"dt\" />\n          <br />\n\n          {/* COLOR */}\n          <p className=\"eve-view-head\">Color:</p>\n          <div style={{ display: \"flex\" }}>\n            {/* GREEN */}\n            <div\n              onClick={onColorClick}\n              id=\"btnGreen\"\n              style={{\n                width: \"fit-content\",\n                borderRadius: \"30px\",\n                marginRight: \"10px\",\n              }}\n            >\n              <button\n                style={{ backgroundColor: \"green\" }}\n                className=\"btn-eve-create-color\"\n              ></button>\n            </div>\n            {/* BLUE */}\n            <div\n              onClick={onColorClick}\n              id=\"btnBlue\"\n              style={{\n                width: \"fit-content\",\n                borderRadius: \"30px\",\n                marginRight: \"10px\",\n              }}\n            >\n              <button\n                style={{ backgroundColor: \"blue\" }}\n                className=\"btn-eve-create-color\"\n              ></button>\n            </div>\n            {/* RED */}\n            <div\n              onClick={onColorClick}\n              id=\"btnRed\"\n              style={{\n                width: \"fit-content\",\n                borderRadius: \"30px\",\n                marginRight: \"10px\",\n              }}\n            >\n              <button\n                style={{ backgroundColor: \"red\" }}\n                className=\"btn-eve-create-color\"\n              ></button>\n            </div>\n            {/* PURPLE */}\n            <div\n              onClick={onColorClick}\n              id=\"btnPurple\"\n              style={{\n                width: \"fit-content\",\n                borderRadius: \"30px\",\n                marginRight: \"10px\",\n              }}\n            >\n              <button\n                style={{ backgroundColor: \"#3E00F9\" }}\n                className=\"btn-eve-create-color\"\n              ></button>\n            </div>\n            {/* YELLOW */}\n            <div\n              onClick={onColorClick}\n              id=\"btnYellow\"\n              style={{\n                width: \"fit-content\",\n                borderRadius: \"30px\",\n                marginRight: \"10px\",\n              }}\n            >\n              <button\n                style={{ backgroundColor: \"yellow\" }}\n                className=\"btn-eve-create-color\"\n              ></button>\n            </div>\n          </div>\n          {/*  */}\n\n          <br />\n\n          <p className=\"eve-view-head\">Description:</p>\n          <textarea\n            id=\"taDesc\"\n            className=\"ta\"\n            placeholder=\"Description...\"\n          ></textarea>\n        </div>\n\n        <button onClick={createEvent} className=\"btnSaveChanges\">Create</button>\n      </div>\n\n      {/* Footer */}\n      <div>\n        <DashFooter />\n      </div>\n    </div>\n  );\n}\n","/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Teachers/Events/EventsEdit.js",["802"],"import React, { useEffect } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { useHistory } from \"react-router-dom\";\nimport DashFooter from \"../Dash/DashFooter\";\nimport TopBar from \"../Dash/TopBar\";\nimport FirebaseDate from \"../../FirebaseDate\";\n\nimport {\n  storeTeacherEventAction,\n  storeTeacherEventColorAction,\n  storeTeacherEventsAction,\n} from \"../../../redux/actions\";\nimport { teachers_Collection } from \"../../../utils/firebase\";\nimport InputDateFormatter from \"../../InputDateFormatter\";\n\nexport default function EventsEdit() {\n  const teacherAuthID = useSelector((state) => state.storeTeacherAuthIDReducer);\n  const history = useHistory();\n  const dispatch = useDispatch();\n\n  const events = useSelector((state) => state.storeTeacherEventsReducer);\n  const event = useSelector((state) => state.storeTeacherEventReducer);\n  const color = useSelector((state) => state.storeTeacherEventColorReducer);\n\n  //   CLICK\n  const onColorClick = (event) => {\n    let colorID;\n    const colorCapitalized = color.charAt(0).toUpperCase() + color.slice(1);\n    if (event === undefined) {\n      colorID = `btn${colorCapitalized}`;\n    } else {\n      colorID = event.currentTarget.getAttribute(\"id\");\n    }\n\n    const divGreen = document.querySelector(\"#btnGreen\");\n    const divBlue = document.querySelector(\"#btnBlue\");\n    const divRed = document.querySelector(\"#btnRed\");\n    const divPurple = document.querySelector(\"#btnPurple\");\n    const divYellow = document.querySelector(\"#btnYellow\");\n\n    if (colorID === \"btnGreen\") {\n      divGreen.classList.add(\"dark-border\");\n      divBlue.classList.remove(\"dark-border\");\n      divRed.classList.remove(\"dark-border\");\n      divPurple.classList.remove(\"dark-border\");\n      divYellow.classList.remove(\"dark-border\");\n\n      dispatch(storeTeacherEventColorAction(\"green\"));\n    } else if (colorID === \"btnBlue\") {\n      divGreen.classList.remove(\"dark-border\");\n      divBlue.classList.add(\"dark-border\");\n      divRed.classList.remove(\"dark-border\");\n      divPurple.classList.remove(\"dark-border\");\n      divYellow.classList.remove(\"dark-border\");\n\n      dispatch(storeTeacherEventColorAction(\"blue\"));\n    } else if (colorID === \"btnRed\") {\n      divGreen.classList.remove(\"dark-border\");\n      divBlue.classList.remove(\"dark-border\");\n      divRed.classList.add(\"dark-border\");\n      divPurple.classList.remove(\"dark-border\");\n      divYellow.classList.remove(\"dark-border\");\n      dispatch(storeTeacherEventColorAction(\"red\"));\n    } else if (colorID === \"btnPurple\") {\n      divGreen.classList.remove(\"dark-border\");\n      divBlue.classList.remove(\"dark-border\");\n      divRed.classList.remove(\"dark-border\");\n      divPurple.classList.add(\"dark-border\");\n      divYellow.classList.remove(\"dark-border\");\n      dispatch(storeTeacherEventColorAction(\"purple\"));\n    } else if (colorID === \"btnYellow\") {\n      divGreen.classList.remove(\"dark-border\");\n      divBlue.classList.remove(\"dark-border\");\n      divRed.classList.remove(\"dark-border\");\n      divPurple.classList.remove(\"dark-border\");\n      divYellow.classList.add(\"dark-border\");\n      dispatch(storeTeacherEventColorAction(\"yellow\"));\n    }\n  };\n\n  //   POST\n  const saveChanges = () => {\n    const eventName = document.querySelector(\"#tbEveName\").value;\n    const eventStart = FirebaseDate(document.querySelector(\"#daStart\").value);\n    const eventEnd = FirebaseDate(document.querySelector(\"#daEnd\").value);\n    const eventColor = color;\n    const eventDesc = document.querySelector(\"#taDesc\").value;\n\n    // Update in DB\n    teachers_Collection\n      .doc(teacherAuthID)\n      .collection(\"Events\")\n      .doc(event.id)\n      .update({\n        Name: eventName,\n        Start: eventStart,\n        End: eventEnd,\n        Color: eventColor,\n        Desc: eventDesc,\n      })\n      .catch((err) => console.log(err));\n\n    //   Dispatch\n    dispatch(\n      storeTeacherEventAction({\n        id: event.id,\n        Name: eventName,\n        Start: eventStart,\n        End: eventEnd,\n        Color: eventColor,\n        Desc: eventDesc,\n      })\n    );\n\n    const allEvents = [...events];\n    allEvents.forEach((eve) => {\n      if (eve.id === event.id) {\n        eve = {\n          id: event.id,\n          Name: eventName,\n          Start: eventStart,\n          End: eventEnd,\n          Color: eventColor,\n          Desc: eventDesc,\n        };\n\n        dispatch(storeTeacherEventsAction(allEvents));\n      }\n    });\n\n    history.push(\"/teacher-event-view\");\n  };\n\n  useEffect(() => {\n    if (!teacherAuthID) {\n      history.push(\"/teacherdash\");\n      return;\n    }\n\n    onColorClick();\n  }, []);\n\n  return (\n    <div>\n      {/* Top Bar */}\n      <div>\n        <TopBar />\n      </div>\n\n      <div className=\"content\">\n        <h1>Edit Event</h1>\n        <button\n          className=\"btn-back\"\n          onClick={() => history.push(\"/teacher-events\")}\n        >\n          Back\n        </button>\n\n        <div className=\"white-background\">\n          <p className=\"eve-view-head\">Event Name:</p>\n          <input\n            className=\"tb\"\n            id=\"tbEveName\"\n            type=\"text\"\n            defaultValue={event.Name}\n          />\n          <br />\n          <br />\n          <p className=\"eve-view-head\">Start:</p>\n          <input\n            type=\"date\"\n            id=\"daStart\"\n            className=\"dt\"\n            defaultValue={InputDateFormatter(event.Start)}\n          />\n          <br />\n          <p className=\"eve-view-head\">End:</p>\n          <input\n            type=\"date\"\n            id=\"daEnd\"\n            className=\"dt\"\n            defaultValue={InputDateFormatter(event.End)}\n          />\n          <br />\n\n          {/* COLOR */}\n          <p className=\"eve-view-head\">Color:</p>\n          <div style={{ display: \"flex\" }}>\n            {/* GREEN */}\n            <div\n              onClick={onColorClick}\n              id=\"btnGreen\"\n              style={{\n                width: \"fit-content\",\n                borderRadius: \"30px\",\n                marginRight: \"10px\",\n              }}\n            >\n              <button\n                style={{ backgroundColor: \"green\" }}\n                className=\"btn-eve-create-color\"\n              ></button>\n            </div>\n            {/* BLUE */}\n            <div\n              onClick={onColorClick}\n              id=\"btnBlue\"\n              style={{\n                width: \"fit-content\",\n                borderRadius: \"30px\",\n                marginRight: \"10px\",\n              }}\n            >\n              <button\n                style={{ backgroundColor: \"blue\" }}\n                className=\"btn-eve-create-color\"\n              ></button>\n            </div>\n            {/* RED */}\n            <div\n              onClick={onColorClick}\n              id=\"btnRed\"\n              style={{\n                width: \"fit-content\",\n                borderRadius: \"30px\",\n                marginRight: \"10px\",\n              }}\n            >\n              <button\n                style={{ backgroundColor: \"red\" }}\n                className=\"btn-eve-create-color\"\n              ></button>\n            </div>\n            {/* PURPLE */}\n            <div\n              onClick={onColorClick}\n              id=\"btnPurple\"\n              style={{\n                width: \"fit-content\",\n                borderRadius: \"30px\",\n                marginRight: \"10px\",\n              }}\n            >\n              <button\n                style={{ backgroundColor: \"#3E00F9\" }}\n                className=\"btn-eve-create-color\"\n              ></button>\n            </div>\n            {/* YELLOW */}\n            <div\n              onClick={onColorClick}\n              id=\"btnYellow\"\n              style={{\n                width: \"fit-content\",\n                borderRadius: \"30px\",\n                marginRight: \"10px\",\n              }}\n            >\n              <button\n                style={{ backgroundColor: \"yellow\" }}\n                className=\"btn-eve-create-color\"\n              ></button>\n            </div>\n          </div>\n          {/*  */}\n\n          <br />\n\n          <p className=\"eve-view-head\">Description:</p>\n          <textarea\n            id=\"taDesc\"\n            className=\"ta\"\n            defaultValue={event.Desc}\n          ></textarea>\n        </div>\n\n        <button onClick={saveChanges} className=\"btnSaveChanges\">\n          Save Changes\n        </button>\n      </div>\n\n      {/* Footer */}\n      <div>\n        <DashFooter />\n      </div>\n    </div>\n  );\n}\n","/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Students/Assignments/StudentAssignmentsMain.js",["803","804","805"],"/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Students/Assignments/StudentAssignmentsView.js",["806"],"import React, { useEffect } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { useHistory } from \"react-router-dom\";\nimport {\n  storeStudentAssignmentRatingAction,\n  storeStudentCompletedAssignmentsAction,\n  storeStudentIncompleteAssignmentsAction,\n} from \"../../../redux/actions\";\nimport {\n  students_Collection,\n  teachers_Collection,\n} from \"../../../utils/firebase\";\nimport GetToday from \"../../GetToday\";\nimport RandomString from \"../../RandomString\";\nimport Footer from \"../Footer\";\nimport TopBar from \"../TopBar\";\n\nimport { firebaseLooper } from \"../../../utils/tools\";\n\nexport default function StudentAssignmentsView() {\n  const studentAuthID = useSelector((state) => state.storeStudentAuthIDReducer);\n  const user = useSelector((state) => state.storeStudentUserDataReducer);\n  const history = useHistory();\n  const dispatch = useDispatch();\n\n  const assignment = useSelector(\n    (state) => state.storeStudentAssignmentReducer\n  );\n  const rating = useSelector(\n    (state) => state.storeStudentAssignmentRatingReducer\n  );\n\n  const completed = useSelector(\n    (state) => state.storeStudentCompletedAssignmentsReducer\n  );\n  const incomplete = useSelector(\n    (state) => state.storeStudentIncompleteAssignmentsReducer\n  );\n\n  // HANDLE\n  const handleAssignment = () => {\n    if (assignment.Type === \"Textual\") {\n      return (\n        <div>\n          <p className=\"ass-view-head\">Prompt</p>\n          <p className=\"ass-view-desc\">{assignment.Text}</p>\n        </div>\n      );\n    } else if (assignment.Type === \"Practice\") {\n      return (\n        <div>\n          <p className=\"ass-view-head\">Repertoire</p>\n          <p className=\"ass-view-desc\">{assignment.Repertoire}</p>\n          <br />\n          <p className=\"ass-view-head\">Composer</p>\n          <p className=\"ass-view-desc\">{assignment.Composer}</p>\n          <br />\n          <p className=\"ass-view-head\">Tempo</p>\n          <p className=\"ass-view-desc\">{assignment.Tempo}</p>\n          <br />\n          <p className=\"ass-view-head\">Details</p>\n          <p className=\"ass-view-desc\">{assignment.Text}</p>\n        </div>\n      );\n    }\n  };\n  const handleInput = () => {\n    if (assignment.Type === \"Textual\") {\n      return (\n        <div>\n          <p className=\"ass-view-head\">Response</p>\n          <textarea\n            className=\"ta\"\n            id=\"taAssResponse\"\n            placeholder=\"Type response here...\"\n          ></textarea>\n        </div>\n      );\n    } else if (assignment.Type === \"Practice\") {\n      return (\n        <div>\n          <p className=\"ass-view-head\">\n            How was your practice? Rate from 1 through 10.\n          </p>\n          <div className=\"btn-ass-rate\">\n            <button onClick={onRatingClick} id={1}>\n              1\n            </button>\n            <button onClick={onRatingClick} id={2}>\n              2\n            </button>\n            <button onClick={onRatingClick} id={3}>\n              3\n            </button>\n            <button onClick={onRatingClick} id={4}>\n              4\n            </button>\n            <button onClick={onRatingClick} id={5}>\n              5\n            </button>\n            <button onClick={onRatingClick} id={6}>\n              6\n            </button>\n            <button onClick={onRatingClick} id={7}>\n              7\n            </button>\n            <button onClick={onRatingClick} id={8}>\n              8\n            </button>\n            <button onClick={onRatingClick} id={9}>\n              9\n            </button>\n            <button onClick={onRatingClick} id={10}>\n              10\n            </button>\n          </div>\n\n          {rating > 0 ? handleRatingChoice() : null}\n          <br />\n          <p className=\"ass-view-head\">Any questions or concerns?</p>\n          <textarea\n            id=\"taPracticeComment\"\n            className=\"ta\"\n            placeholder=\"Type comments here...\"\n          ></textarea>\n        </div>\n      );\n    }\n  };\n  const handleRatingChoice = () => {\n    return (\n      <div>\n        <p className=\"ass-view-rating\">\n          You give your practice a {rating} out of 10.\n        </p>\n      </div>\n    );\n  };\n\n  // CLICK\n  const onRatingClick = (event) => {\n    const rating = event.currentTarget.getAttribute(\"id\");\n\n    dispatch(storeStudentAssignmentRatingAction(rating));\n  };\n\n  // POST\n  const submitAssignment = () => {\n    if (assignment.Type === \"Textual\") {\n      const response = document.querySelector(\"#taAssResponse\").value;\n\n      // Save to DB\n      const rand1 = RandomString();\n      const rand2 = RandomString();\n      const assID = `Ass${rand1}${rand2}`;\n\n      console.log(assignment.Teacher)\n\n      students_Collection\n        .doc(studentAuthID)\n        .collection(\"AssignmentResults\")\n        .doc(assID)\n        .set({\n          AssID: assignment.id,\n          Response: response,\n          Date: GetToday(),\n          Name: assignment.Name,\n          Type: assignment.Type,\n          Teacher: assignment.Teacher,\n        })\n        .catch((err) => console.log(err));\n\n      // Send notification\n      const rand3 = RandomString();\n      const rand4 = RandomString();\n      const notifID = `Notif${rand3}${rand4}`;\n\n      teachers_Collection\n        .doc(assignment.Teacher)\n        .collection(\"Notifications\")\n        .doc(notifID)\n        .set({\n          Icon: \"faBookOpen\",\n          Action: \"\",\n          Text: `${user.FirstName} ${user.LastName} has completed the assignment: ${assignment.Name}.`,\n          Date: GetToday(),\n        })\n        .catch((err) => console.log(err));\n    } else if (assignment.Type === \"Practice\") {\n      const rand1 = RandomString();\n      const rand2 = RandomString();\n      const assID = `Ass${rand1}${rand2}`;\n\n      const comments = document.querySelector(\"#taPracticeComment\").value;\n\n      students_Collection\n        .doc(studentAuthID)\n        .collection(\"AssignmentResults\")\n        .doc(assID)\n        .set({\n          AssID: assignment.id,\n          Rating: rating,\n          Comments: comments,\n          Date: GetToday(),\n          Name: assignment.Name,\n          Type: assignment.Type,\n          Teacher: assignment.Teacher,\n        })\n        .catch((err) => console.log(err));\n\n      // Send notification\n      const rand3 = RandomString();\n      const rand4 = RandomString();\n      const notifID = `Notif${rand3}${rand4}`;\n\n      teachers_Collection\n        .doc(assignment.Teacher)\n        .collection(\"Notifications\")\n        .doc(notifID)\n        .set({\n          Icon: \"faBookOpen\",\n          Action: \"\",\n          Text: `${user.FirstName} ${user.LastName} has completed the assignment: ${assignment.Name}.`,\n          Date: GetToday(),\n        })\n        .catch((err) => console.log(err));\n    }\n\n    students_Collection\n      .doc(studentAuthID)\n      .collection(\"AssignmentsInfo\")\n      .where(\"AssID\", \"==\", assignment.id)\n      .get()\n      .then((snapshot) => {\n        const assInfo = firebaseLooper(snapshot);\n        assInfo.forEach((a) => {\n          students_Collection\n            .doc(studentAuthID)\n            .collection(\"AssignmentsInfo\")\n            .doc(a.id)\n            .update({\n              isComplete: true,\n            })\n            .catch((err) => console.log(err));\n\n          const allComp = [...completed];\n          const allIncomp = [...incomplete];\n\n          let filtered = [];\n          // Remove from Inc\n          filtered = allIncomp.filter((sharon) => sharon.id !== a.id);\n          dispatch(storeStudentIncompleteAssignmentsAction(filtered));\n\n          // Add to comp\n          allComp.push({\n            ...a,\n            isComplete: true,\n          });\n          dispatch(storeStudentCompletedAssignmentsAction(allComp));\n        });\n      })\n      .catch((err) => console.log(err));\n\n    history.push(\"/student-assignments\");\n  };\n\n  useEffect(() => {\n    if (!studentAuthID) {\n      history.push(\"/studentdash\");\n      return;\n    }\n\n    console.log(assignment);\n  }, [assignment]);\n\n  return (\n    <div>\n      {/* Top Bar */}\n      <div>\n        <TopBar />\n      </div>\n\n      <div className=\"content\">\n        <h1>{assignment.Name}</h1>\n        <button\n          className=\"btn-back\"\n          onClick={() => history.push(\"/student-assignments\")}\n        >\n          Back\n        </button>\n\n        <div className=\"white-background\">\n          <p className=\"ass-view-head\">Overview</p>\n          <p className=\"ass-view-desc\">{assignment.Desc}</p>\n        </div>\n        <div className=\"white-background\">{handleAssignment()}</div>\n        <div className=\"white-background\">{handleInput()}</div>\n        <button onClick={submitAssignment} className=\"btnSaveChanges\">\n          Submit\n        </button>\n      </div>\n\n      {/* Footer */}\n      <div>\n        <Footer />\n      </div>\n    </div>\n  );\n}\n","/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Students/Milestones/StudentMilestonesMain.js",["807","808","809","810"],"/Users/jesusjimenez/Creative/MusicProject/musicapp/src/components/Students/Milestones/StudentMilestoneView.js",["811","812","813","814","815"],"import React, { useEffect } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { useHistory } from \"react-router-dom\";\nimport { storeStudentMilestoneViewTasksAction } from \"../../../redux/actions\";\nimport { teachers_Collection } from \"../../../utils/firebase\";\nimport Footer from \"../Footer\";\nimport TopBar from \"../TopBar\";\n\nimport { firebaseLooper } from \"../../../utils/tools\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faCheck, faTimes } from \"@fortawesome/free-solid-svg-icons\";\n\nexport default function StudentMilestoneView() {\n  const studentAuthID = useSelector((state) => state.storeStudentAuthIDReducer);\n  const user = useSelector((state) => state.storeStudentUserDataReducer);\n  const history = useHistory();\n  const dispatch = useDispatch();\n\n  const miTasks = useSelector(\n    (state) => state.storeStudentMilestoneTasksReducer\n  );\n  const tasks = useSelector(\n    (state) => state.storeStudentMilestoneViewTasksReducer\n  );\n  const teacherData = useSelector(\n    (state) => state.storeStudentTeacherIDReducer\n  );\n\n  //   GET\n  const getTasks = () => {\n    miTasks.forEach((mi) => {\n      teachers_Collection\n        .doc(teacherData.TeacherID)\n        .collection(\"Milestones\")\n        .doc(teacherData.MileID)\n        .collection(\"MilestoneTasks\")\n        .get()\n        .then((snapshot) => {\n          const teachTaskData = firebaseLooper(snapshot);\n          const teachTaskSize = snapshot.size;\n\n          let allTasks = [];\n          teachTaskData.forEach((tt, i) => {\n            tt = {\n              ...tt,\n              isComplete: mi.isComplete,\n            };\n            allTasks.push(tt);\n            if (i + 1 === teachTaskSize) {\n              dispatch(storeStudentMilestoneViewTasksAction(allTasks));\n            }\n          });\n        })\n        .catch((err) => console.log(err));\n    });\n  };\n\n  //   HANDLE\n  const handleTaskList = () => {\n    return tasks.map((task, i) => {\n      return (\n        <div className=\"task-list-block\" key={i}>\n          {task.isComplete ? (\n            <div className=\"task-list-icon-complete\"></div>\n          ) : (\n            <div className=\"task-list-icon-incomplete\"></div>\n          )}\n          <p className=\"task-list-task\">{task.Task}</p>\n          <p className=\"task-list-desc\">{task.Desc}</p>\n        </div>\n      );\n    });\n  };\n\n  useEffect(() => {\n    if (!studentAuthID) {\n      history.push(\"/studentdash\");\n      return;\n    }\n\n    getTasks();\n  }, []);\n  return (\n    <div>\n      {/* Top Bar */}\n      <div>\n        <TopBar />\n      </div>\n\n      <div className=\"content\">\n        <h1>{teacherData.MileName}</h1>\n        <button\n          className=\"btn-back\"\n          onClick={() => history.push(\"/student-milestones\")}\n        >\n          Back\n        </button>\n\n        <div className=\"white-background\">{handleTaskList()}</div>\n      </div>\n\n      {/* Footer */}\n      <div>\n        <Footer />\n      </div>\n    </div>\n  );\n}\n",{"ruleId":"816","severity":1,"message":"817","line":15,"column":19,"nodeType":"818","messageId":"819","endLine":15,"endColumn":32},{"ruleId":"820","severity":1,"message":"821","line":124,"column":6,"nodeType":"822","endLine":124,"endColumn":8,"suggestions":"823"},{"ruleId":"824","replacedBy":"825"},{"ruleId":"826","replacedBy":"827"},{"ruleId":"824","replacedBy":"828"},{"ruleId":"826","replacedBy":"829"},{"ruleId":"820","severity":1,"message":"830","line":37,"column":6,"nodeType":"822","endLine":37,"endColumn":8,"suggestions":"831"},{"ruleId":"824","replacedBy":"832"},{"ruleId":"826","replacedBy":"833"},{"ruleId":"824","replacedBy":"834"},{"ruleId":"826","replacedBy":"835"},{"ruleId":"824","replacedBy":"836"},{"ruleId":"826","replacedBy":"837"},{"ruleId":"824","replacedBy":"838"},{"ruleId":"826","replacedBy":"839"},{"ruleId":"824","replacedBy":"840"},{"ruleId":"826","replacedBy":"841"},{"ruleId":"824","replacedBy":"842"},{"ruleId":"826","replacedBy":"843"},{"ruleId":"816","severity":1,"message":"844","line":1,"column":10,"nodeType":"818","messageId":"819","endLine":1,"endColumn":16},{"ruleId":"816","severity":1,"message":"845","line":2,"column":10,"nodeType":"818","messageId":"819","endLine":2,"endColumn":25},{"ruleId":"816","severity":1,"message":"846","line":20,"column":9,"nodeType":"818","messageId":"819","endLine":20,"endColumn":15},{"ruleId":"820","severity":1,"message":"847","line":75,"column":6,"nodeType":"822","endLine":75,"endColumn":8,"suggestions":"848"},{"ruleId":"824","replacedBy":"849"},{"ruleId":"826","replacedBy":"850"},{"ruleId":"820","severity":1,"message":"830","line":126,"column":6,"nodeType":"822","endLine":126,"endColumn":8,"suggestions":"851"},{"ruleId":"824","replacedBy":"852"},{"ruleId":"826","replacedBy":"853"},{"ruleId":"820","severity":1,"message":"854","line":31,"column":6,"nodeType":"822","endLine":31,"endColumn":8,"suggestions":"855"},{"ruleId":"824","replacedBy":"856"},{"ruleId":"826","replacedBy":"857"},{"ruleId":"858","severity":1,"message":"859","line":319,"column":37,"nodeType":"860","messageId":"861","endLine":319,"endColumn":39},{"ruleId":"820","severity":1,"message":"862","line":436,"column":6,"nodeType":"822","endLine":436,"endColumn":8,"suggestions":"863"},{"ruleId":"824","replacedBy":"864"},{"ruleId":"826","replacedBy":"865"},{"ruleId":"816","severity":1,"message":"866","line":19,"column":9,"nodeType":"818","messageId":"819","endLine":19,"endColumn":13},{"ruleId":"820","severity":1,"message":"867","line":227,"column":6,"nodeType":"822","endLine":227,"endColumn":8,"suggestions":"868"},{"ruleId":"816","severity":1,"message":"869","line":29,"column":3,"nodeType":"818","messageId":"819","endLine":29,"endColumn":10},{"ruleId":"816","severity":1,"message":"817","line":30,"column":3,"nodeType":"818","messageId":"819","endLine":30,"endColumn":16},{"ruleId":"820","severity":1,"message":"870","line":276,"column":6,"nodeType":"822","endLine":276,"endColumn":8,"suggestions":"871"},{"ruleId":"820","severity":1,"message":"872","line":47,"column":6,"nodeType":"822","endLine":47,"endColumn":8,"suggestions":"873"},{"ruleId":"824","replacedBy":"874"},{"ruleId":"826","replacedBy":"875"},{"ruleId":"816","severity":1,"message":"876","line":9,"column":10,"nodeType":"818","messageId":"819","endLine":9,"endColumn":27},{"ruleId":"816","severity":1,"message":"877","line":25,"column":9,"nodeType":"818","messageId":"819","endLine":25,"endColumn":19},{"ruleId":"820","severity":1,"message":"830","line":73,"column":6,"nodeType":"822","endLine":73,"endColumn":8,"suggestions":"878"},{"ruleId":"824","replacedBy":"879"},{"ruleId":"826","replacedBy":"880"},{"ruleId":"824","replacedBy":"881"},{"ruleId":"826","replacedBy":"882"},{"ruleId":"820","severity":1,"message":"830","line":43,"column":6,"nodeType":"822","endLine":43,"endColumn":8,"suggestions":"883"},{"ruleId":"820","severity":1,"message":"854","line":31,"column":6,"nodeType":"822","endLine":31,"endColumn":8,"suggestions":"884"},{"ruleId":"824","replacedBy":"885"},{"ruleId":"826","replacedBy":"886"},{"ruleId":"824","replacedBy":"887"},{"ruleId":"826","replacedBy":"888"},{"ruleId":"816","severity":1,"message":"889","line":22,"column":9,"nodeType":"818","messageId":"819","endLine":22,"endColumn":24},{"ruleId":"816","severity":1,"message":"890","line":23,"column":9,"nodeType":"818","messageId":"819","endLine":23,"endColumn":25},{"ruleId":"820","severity":1,"message":"891","line":125,"column":6,"nodeType":"822","endLine":125,"endColumn":8,"suggestions":"892"},{"ruleId":"820","severity":1,"message":"830","line":23,"column":6,"nodeType":"822","endLine":23,"endColumn":8,"suggestions":"893"},{"ruleId":"820","severity":1,"message":"894","line":153,"column":6,"nodeType":"822","endLine":153,"endColumn":8,"suggestions":"895"},{"ruleId":"816","severity":1,"message":"896","line":6,"column":8,"nodeType":"818","messageId":"819","endLine":6,"endColumn":16},{"ruleId":"820","severity":1,"message":"830","line":54,"column":6,"nodeType":"822","endLine":54,"endColumn":8,"suggestions":"897"},{"ruleId":"824","replacedBy":"898"},{"ruleId":"826","replacedBy":"899"},{"ruleId":"816","severity":1,"message":"900","line":19,"column":3,"nodeType":"818","messageId":"819","endLine":19,"endColumn":38},{"ruleId":"816","severity":1,"message":"901","line":23,"column":3,"nodeType":"818","messageId":"819","endLine":23,"endColumn":25},{"ruleId":"816","severity":1,"message":"902","line":24,"column":3,"nodeType":"818","messageId":"819","endLine":24,"endColumn":19},{"ruleId":"816","severity":1,"message":"876","line":29,"column":3,"nodeType":"818","messageId":"819","endLine":29,"endColumn":20},{"ruleId":"816","severity":1,"message":"903","line":39,"column":9,"nodeType":"818","messageId":"819","endLine":39,"endColumn":14},{"ruleId":"820","severity":1,"message":"904","line":90,"column":6,"nodeType":"822","endLine":90,"endColumn":8,"suggestions":"905"},{"ruleId":"824","replacedBy":"906"},{"ruleId":"826","replacedBy":"907"},{"ruleId":"820","severity":1,"message":"908","line":245,"column":6,"nodeType":"822","endLine":245,"endColumn":8,"suggestions":"909"},{"ruleId":"820","severity":1,"message":"910","line":100,"column":6,"nodeType":"822","endLine":100,"endColumn":8,"suggestions":"911"},{"ruleId":"816","severity":1,"message":"846","line":31,"column":9,"nodeType":"818","messageId":"819","endLine":31,"endColumn":15},{"ruleId":"820","severity":1,"message":"912","line":243,"column":6,"nodeType":"822","endLine":243,"endColumn":8,"suggestions":"913"},{"ruleId":"816","severity":1,"message":"914","line":268,"column":11,"nodeType":"818","messageId":"819","endLine":268,"endColumn":18},{"ruleId":"820","severity":1,"message":"915","line":304,"column":6,"nodeType":"822","endLine":304,"endColumn":8,"suggestions":"916"},{"ruleId":"816","severity":1,"message":"917","line":86,"column":3,"nodeType":"818","messageId":"819","endLine":86,"endColumn":21},{"ruleId":"816","severity":1,"message":"918","line":98,"column":9,"nodeType":"818","messageId":"819","endLine":98,"endColumn":22},{"ruleId":"816","severity":1,"message":"919","line":23,"column":9,"nodeType":"818","messageId":"819","endLine":23,"endColumn":17},{"ruleId":"820","severity":1,"message":"920","line":31,"column":6,"nodeType":"822","endLine":31,"endColumn":12,"suggestions":"921"},{"ruleId":"816","severity":1,"message":"866","line":18,"column":9,"nodeType":"818","messageId":"819","endLine":18,"endColumn":13},{"ruleId":"820","severity":1,"message":"920","line":117,"column":6,"nodeType":"822","endLine":117,"endColumn":8,"suggestions":"922"},{"ruleId":"816","severity":1,"message":"919","line":8,"column":9,"nodeType":"818","messageId":"819","endLine":8,"endColumn":17},{"ruleId":"820","severity":1,"message":"830","line":17,"column":6,"nodeType":"822","endLine":17,"endColumn":8,"suggestions":"923"},{"ruleId":"824","replacedBy":"924"},{"ruleId":"826","replacedBy":"925"},{"ruleId":"820","severity":1,"message":"854","line":31,"column":6,"nodeType":"822","endLine":31,"endColumn":8,"suggestions":"926"},{"ruleId":"820","severity":1,"message":"854","line":31,"column":6,"nodeType":"822","endLine":31,"endColumn":8,"suggestions":"927"},{"ruleId":"824","replacedBy":"928"},{"ruleId":"826","replacedBy":"929"},{"ruleId":"816","severity":1,"message":"846","line":23,"column":9,"nodeType":"818","messageId":"819","endLine":23,"endColumn":15},{"ruleId":"820","severity":1,"message":"930","line":106,"column":6,"nodeType":"822","endLine":106,"endColumn":8,"suggestions":"931"},{"ruleId":"824","replacedBy":"932"},{"ruleId":"826","replacedBy":"933"},{"ruleId":"820","severity":1,"message":"934","line":142,"column":6,"nodeType":"822","endLine":142,"endColumn":8,"suggestions":"935"},{"ruleId":"820","severity":1,"message":"830","line":219,"column":6,"nodeType":"822","endLine":219,"endColumn":8,"suggestions":"936"},{"ruleId":"816","severity":1,"message":"817","line":16,"column":3,"nodeType":"818","messageId":"819","endLine":16,"endColumn":16},{"ruleId":"816","severity":1,"message":"846","line":34,"column":9,"nodeType":"818","messageId":"819","endLine":34,"endColumn":15},{"ruleId":"820","severity":1,"message":"912","line":276,"column":6,"nodeType":"822","endLine":276,"endColumn":8,"suggestions":"937"},{"ruleId":"820","severity":1,"message":"830","line":230,"column":6,"nodeType":"822","endLine":230,"endColumn":8,"suggestions":"938"},{"ruleId":"820","severity":1,"message":"939","line":280,"column":6,"nodeType":"822","endLine":280,"endColumn":8,"suggestions":"940"},{"ruleId":"824","replacedBy":"941"},{"ruleId":"826","replacedBy":"942"},{"ruleId":"820","severity":1,"message":"943","line":501,"column":6,"nodeType":"822","endLine":501,"endColumn":8,"suggestions":"944"},{"ruleId":"824","replacedBy":"945"},{"ruleId":"826","replacedBy":"946"},{"ruleId":"816","severity":1,"message":"866","line":22,"column":9,"nodeType":"818","messageId":"819","endLine":22,"endColumn":13},{"ruleId":"820","severity":1,"message":"947","line":127,"column":6,"nodeType":"822","endLine":127,"endColumn":15,"suggestions":"948"},{"ruleId":"820","severity":1,"message":"949","line":124,"column":6,"nodeType":"822","endLine":124,"endColumn":8,"suggestions":"950"},{"ruleId":"816","severity":1,"message":"901","line":6,"column":3,"nodeType":"818","messageId":"819","endLine":6,"endColumn":25},{"ruleId":"816","severity":1,"message":"951","line":7,"column":3,"nodeType":"818","messageId":"819","endLine":7,"endColumn":27},{"ruleId":"816","severity":1,"message":"902","line":8,"column":3,"nodeType":"818","messageId":"819","endLine":8,"endColumn":19},{"ruleId":"820","severity":1,"message":"952","line":44,"column":6,"nodeType":"822","endLine":44,"endColumn":8,"suggestions":"953"},{"ruleId":"816","severity":1,"message":"817","line":29,"column":3,"nodeType":"818","messageId":"819","endLine":29,"endColumn":16},{"ruleId":"820","severity":1,"message":"954","line":354,"column":6,"nodeType":"822","endLine":354,"endColumn":8,"suggestions":"955"},{"ruleId":"820","severity":1,"message":"854","line":31,"column":6,"nodeType":"822","endLine":31,"endColumn":8,"suggestions":"956"},{"ruleId":"824","replacedBy":"957"},{"ruleId":"826","replacedBy":"958"},{"ruleId":"816","severity":1,"message":"845","line":16,"column":10,"nodeType":"818","messageId":"819","endLine":16,"endColumn":25},{"ruleId":"816","severity":1,"message":"959","line":19,"column":10,"nodeType":"818","messageId":"819","endLine":19,"endColumn":21},{"ruleId":"816","severity":1,"message":"960","line":19,"column":23,"nodeType":"818","messageId":"819","endLine":19,"endColumn":28},{"ruleId":"816","severity":1,"message":"961","line":19,"column":30,"nodeType":"818","messageId":"819","endLine":19,"endColumn":36},{"ruleId":"820","severity":1,"message":"962","line":141,"column":6,"nodeType":"822","endLine":141,"endColumn":13,"suggestions":"963"},{"ruleId":"816","severity":1,"message":"869","line":18,"column":3,"nodeType":"818","messageId":"819","endLine":18,"endColumn":10},{"ruleId":"820","severity":1,"message":"964","line":200,"column":6,"nodeType":"822","endLine":200,"endColumn":8,"suggestions":"965"},{"ruleId":"858","severity":1,"message":"859","line":29,"column":33,"nodeType":"860","messageId":"861","endLine":29,"endColumn":35},{"ruleId":"820","severity":1,"message":"966","line":51,"column":6,"nodeType":"822","endLine":51,"endColumn":8,"suggestions":"967"},{"ruleId":"820","severity":1,"message":"968","line":205,"column":6,"nodeType":"822","endLine":205,"endColumn":8,"suggestions":"969"},{"ruleId":"820","severity":1,"message":"830","line":74,"column":6,"nodeType":"822","endLine":74,"endColumn":8,"suggestions":"970"},{"ruleId":"824","replacedBy":"971"},{"ruleId":"826","replacedBy":"972"},{"ruleId":"816","severity":1,"message":"973","line":1,"column":17,"nodeType":"818","messageId":"819","endLine":1,"endColumn":26},{"ruleId":"816","severity":1,"message":"974","line":2,"column":10,"nodeType":"818","messageId":"819","endLine":2,"endColumn":21},{"ruleId":"816","severity":1,"message":"975","line":2,"column":23,"nodeType":"818","messageId":"819","endLine":2,"endColumn":34},{"ruleId":"816","severity":1,"message":"976","line":3,"column":10,"nodeType":"818","messageId":"819","endLine":3,"endColumn":20},{"ruleId":"816","severity":1,"message":"977","line":6,"column":8,"nodeType":"818","messageId":"819","endLine":6,"endColumn":20},{"ruleId":"820","severity":1,"message":"978","line":78,"column":6,"nodeType":"822","endLine":78,"endColumn":8,"suggestions":"979"},{"ruleId":"858","severity":1,"message":"859","line":46,"column":37,"nodeType":"860","messageId":"861","endLine":46,"endColumn":39},{"ruleId":"816","severity":1,"message":"980","line":595,"column":15,"nodeType":"818","messageId":"819","endLine":595,"endColumn":22},{"ruleId":"820","severity":1,"message":"981","line":895,"column":6,"nodeType":"822","endLine":895,"endColumn":8,"suggestions":"982"},{"ruleId":"983","severity":1,"message":"984","line":142,"column":55,"nodeType":"985","endLine":142,"endColumn":74},{"ruleId":"820","severity":1,"message":"986","line":390,"column":6,"nodeType":"822","endLine":390,"endColumn":8,"suggestions":"987"},{"ruleId":"820","severity":1,"message":"854","line":31,"column":6,"nodeType":"822","endLine":31,"endColumn":8,"suggestions":"988"},{"ruleId":"820","severity":1,"message":"989","line":237,"column":6,"nodeType":"822","endLine":237,"endColumn":8,"suggestions":"990"},{"ruleId":"820","severity":1,"message":"830","line":121,"column":6,"nodeType":"822","endLine":121,"endColumn":8,"suggestions":"991"},{"ruleId":"816","severity":1,"message":"992","line":14,"column":10,"nodeType":"818","messageId":"819","endLine":14,"endColumn":16},{"ruleId":"858","severity":1,"message":"859","line":53,"column":36,"nodeType":"860","messageId":"861","endLine":53,"endColumn":38},{"ruleId":"816","severity":1,"message":"980","line":1036,"column":15,"nodeType":"818","messageId":"819","endLine":1036,"endColumn":22},{"ruleId":"820","severity":1,"message":"993","line":1528,"column":6,"nodeType":"822","endLine":1528,"endColumn":8,"suggestions":"994"},{"ruleId":"816","severity":1,"message":"866","line":25,"column":9,"nodeType":"818","messageId":"819","endLine":25,"endColumn":13},{"ruleId":"816","severity":1,"message":"995","line":46,"column":9,"nodeType":"818","messageId":"819","endLine":46,"endColumn":17},{"ruleId":"816","severity":1,"message":"996","line":178,"column":9,"nodeType":"818","messageId":"819","endLine":178,"endColumn":30},{"ruleId":"820","severity":1,"message":"997","line":263,"column":6,"nodeType":"822","endLine":263,"endColumn":8,"suggestions":"998"},{"ruleId":"816","severity":1,"message":"999","line":9,"column":3,"nodeType":"818","messageId":"819","endLine":9,"endColumn":21},{"ruleId":"816","severity":1,"message":"1000","line":12,"column":10,"nodeType":"818","messageId":"819","endLine":12,"endColumn":24},{"ruleId":"816","severity":1,"message":"1001","line":15,"column":3,"nodeType":"818","messageId":"819","endLine":15,"endColumn":25},{"ruleId":"816","severity":1,"message":"1002","line":16,"column":3,"nodeType":"818","messageId":"819","endLine":16,"endColumn":37},{"ruleId":"816","severity":1,"message":"1003","line":17,"column":3,"nodeType":"818","messageId":"819","endLine":17,"endColumn":32},{"ruleId":"816","severity":1,"message":"866","line":24,"column":9,"nodeType":"818","messageId":"819","endLine":24,"endColumn":13},{"ruleId":"820","severity":1,"message":"1004","line":95,"column":6,"nodeType":"822","endLine":95,"endColumn":14,"suggestions":"1005"},{"ruleId":"816","severity":1,"message":"1001","line":6,"column":3,"nodeType":"818","messageId":"819","endLine":6,"endColumn":25},{"ruleId":"816","severity":1,"message":"866","line":23,"column":9,"nodeType":"818","messageId":"819","endLine":23,"endColumn":13},{"ruleId":"816","severity":1,"message":"1006","line":27,"column":9,"nodeType":"818","messageId":"819","endLine":27,"endColumn":16},{"ruleId":"858","severity":1,"message":"859","line":57,"column":37,"nodeType":"860","messageId":"861","endLine":57,"endColumn":39},{"ruleId":"1007","severity":1,"message":"1008","line":193,"column":13,"nodeType":"818","messageId":"1009","endLine":193,"endColumn":20},{"ruleId":"1007","severity":1,"message":"1010","line":194,"column":13,"nodeType":"818","messageId":"1009","endLine":194,"endColumn":23},{"ruleId":"1007","severity":1,"message":"1008","line":206,"column":13,"nodeType":"818","messageId":"1009","endLine":206,"endColumn":20},{"ruleId":"1007","severity":1,"message":"1010","line":207,"column":13,"nodeType":"818","messageId":"1009","endLine":207,"endColumn":23},{"ruleId":"816","severity":1,"message":"980","line":306,"column":15,"nodeType":"818","messageId":"819","endLine":306,"endColumn":22},{"ruleId":"820","severity":1,"message":"1011","line":631,"column":6,"nodeType":"822","endLine":631,"endColumn":12,"suggestions":"1012"},{"ruleId":"816","severity":1,"message":"977","line":7,"column":8,"nodeType":"818","messageId":"819","endLine":7,"endColumn":20},{"ruleId":"816","severity":1,"message":"866","line":11,"column":9,"nodeType":"818","messageId":"819","endLine":11,"endColumn":13},{"ruleId":"816","severity":1,"message":"919","line":13,"column":9,"nodeType":"818","messageId":"819","endLine":13,"endColumn":17},{"ruleId":"820","severity":1,"message":"920","line":56,"column":6,"nodeType":"822","endLine":56,"endColumn":8,"suggestions":"1013"},{"ruleId":"816","severity":1,"message":"919","line":27,"column":9,"nodeType":"818","messageId":"819","endLine":27,"endColumn":17},{"ruleId":"820","severity":1,"message":"830","line":38,"column":6,"nodeType":"822","endLine":38,"endColumn":8,"suggestions":"1014"},{"ruleId":"816","severity":1,"message":"866","line":33,"column":9,"nodeType":"818","messageId":"819","endLine":33,"endColumn":13},{"ruleId":"820","severity":1,"message":"1015","line":331,"column":6,"nodeType":"822","endLine":331,"endColumn":8,"suggestions":"1016"},{"ruleId":"820","severity":1,"message":"1017","line":138,"column":6,"nodeType":"822","endLine":138,"endColumn":13,"suggestions":"1018"},{"ruleId":"824","replacedBy":"1019"},{"ruleId":"826","replacedBy":"1020"},{"ruleId":"820","severity":1,"message":"1021","line":157,"column":6,"nodeType":"822","endLine":157,"endColumn":8,"suggestions":"1022"},{"ruleId":"824","replacedBy":"1023"},{"ruleId":"826","replacedBy":"1024"},{"ruleId":"816","severity":1,"message":"1025","line":5,"column":3,"nodeType":"818","messageId":"819","endLine":5,"endColumn":36},{"ruleId":"820","severity":1,"message":"1026","line":129,"column":6,"nodeType":"822","endLine":129,"endColumn":8,"suggestions":"1027"},{"ruleId":"820","severity":1,"message":"1028","line":106,"column":6,"nodeType":"822","endLine":106,"endColumn":18,"suggestions":"1029"},{"ruleId":"816","severity":1,"message":"817","line":18,"column":3,"nodeType":"818","messageId":"819","endLine":18,"endColumn":16},{"ruleId":"816","severity":1,"message":"846","line":37,"column":9,"nodeType":"818","messageId":"819","endLine":37,"endColumn":15},{"ruleId":"820","severity":1,"message":"1026","line":279,"column":6,"nodeType":"822","endLine":279,"endColumn":8,"suggestions":"1030"},{"ruleId":"816","severity":1,"message":"1031","line":9,"column":3,"nodeType":"818","messageId":"819","endLine":9,"endColumn":23},{"ruleId":"816","severity":1,"message":"1032","line":10,"column":3,"nodeType":"818","messageId":"819","endLine":10,"endColumn":22},{"ruleId":"820","severity":1,"message":"1033","line":104,"column":8,"nodeType":"822","endLine":104,"endColumn":16,"suggestions":"1034"},{"ruleId":"816","severity":1,"message":"846","line":31,"column":9,"nodeType":"818","messageId":"819","endLine":31,"endColumn":15},{"ruleId":"820","severity":1,"message":"1026","line":243,"column":6,"nodeType":"822","endLine":243,"endColumn":8,"suggestions":"1035"},{"ruleId":"816","severity":1,"message":"844","line":1,"column":10,"nodeType":"818","messageId":"819","endLine":1,"endColumn":16},{"ruleId":"816","severity":1,"message":"845","line":2,"column":10,"nodeType":"818","messageId":"819","endLine":2,"endColumn":25},{"ruleId":"820","severity":1,"message":"1036","line":112,"column":6,"nodeType":"822","endLine":112,"endColumn":15,"suggestions":"1037"},{"ruleId":"820","severity":1,"message":"1026","line":95,"column":6,"nodeType":"822","endLine":95,"endColumn":8,"suggestions":"1038"},{"ruleId":"820","severity":1,"message":"1026","line":98,"column":6,"nodeType":"822","endLine":98,"endColumn":8,"suggestions":"1039"},{"ruleId":"820","severity":1,"message":"1040","line":249,"column":6,"nodeType":"822","endLine":249,"endColumn":8,"suggestions":"1041"},{"ruleId":"816","severity":1,"message":"817","line":4,"column":3,"nodeType":"818","messageId":"819","endLine":4,"endColumn":16},{"ruleId":"816","severity":1,"message":"1042","line":11,"column":3,"nodeType":"818","messageId":"819","endLine":11,"endColumn":42},{"ruleId":"820","severity":1,"message":"830","line":166,"column":6,"nodeType":"822","endLine":166,"endColumn":8,"suggestions":"1043"},{"ruleId":"816","severity":1,"message":"961","line":1,"column":10,"nodeType":"818","messageId":"819","endLine":1,"endColumn":16},{"ruleId":"816","severity":1,"message":"845","line":2,"column":10,"nodeType":"818","messageId":"819","endLine":2,"endColumn":25},{"ruleId":"820","severity":1,"message":"830","line":67,"column":6,"nodeType":"822","endLine":67,"endColumn":8,"suggestions":"1044"},{"ruleId":"820","severity":1,"message":"1045","line":176,"column":6,"nodeType":"822","endLine":176,"endColumn":19,"suggestions":"1046"},{"ruleId":"816","severity":1,"message":"1047","line":27,"column":9,"nodeType":"818","messageId":"819","endLine":27,"endColumn":19},{"ruleId":"820","severity":1,"message":"1048","line":185,"column":6,"nodeType":"822","endLine":185,"endColumn":14,"suggestions":"1049"},{"ruleId":"820","severity":1,"message":"830","line":20,"column":6,"nodeType":"822","endLine":20,"endColumn":8,"suggestions":"1050"},{"ruleId":"820","severity":1,"message":"830","line":118,"column":6,"nodeType":"822","endLine":118,"endColumn":8,"suggestions":"1051"},{"ruleId":"820","severity":1,"message":"1052","line":141,"column":6,"nodeType":"822","endLine":141,"endColumn":8,"suggestions":"1053"},{"ruleId":"816","severity":1,"message":"1054","line":13,"column":3,"nodeType":"818","messageId":"819","endLine":13,"endColumn":32},{"ruleId":"816","severity":1,"message":"866","line":25,"column":9,"nodeType":"818","messageId":"819","endLine":25,"endColumn":13},{"ruleId":"820","severity":1,"message":"1055","line":141,"column":6,"nodeType":"822","endLine":141,"endColumn":29,"suggestions":"1056"},{"ruleId":"820","severity":1,"message":"920","line":274,"column":6,"nodeType":"822","endLine":274,"endColumn":18,"suggestions":"1057"},{"ruleId":"816","severity":1,"message":"1058","line":6,"column":3,"nodeType":"818","messageId":"819","endLine":6,"endColumn":22},{"ruleId":"816","severity":1,"message":"1059","line":21,"column":8,"nodeType":"818","messageId":"819","endLine":21,"endColumn":24},{"ruleId":"816","severity":1,"message":"866","line":25,"column":9,"nodeType":"818","messageId":"819","endLine":25,"endColumn":13},{"ruleId":"820","severity":1,"message":"1060","line":134,"column":6,"nodeType":"822","endLine":134,"endColumn":8,"suggestions":"1061"},{"ruleId":"816","severity":1,"message":"845","line":10,"column":10,"nodeType":"818","messageId":"819","endLine":10,"endColumn":25},{"ruleId":"816","severity":1,"message":"1062","line":11,"column":10,"nodeType":"818","messageId":"819","endLine":11,"endColumn":17},{"ruleId":"816","severity":1,"message":"869","line":11,"column":19,"nodeType":"818","messageId":"819","endLine":11,"endColumn":26},{"ruleId":"816","severity":1,"message":"866","line":15,"column":9,"nodeType":"818","messageId":"819","endLine":15,"endColumn":13},{"ruleId":"820","severity":1,"message":"1063","line":82,"column":6,"nodeType":"822","endLine":82,"endColumn":8,"suggestions":"1064"},"no-unused-vars","'faTimesCircle' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'getMilestones', 'history', and 'teacherAuthID'. Either include them or remove the dependency array.","ArrayExpression",["1065"],"no-native-reassign",["1066"],"no-negated-in-lhs",["1067"],["1066"],["1067"],"React Hook useEffect has missing dependencies: 'history' and 'teacherAuthID'. Either include them or remove the dependency array.",["1068"],["1066"],["1067"],["1066"],["1067"],["1066"],["1067"],["1066"],["1067"],["1066"],["1067"],["1066"],["1067"],"'faStar' is defined but never used.","'FontAwesomeIcon' is defined but never used.","'meData' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'getAllReviews', 'history', and 'teacherAuthID'. Either include them or remove the dependency array.",["1069"],["1066"],["1067"],["1070"],["1066"],["1067"],"React Hook useEffect has missing dependencies: 'getStorageObj', 'history', and 'teacherAuthID'. Either include them or remove the dependency array.",["1071"],["1066"],["1067"],"array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","React Hook useEffect has missing dependencies: 'getAllAssignments', 'getAllExercises', 'getAllLessons', 'getAllMilestones', 'getAllQuizzes', 'history', and 'teacherAuthID'. Either include them or remove the dependency array.",["1072"],["1066"],["1067"],"'user' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'getAllMessages', 'getAllTeachers', 'history', and 'studentAuthID'. Either include them or remove the dependency array.",["1073"],"'faTimes' is defined but never used.","React Hook useEffect has missing dependencies: 'checkForExistingStudents', 'getAllStudents', 'history', and 'teacherAuthID'. Either include them or remove the dependency array.",["1074"],"React Hook useEffect has missing dependencies: 'getAllServices', 'history', 'invoice', and 'teacherAuthID'. Either include them or remove the dependency array.",["1075"],["1066"],["1067"],"'groups_Collection' is defined but never used.","'groupState' is assigned a value but never used.",["1076"],["1066"],["1067"],["1066"],["1067"],["1077"],["1078"],["1066"],["1067"],["1066"],["1067"],"'isLoggedInState' is assigned a value but never used.","'accountTypeState' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'checkJoined', 'checkRequested', 'history', and 'teacherAuthID'. Either include them or remove the dependency array.",["1079"],["1080"],"React Hook useEffect has missing dependencies: 'getMeData', 'history', and 'teacherAuthID'. Either include them or remove the dependency array.",["1081"],"'GetToday' is defined but never used.",["1082"],["1066"],["1067"],"'storeTeacherForumsGeneralInfoAction' is defined but never used.","'storeAccountTypeAction' is defined but never used.","'isLoggedInAction' is defined but never used.","'state' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'getAllSettingData', 'getAllStatisticData', 'getAllUserData', 'history', and 'teacherAuthID'. Either include them or remove the dependency array.",["1083"],["1066"],["1067"],"React Hook useEffect has missing dependencies: 'getAllStudents', 'history', and 'teacherAuthID'. Either include them or remove the dependency array.",["1084"],"React Hook useEffect has missing dependencies: 'getAllAwards', 'handleCurrPage', 'history', and 'teacherAuthID'. Either include them or remove the dependency array.",["1085"],"React Hook useEffect has missing dependencies: 'handleCurrPage', 'history', and 'teacherAuthID'. Either include them or remove the dependency array.",["1086"],"'notifID' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'getAllNotifications', 'getMeData', 'history', and 'teacherAuthID'. Either include them or remove the dependency array.",["1087"],"'dashFullMenuAction' is defined but never used.","'dashMenuState' is assigned a value but never used.","'dispatch' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'history' and 'studentAuthID'. Either include them or remove the dependency array.",["1088"],["1089"],["1090"],["1066"],["1067"],["1091"],["1092"],["1066"],["1067"],"React Hook useEffect has missing dependencies: 'getAllAboutData', 'getAllExperienceData', 'handleCurrPage', 'history', and 'teacherAuthID'. Either include them or remove the dependency array.",["1093"],["1066"],["1067"],"React Hook useEffect has missing dependencies: 'getAllPosts', 'history', and 'teacherAuthID'. Either include them or remove the dependency array.",["1094"],["1095"],["1096"],["1097"],"React Hook useEffect has missing dependencies: 'getTodayMonth', 'history', and 'teacherAuthID'. Either include them or remove the dependency array.",["1098"],["1066"],["1067"],"React Hook useEffect has missing dependencies: 'getAllNotifications', 'getMeData', 'history', and 'studentAuthID'. Either include them or remove the dependency array.",["1099"],["1066"],["1067"],"React Hook useEffect has missing dependencies: 'getAllCourses', 'handleCourseThumb', 'history', and 'studentAuthID'. Either include them or remove the dependency array.",["1100"],"React Hook useEffect has missing dependencies: 'getAllAssignments', 'history', and 'teacherAuthID'. Either include them or remove the dependency array.",["1101"],"'storeStudentAuthIDAction' is defined but never used.","React Hook useEffect has missing dependencies: 'getStudentUserData', 'history', and 'studentAuthID'. Either include them or remove the dependency array.",["1102"],"React Hook useEffect has missing dependencies: 'getAllConnRequests', 'getAllConnections', 'getMyUserData', 'history', and 'teacherAuthID'. Either include them or remove the dependency array.",["1103"],["1104"],["1066"],["1067"],"'faEllipsisV' is defined but never used.","'faPen' is defined but never used.","'faPlus' is defined but never used.","React Hook useEffect has missing dependencies: 'getMeData', 'getProfileFeedData', 'handleCurrPage', 'history', and 'teacherAuthID'. Either include them or remove the dependency array.",["1105"],"React Hook useEffect has missing dependencies: 'getAllMessages', 'history', and 'teacherAuthID'. Either include them or remove the dependency array.",["1106"],"React Hook useEffect has missing dependencies: 'getAllMembers', 'history', and 'teacherAuthID'. Either include them or remove the dependency array.",["1107"],"React Hook useEffect has missing dependencies: 'getAllCourses', 'handleAllThumbnails', 'history', and 'teacherAuthID'. Either include them or remove the dependency array.",["1108"],["1109"],["1066"],["1067"],"'useEffect' is defined but never used.","'useSelector' is defined but never used.","'useDispatch' is defined but never used.","'useHistory' is defined but never used.","'RandomString' is defined but never used.","React Hook useEffect has missing dependencies: 'getLessonCount', 'history', and 'teacherAuthID'. Either include them or remove the dependency array.",["1110"],"'raFalse' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'getQuizCount', 'history', and 'teacherAuthID'. Either include them or remove the dependency array.",["1111"],"react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","React Hook useEffect has missing dependencies: 'getAllLessons', 'getAllQuizzes', 'getAllStudents', 'getAssigneeStuds', 'handleCourseThumb', 'history', and 'teacherAuthID'. Either include them or remove the dependency array.",["1112"],["1113"],"React Hook useEffect has missing dependencies: 'getAllGroups', 'history', and 'teacherAuthID'. Either include them or remove the dependency array.",["1114"],["1115"],"'faPray' is defined but never used.","React Hook useEffect has missing dependencies: 'getAllComponents', 'history', and 'teacherAuthID'. Either include them or remove the dependency array.",["1116"],"'orderNum' is assigned a value but never used.","'checkCourseCompletion' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'doEverything', 'history', and 'studentAuthID'. Either include them or remove the dependency array.",["1117"],"'courses_Collection' is defined but never used.","'firebaseLooper' is defined but never used.","'storeStudentTimeAction' is defined but never used.","'storeStudentSingleCourseQuizAction' is defined but never used.","'storeStudentCourseTimerAction' is defined but never used.","React Hook useEffect has missing dependencies: 'handleLessonVideo', 'history', and 'studentAuthID'. Either include them or remove the dependency array.",["1118"],"'seconds' is assigned a value but never used.","no-redeclare","'storage' is already defined.","redeclared","'storageRef' is already defined.","React Hook useEffect has missing dependencies: 'getAllComponents', 'handleMediaComps', 'history', and 'studentAuthID'. Either include them or remove the dependency array.",["1119"],["1120"],["1121"],"React Hook useEffect has missing dependencies: 'getAllConnRequests', 'getAllConnections', 'getMyUserData', 'history', and 'studentAuthID'. Either include them or remove the dependency array.",["1122"],"React Hook useEffect has missing dependencies: 'getMeData', 'getProfileFeedData', 'handleCurrPage', 'history', and 'studentAuthID'. Either include them or remove the dependency array.",["1123"],["1066"],["1067"],"React Hook useEffect has missing dependencies: 'getMeData', 'handleCurrPage', 'history', and 'studentAuthID'. Either include them or remove the dependency array.",["1124"],["1066"],["1067"],"'storeStudentProfileFeedPostAction' is defined but never used.","React Hook useEffect has missing dependencies: 'handleCurrPage', 'history', and 'studentAuthID'. Either include them or remove the dependency array.",["1125"],"React Hook useEffect has missing dependencies: 'getAllAboutData', 'getAllExperienceData', 'handleCurrPage', 'history', and 'studentAuthID'. Either include them or remove the dependency array.",["1126"],["1127"],"'storeAwardListAction' is defined but never used.","'storeCertListAction' is defined but never used.","React Hook useEffect has missing dependencies: 'getAllAwards', 'handleCurrPage', 'history', and 'studentAuthID'. Either include them or remove the dependency array.",["1128"],["1129"],"React Hook useEffect has missing dependencies: 'getAllReviews', 'handleCurrPage', 'history', and 'studentAuthID'. Either include them or remove the dependency array.",["1130"],["1131"],["1132"],"React Hook useEffect has missing dependencies: 'getAllStudents', 'getAllTasks', 'getMeData', 'getMilestoneAssignees', 'history', and 'teacherAuthID'. Either include them or remove the dependency array.",["1133"],"'storeTeacherMilestonesGeneralInfoAction' is defined but never used.",["1134"],["1135"],"React Hook useEffect has missing dependencies: 'getAllConnections', 'history', and 'teacherAuthID'. Either include them or remove the dependency array.",["1136"],"'connection' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'getMeData', 'history', 'messages', and 'teacherAuthID'. Either include them or remove the dependency array.",["1137"],["1138"],["1139"],"React Hook useEffect has missing dependencies: 'history', 'onColorClick', and 'teacherAuthID'. Either include them or remove the dependency array.",["1140"],"'storeStudentAssignmentsAction' is defined but never used.","React Hook useEffect has missing dependencies: 'getAllCompletedAssignments', 'getAllIncompleteAssignments', 'history', and 'studentAuthID'. Either include them or remove the dependency array.",["1141"],["1142"],"'teachers_Collection' is defined but never used.","'MilestonesCreate' is defined but never used.","React Hook useEffect has missing dependencies: 'getCompleteMilestones', 'getIncompleteMilestones', 'history', and 'studentAuthID'. Either include them or remove the dependency array.",["1143"],"'faCheck' is defined but never used.","React Hook useEffect has missing dependencies: 'getTasks', 'history', and 'studentAuthID'. Either include them or remove the dependency array.",["1144"],{"desc":"1145","fix":"1146"},"no-global-assign","no-unsafe-negation",{"desc":"1147","fix":"1148"},{"desc":"1149","fix":"1150"},{"desc":"1147","fix":"1151"},{"desc":"1152","fix":"1153"},{"desc":"1154","fix":"1155"},{"desc":"1156","fix":"1157"},{"desc":"1158","fix":"1159"},{"desc":"1160","fix":"1161"},{"desc":"1147","fix":"1162"},{"desc":"1147","fix":"1163"},{"desc":"1152","fix":"1164"},{"desc":"1165","fix":"1166"},{"desc":"1147","fix":"1167"},{"desc":"1168","fix":"1169"},{"desc":"1147","fix":"1170"},{"desc":"1171","fix":"1172"},{"desc":"1173","fix":"1174"},{"desc":"1175","fix":"1176"},{"desc":"1177","fix":"1178"},{"desc":"1179","fix":"1180"},{"desc":"1181","fix":"1182"},{"desc":"1183","fix":"1184"},{"desc":"1147","fix":"1185"},{"desc":"1152","fix":"1186"},{"desc":"1152","fix":"1187"},{"desc":"1188","fix":"1189"},{"desc":"1190","fix":"1191"},{"desc":"1147","fix":"1192"},{"desc":"1177","fix":"1193"},{"desc":"1147","fix":"1194"},{"desc":"1195","fix":"1196"},{"desc":"1197","fix":"1198"},{"desc":"1199","fix":"1200"},{"desc":"1201","fix":"1202"},{"desc":"1203","fix":"1204"},{"desc":"1205","fix":"1206"},{"desc":"1152","fix":"1207"},{"desc":"1208","fix":"1209"},{"desc":"1210","fix":"1211"},{"desc":"1212","fix":"1213"},{"desc":"1214","fix":"1215"},{"desc":"1147","fix":"1216"},{"desc":"1217","fix":"1218"},{"desc":"1219","fix":"1220"},{"desc":"1221","fix":"1222"},{"desc":"1152","fix":"1223"},{"desc":"1224","fix":"1225"},{"desc":"1147","fix":"1226"},{"desc":"1227","fix":"1228"},{"desc":"1229","fix":"1230"},{"desc":"1231","fix":"1232"},{"desc":"1233","fix":"1234"},{"desc":"1183","fix":"1235"},{"desc":"1147","fix":"1236"},{"desc":"1237","fix":"1238"},{"desc":"1239","fix":"1240"},{"desc":"1241","fix":"1242"},{"desc":"1243","fix":"1244"},{"desc":"1245","fix":"1246"},{"desc":"1243","fix":"1247"},{"desc":"1248","fix":"1249"},{"desc":"1243","fix":"1250"},{"desc":"1251","fix":"1252"},{"desc":"1243","fix":"1253"},{"desc":"1243","fix":"1254"},{"desc":"1255","fix":"1256"},{"desc":"1147","fix":"1257"},{"desc":"1147","fix":"1258"},{"desc":"1259","fix":"1260"},{"desc":"1261","fix":"1262"},{"desc":"1147","fix":"1263"},{"desc":"1147","fix":"1264"},{"desc":"1265","fix":"1266"},{"desc":"1267","fix":"1268"},{"desc":"1269","fix":"1270"},{"desc":"1271","fix":"1272"},{"desc":"1273","fix":"1274"},"Update the dependencies array to be: [getMilestones, history, teacherAuthID]",{"range":"1275","text":"1276"},"Update the dependencies array to be: [history, teacherAuthID]",{"range":"1277","text":"1278"},"Update the dependencies array to be: [getAllReviews, history, teacherAuthID]",{"range":"1279","text":"1280"},{"range":"1281","text":"1278"},"Update the dependencies array to be: [getStorageObj, history, teacherAuthID]",{"range":"1282","text":"1283"},"Update the dependencies array to be: [getAllAssignments, getAllExercises, getAllLessons, getAllMilestones, getAllQuizzes, history, teacherAuthID]",{"range":"1284","text":"1285"},"Update the dependencies array to be: [getAllMessages, getAllTeachers, history, studentAuthID]",{"range":"1286","text":"1287"},"Update the dependencies array to be: [checkForExistingStudents, getAllStudents, history, teacherAuthID]",{"range":"1288","text":"1289"},"Update the dependencies array to be: [getAllServices, history, invoice, teacherAuthID]",{"range":"1290","text":"1291"},{"range":"1292","text":"1278"},{"range":"1293","text":"1278"},{"range":"1294","text":"1283"},"Update the dependencies array to be: [checkJoined, checkRequested, history, teacherAuthID]",{"range":"1295","text":"1296"},{"range":"1297","text":"1278"},"Update the dependencies array to be: [getMeData, history, teacherAuthID]",{"range":"1298","text":"1299"},{"range":"1300","text":"1278"},"Update the dependencies array to be: [getAllSettingData, getAllStatisticData, getAllUserData, history, teacherAuthID]",{"range":"1301","text":"1302"},"Update the dependencies array to be: [getAllStudents, history, teacherAuthID]",{"range":"1303","text":"1304"},"Update the dependencies array to be: [getAllAwards, handleCurrPage, history, teacherAuthID]",{"range":"1305","text":"1306"},"Update the dependencies array to be: [handleCurrPage, history, teacherAuthID]",{"range":"1307","text":"1308"},"Update the dependencies array to be: [getAllNotifications, getMeData, history, teacherAuthID]",{"range":"1309","text":"1310"},"Update the dependencies array to be: [history, studentAuthID, user]",{"range":"1311","text":"1312"},"Update the dependencies array to be: [history, studentAuthID]",{"range":"1313","text":"1314"},{"range":"1315","text":"1278"},{"range":"1316","text":"1283"},{"range":"1317","text":"1283"},"Update the dependencies array to be: [getAllAboutData, getAllExperienceData, handleCurrPage, history, teacherAuthID]",{"range":"1318","text":"1319"},"Update the dependencies array to be: [getAllPosts, history, teacherAuthID]",{"range":"1320","text":"1321"},{"range":"1322","text":"1278"},{"range":"1323","text":"1308"},{"range":"1324","text":"1278"},"Update the dependencies array to be: [getTodayMonth, history, teacherAuthID]",{"range":"1325","text":"1326"},"Update the dependencies array to be: [getAllNotifications, getMeData, history, studentAuthID]",{"range":"1327","text":"1328"},"Update the dependencies array to be: [courses, getAllCourses, handleCourseThumb, history, studentAuthID]",{"range":"1329","text":"1330"},"Update the dependencies array to be: [getAllAssignments, history, teacherAuthID]",{"range":"1331","text":"1332"},"Update the dependencies array to be: [getStudentUserData, history, studentAuthID]",{"range":"1333","text":"1334"},"Update the dependencies array to be: [getAllConnRequests, getAllConnections, getMyUserData, history, teacherAuthID]",{"range":"1335","text":"1336"},{"range":"1337","text":"1283"},"Update the dependencies array to be: [getMeData, getProfileFeedData, handleCurrPage, history, posts, teacherAuthID]",{"range":"1338","text":"1339"},"Update the dependencies array to be: [getAllMessages, history, teacherAuthID]",{"range":"1340","text":"1341"},"Update the dependencies array to be: [getAllMembers, history, teacherAuthID]",{"range":"1342","text":"1343"},"Update the dependencies array to be: [getAllCourses, handleAllThumbnails, history, teacherAuthID]",{"range":"1344","text":"1345"},{"range":"1346","text":"1278"},"Update the dependencies array to be: [getLessonCount, history, teacherAuthID]",{"range":"1347","text":"1348"},"Update the dependencies array to be: [getQuizCount, history, teacherAuthID]",{"range":"1349","text":"1350"},"Update the dependencies array to be: [getAllLessons, getAllQuizzes, getAllStudents, getAssigneeStuds, handleCourseThumb, history, teacherAuthID]",{"range":"1351","text":"1352"},{"range":"1353","text":"1283"},"Update the dependencies array to be: [getAllGroups, history, teacherAuthID]",{"range":"1354","text":"1355"},{"range":"1356","text":"1278"},"Update the dependencies array to be: [getAllComponents, history, teacherAuthID]",{"range":"1357","text":"1358"},"Update the dependencies array to be: [doEverything, history, studentAuthID]",{"range":"1359","text":"1360"},"Update the dependencies array to be: [handleLessonVideo, history, lesson, studentAuthID]",{"range":"1361","text":"1362"},"Update the dependencies array to be: [getAllComponents, handleMediaComps, history, quiz, studentAuthID]",{"range":"1363","text":"1364"},{"range":"1365","text":"1314"},{"range":"1366","text":"1278"},"Update the dependencies array to be: [getAllConnRequests, getAllConnections, getMyUserData, history, studentAuthID]",{"range":"1367","text":"1368"},"Update the dependencies array to be: [getMeData, getProfileFeedData, handleCurrPage, history, posts, studentAuthID]",{"range":"1369","text":"1370"},"Update the dependencies array to be: [getMeData, handleCurrPage, history, studentAuthID]",{"range":"1371","text":"1372"},"Update the dependencies array to be: [handleCurrPage, history, studentAuthID]",{"range":"1373","text":"1374"},"Update the dependencies array to be: [about, exp, getAllAboutData, getAllExperienceData, handleCurrPage, history, studentAuthID]",{"range":"1375","text":"1376"},{"range":"1377","text":"1374"},"Update the dependencies array to be: [awards, getAllAwards, handleCurrPage, history, studentAuthID]",{"range":"1378","text":"1379"},{"range":"1380","text":"1374"},"Update the dependencies array to be: [getAllReviews, handleCurrPage, history, reviews, studentAuthID]",{"range":"1381","text":"1382"},{"range":"1383","text":"1374"},{"range":"1384","text":"1374"},"Update the dependencies array to be: [getAllStudents, getAllTasks, getMeData, getMilestoneAssignees, history, teacherAuthID]",{"range":"1385","text":"1386"},{"range":"1387","text":"1278"},{"range":"1388","text":"1278"},"Update the dependencies array to be: [connections, getAllConnections, history, teacherAuthID]",{"range":"1389","text":"1390"},"Update the dependencies array to be: [getMeData, history, messages, teacherAuthID, thread]",{"range":"1391","text":"1392"},{"range":"1393","text":"1278"},{"range":"1394","text":"1278"},"Update the dependencies array to be: [history, onColorClick, teacherAuthID]",{"range":"1395","text":"1396"},"Update the dependencies array to be: [completed, getAllCompletedAssignments, getAllIncompleteAssignments, history, incomplete, studentAuthID]",{"range":"1397","text":"1398"},"Update the dependencies array to be: [assignment, history, studentAuthID]",{"range":"1399","text":"1400"},"Update the dependencies array to be: [getCompleteMilestones, getIncompleteMilestones, history, studentAuthID]",{"range":"1401","text":"1402"},"Update the dependencies array to be: [getTasks, history, studentAuthID]",{"range":"1403","text":"1404"},[3438,3440],"[getMilestones, history, teacherAuthID]",[1032,1034],"[history, teacherAuthID]",[2264,2266],"[getAllReviews, history, teacherAuthID]",[4038,4040],[868,870],"[getStorageObj, history, teacherAuthID]",[13128,13130],"[getAllAssignments, getAllExercises, getAllLessons, getAllMilestones, getAllQuizzes, history, teacherAuthID]",[6119,6121],"[getAllMessages, getAllTeachers, history, studentAuthID]",[8006,8008],"[checkForExistingStudents, getAllStudents, history, teacherAuthID]",[1424,1426],"[getAllServices, history, invoice, teacherAuthID]",[2358,2360],[1144,1146],[868,870],[3631,3633],"[checkJoined, checkRequested, history, teacherAuthID]",[624,626],[4381,4383],"[getMeData, history, teacherAuthID]",[1489,1491],[2697,2699],"[getAllSettingData, getAllStatisticData, getAllUserData, history, teacherAuthID]",[7177,7179],"[getAllStudents, history, teacherAuthID]",[2992,2994],"[getAllAwards, handleCurrPage, history, teacherAuthID]",[7076,7078],"[handleCurrPage, history, teacherAuthID]",[10090,10092],"[getAllNotifications, getMeData, history, teacherAuthID]",[1361,1367],"[history, studentAuthID, user]",[3274,3276],"[history, studentAuthID]",[516,518],[872,874],[868,870],[3139,3141],"[getAllAboutData, getAllExperienceData, handleCurrPage, history, teacherAuthID]",[3652,3654],"[getAllPosts, history, teacherAuthID]",[6263,6265],[7887,7889],[7105,7107],[7150,7152],"[getTodayMonth, history, teacherAuthID]",[16426,16428],"[getAllNotifications, getMeData, history, studentAuthID]",[3844,3853],"[courses, getAllCourses, handleCourseThumb, history, studentAuthID]",[3591,3593],"[getAllAssignments, history, teacherAuthID]",[1176,1178],"[getStudentUserData, history, studentAuthID]",[10779,10781],"[getAllConnRequests, getAllConnections, getMyUserData, history, teacherAuthID]",[868,870],[4221,4228],"[getMeData, getProfileFeedData, handleCurrPage, history, posts, teacherAuthID]",[6262,6264],"[getAllMessages, history, teacherAuthID]",[1437,1439],"[getAllMembers, history, teacherAuthID]",[6179,6181],"[getAllCourses, handleAllThumbnails, history, teacherAuthID]",[2029,2031],[2261,2263],"[getLessonCount, history, teacherAuthID]",[26789,26791],"[getQuizCount, history, teacherAuthID]",[10871,10873],"[getAllLessons, getAllQuizzes, getAllStudents, getAssigneeStuds, handleCourseThumb, history, teacherAuthID]",[870,872],[6305,6307],"[getAllGroups, history, teacherAuthID]",[3403,3405],[48528,48530],"[getAllComponents, history, teacherAuthID]",[7935,7937],"[doEverything, history, studentAuthID]",[2548,2556],"[handleLessonVideo, history, lesson, studentAuthID]",[18687,18693],"[getAllComponents, handleMediaComps, history, quiz, studentAuthID]",[1627,1629],[1191,1193],[10281,10283],"[getAllConnRequests, getAllConnections, getMyUserData, history, studentAuthID]",[3978,3985],"[getMeData, getProfileFeedData, handleCurrPage, history, posts, studentAuthID]",[4426,4428],"[getMeData, handleCurrPage, history, studentAuthID]",[4122,4124],"[handleCurrPage, history, studentAuthID]",[3087,3099],"[about, exp, getAllAboutData, getAllExperienceData, handleCurrPage, history, studentAuthID]",[7929,7931],[3250,3258],"[awards, getAllAwards, handleCurrPage, history, studentAuthID]",[7130,7132],[3355,3364],"[getAllReviews, handleCurrPage, history, reviews, studentAuthID]",[2889,2891],[2940,2942],[7449,7451],"[getAllStudents, getAllTasks, getMeData, getMilestoneAssignees, history, teacherAuthID]",[4623,4625],[1888,1890],[5574,5587],"[connections, getAllConnections, history, teacherAuthID]",[5512,5520],"[getMeData, history, messages, teacherAuthID, thread]",[666,668],[4066,4068],[4620,4622],"[history, onColorClick, teacherAuthID]",[4078,4101],"[completed, getAllCompletedAssignments, getAllIncompleteAssignments, history, incomplete, studentAuthID]",[7934,7946],"[assignment, history, studentAuthID]",[3936,3938],"[getCompleteMilestones, getIncompleteMilestones, history, studentAuthID]",[2492,2494],"[getTasks, history, studentAuthID]"]